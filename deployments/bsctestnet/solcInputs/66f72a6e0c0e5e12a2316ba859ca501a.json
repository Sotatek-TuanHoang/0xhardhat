{
  "language": "Solidity",
  "sources": {
    "contracts/asset-proxy/contracts/archive/MixinAssetProxyDispatcher.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"../archive/Ownable.sol\";\nimport \"../src/interfaces/IAssetProxy.sol\";\nimport \"../src/interfaces/IAssetProxyDispatcher.sol\";\n\n\ncontract MixinAssetProxyDispatcher is\n    Ownable,\n    IAssetProxyDispatcher\n{\n    // Mapping from Asset Proxy Id's to their respective Asset Proxy\n    mapping (bytes4 => address) public assetProxies;\n\n    /// @dev Registers an asset proxy to its asset proxy id.\n    ///      Once an asset proxy is registered, it cannot be unregistered.\n    /// @param assetProxy Address of new asset proxy to register.\n    function registerAssetProxy(address assetProxy)\n        external\n        onlyOwner\n    {\n        // Ensure that no asset proxy exists with current id.\n        bytes4 assetProxyId = IAssetProxy(assetProxy).getProxyId();\n        address currentAssetProxy = assetProxies[assetProxyId];\n        require(\n            currentAssetProxy == address(0),\n            \"ASSET_PROXY_ALREADY_EXISTS\"\n        );\n\n        // Add asset proxy and log registration.\n        assetProxies[assetProxyId] = assetProxy;\n        emit AssetProxyRegistered(\n            assetProxyId,\n            assetProxy\n        );\n    }\n\n    /// @dev Gets an asset proxy.\n    /// @param assetProxyId Id of the asset proxy.\n    /// @return The asset proxy registered to assetProxyId. Returns 0x0 if no proxy is registered.\n    function getAssetProxy(bytes4 assetProxyId)\n        external\n        view\n        returns (address)\n    {\n        return assetProxies[assetProxyId];\n    }\n\n    /// @dev Forwards arguments to assetProxy and calls `transferFrom`. Either succeeds or throws.\n    /// @param assetData Byte array encoded for the asset.\n    /// @param from Address to transfer token from.\n    /// @param to Address to transfer token to.\n    /// @param amount Amount of token to transfer.\n    function _dispatchTransferFrom(\n        bytes memory assetData,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        // Do nothing if no amount should be transferred.\n        if (amount > 0 && from != to) {\n            // Ensure assetData length is valid\n            require(\n                assetData.length > 3,\n                \"LENGTH_GREATER_THAN_3_REQUIRED\"\n            );\n\n            // Lookup assetProxy. We do not use `LibBytes.readBytes4` for gas efficiency reasons.\n            bytes4 assetProxyId;\n            assembly {\n                assetProxyId := and(mload(\n                    add(assetData, 32)),\n                    0xFFFFFFFF00000000000000000000000000000000000000000000000000000000\n                )\n            }\n            address assetProxy = assetProxies[assetProxyId];\n\n            // Ensure that assetProxy exists\n            require(\n                assetProxy != address(0),\n                \"ASSET_PROXY_DOES_NOT_EXIST\"\n            );\n\n            // We construct calldata for the `assetProxy.transferFrom` ABI.\n            // The layout of this calldata is in the table below.\n            //\n            // | Area     | Offset | Length  | Contents                                    |\n            // | -------- |--------|---------|-------------------------------------------- |\n            // | Header   | 0      | 4       | function selector                           |\n            // | Params   |        | 4 * 32  | function parameters:                        |\n            // |          | 4      |         |   1. offset to assetData (*)                |\n            // |          | 36     |         |   2. from                                   |\n            // |          | 68     |         |   3. to                                     |\n            // |          | 100    |         |   4. amount                                 |\n            // | Data     |        |         | assetData:                                  |\n            // |          | 132    | 32      | assetData Length                            |\n            // |          | 164    | **      | assetData Contents                          |\n\n            assembly {\n                /////// Setup State ///////\n                // `cdStart` is the start of the calldata for `assetProxy.transferFrom` (equal to free memory ptr).\n                let cdStart := mload(64)\n                // `dataAreaLength` is the total number of words needed to store `assetData`\n                //  As-per the ABI spec, this value is padded up to the nearest multiple of 32,\n                //  and includes 32-bytes for length.\n                let dataAreaLength := and(add(mload(assetData), 63), 0xFFFFFFFFFFFE0)\n                // `cdEnd` is the end of the calldata for `assetProxy.transferFrom`.\n                let cdEnd := add(cdStart, add(132, dataAreaLength))\n\n\n                /////// Setup Header Area ///////\n                // This area holds the 4-byte `transferFromSelector`.\n                // bytes4(keccak256(\"transferFrom(bytes,address,address,uint256)\")) = 0xa85e59e4\n                mstore(cdStart, 0xa85e59e400000000000000000000000000000000000000000000000000000000)\n\n                /////// Setup Params Area ///////\n                // Each parameter is padded to 32-bytes. The entire Params Area is 128 bytes.\n                // Notes:\n                //   1. The offset to `assetData` is the length of the Params Area (128 bytes).\n                //   2. A 20-byte mask is applied to addresses to zero-out the unused bytes.\n                mstore(add(cdStart, 4), 128)\n                mstore(add(cdStart, 36), and(from, 0xffffffffffffffffffffffffffffffffffffffff))\n                mstore(add(cdStart, 68), and(to, 0xffffffffffffffffffffffffffffffffffffffff))\n                mstore(add(cdStart, 100), amount)\n\n                /////// Setup Data Area ///////\n                // This area holds `assetData`.\n                let dataArea := add(cdStart, 132)\n                // solhint-disable-next-line no-empty-blocks\n                for {} lt(dataArea, cdEnd) {} {\n                    mstore(dataArea, mload(assetData))\n                    dataArea := add(dataArea, 32)\n                    assetData := add(assetData, 32)\n                }\n\n                /////// Call `assetProxy.transferFrom` using the constructed calldata ///////\n                let success := call(\n                    gas,                    // forward all gas\n                    assetProxy,             // call address of asset proxy\n                    0,                      // don't send any ETH\n                    cdStart,                // pointer to start of input\n                    sub(cdEnd, cdStart),    // length of input\n                    cdStart,                // write output over input\n                    512                     // reserve 512 bytes for output\n                )\n                if iszero(success) {\n                    revert(cdStart, returndatasize())\n                }\n            }\n        }\n    }\n}\n"
    },
    "contracts/asset-proxy/contracts/archive/Ownable.sol": {
      "content": "pragma solidity ^0.5.9;\n\nimport \"@0x/contracts-utils/contracts/src/interfaces/IOwnable.sol\";\n\n\ncontract Ownable is\n    IOwnable\n{\n    address public owner;\n\n    constructor ()\n        public\n    {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(\n            msg.sender == owner,\n            \"ONLY_CONTRACT_OWNER\"\n        );\n        _;\n    }\n\n    function transferOwnership(address newOwner)\n        public\n        onlyOwner\n    {\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n}\n"
    },
    "contracts/asset-proxy/contracts/src/interfaces/IAssetProxy.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ncontract IAssetProxy {\n\n    /// @dev Transfers assets. Either succeeds or throws.\n    /// @param assetData Byte array encoded for the respective asset proxy.\n    /// @param from Address to transfer asset from.\n    /// @param to Address to transfer asset to.\n    /// @param amount Amount of asset to transfer.\n    function transferFrom(\n        bytes calldata assetData,\n        address from,\n        address to,\n        uint256 amount\n    )\n        external;\n    \n    /// @dev Gets the proxy id associated with the proxy address.\n    /// @return Proxy id.\n    function getProxyId()\n        external\n        pure\n        returns (bytes4);\n}\n"
    },
    "contracts/asset-proxy/contracts/src/interfaces/IAssetProxyDispatcher.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ncontract IAssetProxyDispatcher {\n\n    // Logs registration of new asset proxy\n    event AssetProxyRegistered(\n        bytes4 id,              // Id of new registered AssetProxy.\n        address assetProxy      // Address of new registered AssetProxy.\n    );\n\n    /// @dev Registers an asset proxy to its asset proxy id.\n    ///      Once an asset proxy is registered, it cannot be unregistered.\n    /// @param assetProxy Address of new asset proxy to register.\n    function registerAssetProxy(address assetProxy)\n        external;\n\n    /// @dev Gets an asset proxy.\n    /// @param assetProxyId Id of the asset proxy.\n    /// @return The asset proxy registered to assetProxyId. Returns 0x0 if no proxy is registered.\n    function getAssetProxy(bytes4 assetProxyId)\n        external\n        view\n        returns (address);\n}\n"
    },
    "@0x/contracts-utils/contracts/src/interfaces/IOwnable.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ncontract IOwnable {\n\n    /// @dev Emitted by Ownable when ownership is transferred.\n    /// @param previousOwner The previous owner of the contract.\n    /// @param newOwner The new owner of the contract.\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /// @dev Transfers ownership of the contract to a new address.\n    /// @param newOwner The address that will become the owner.\n    function transferOwnership(address newOwner)\n        public;\n}\n"
    },
    "contracts/asset-proxy/contracts/src/MultiAssetProxy.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"../archive/MixinAssetProxyDispatcher.sol\";\nimport \"../archive/MixinAuthorizable.sol\";\n\n\ncontract MultiAssetProxy is\n    MixinAssetProxyDispatcher,\n    MixinAuthorizable\n{\n    // Id of this proxy.\n    bytes4 constant internal PROXY_ID = bytes4(keccak256(\"MultiAsset(uint256[],bytes[])\"));\n\n    // solhint-disable-next-line payable-fallback\n    function ()\n        external\n    {\n        // NOTE: The below assembly assumes that clients do some input validation and that the input is properly encoded according to the AbiV2 specification.\n        // It is technically possible for inputs with very large lengths and offsets to cause overflows. However, this would make the calldata prohibitively\n        // expensive and we therefore do not check for overflows in these scenarios.\n        assembly {\n            // The first 4 bytes of calldata holds the function selector\n            let selector := and(calldataload(0), 0xffffffff00000000000000000000000000000000000000000000000000000000)\n\n            // `transferFrom` will be called with the following parameters:\n            // assetData Encoded byte array.\n            // from Address to transfer asset from.\n            // to Address to transfer asset to.\n            // amount Amount of asset to transfer.\n            // bytes4(keccak256(\"transferFrom(bytes,address,address,uint256)\")) = 0xa85e59e4\n            if eq(selector, 0xa85e59e400000000000000000000000000000000000000000000000000000000) {\n\n                // To lookup a value in a mapping, we load from the storage location keccak256(k, p),\n                // where k is the key left padded to 32 bytes and p is the storage slot\n                mstore(0, caller)\n                mstore(32, authorized_slot)\n\n                // Revert if authorized[msg.sender] == false\n                if iszero(sload(keccak256(0, 64))) {\n                    // Revert with `Error(\"SENDER_NOT_AUTHORIZED\")`\n                    mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n                    mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n                    mstore(64, 0x0000001553454e4445525f4e4f545f415554484f52495a454400000000000000)\n                    mstore(96, 0)\n                    revert(0, 100)\n                }\n\n                // `transferFrom`.\n                // The function is marked `external`, so no abi decoding is done for\n                // us. Instead, we expect the `calldata` memory to contain the\n                // following:\n                //\n                // | Area     | Offset | Length  | Contents                            |\n                // |----------|--------|---------|-------------------------------------|\n                // | Header   | 0      | 4       | function selector                   |\n                // | Params   |        | 4 * 32  | function parameters:                |\n                // |          | 4      |         |   1. offset to assetData (*)        |\n                // |          | 36     |         |   2. from                           |\n                // |          | 68     |         |   3. to                             |\n                // |          | 100    |         |   4. amount                         |\n                // | Data     |        |         | assetData:                          |\n                // |          | 132    | 32      | assetData Length                    |\n                // |          | 164    | **      | assetData Contents                  |\n                //\n                // (*): offset is computed from start of function parameters, so offset\n                //      by an additional 4 bytes in the calldata.\n                //\n                // (**): see table below to compute length of assetData Contents\n                //\n                // WARNING: The ABIv2 specification allows additional padding between\n                //          the Params and Data section. This will result in a larger\n                //          offset to assetData.\n\n                // Load offset to `assetData`\n                let assetDataOffset := add(calldataload(4), 4)\n\n                // Load length in bytes of `assetData`\n                let assetDataLength := calldataload(assetDataOffset)\n\n                // Asset data itself is encoded as follows:\n                //\n                // | Area     | Offset      | Length  | Contents                            |\n                // |----------|-------------|---------|-------------------------------------|\n                // | Header   | 0           | 4       | assetProxyId                        |\n                // | Params   |             | 2 * 32  | function parameters:                |\n                // |          | 4           |         |   1. offset to amounts (*)          |\n                // |          | 36          |         |   2. offset to nestedAssetData (*)  |\n                // | Data     |             |         | amounts:                            |\n                // |          | 68          | 32      | amounts Length                      |\n                // |          | 100         | a       | amounts Contents                    |\n                // |          |             |         | nestedAssetData:                    |\n                // |          | 100 + a     | 32      | nestedAssetData Length              |\n                // |          | 132 + a     | b       | nestedAssetData Contents (offsets)  |\n                // |          | 132 + a + b |         | nestedAssetData[0, ..., len]        |\n\n                // Assert that the length of asset data:\n                // 1. Must be at least 68 bytes (see table above)\n                // 2. Must be a multiple of 32 (excluding the 4-byte selector)\n                if or(lt(assetDataLength, 68), mod(sub(assetDataLength, 4), 32)) {\n                    // Revert with `Error(\"INVALID_ASSET_DATA_LENGTH\")`\n                    mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n                    mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n                    mstore(64, 0x00000019494e56414c49445f41535345545f444154415f4c454e475448000000)\n                    mstore(96, 0)\n                    revert(0, 100)\n                }\n\n                // End of asset data in calldata\n                // assetDataOffset\n                // + 32 (assetData len)\n                let assetDataEnd := add(assetDataOffset, add(assetDataLength, 32))\n                if gt(assetDataEnd, calldatasize()) {\n                    // Revert with `Error(\"INVALID_ASSET_DATA_END\")`\n                    mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n                    mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n                    mstore(64, 0x00000016494e56414c49445f41535345545f444154415f454e44000000000000)\n                    mstore(96, 0)\n                    revert(0, 100)\n                }\n\n                // In order to find the offset to `amounts`, we must add:\n                // assetDataOffset\n                // + 32 (assetData len)\n                // + 4 (assetProxyId)\n                let amountsOffset := calldataload(add(assetDataOffset, 36))\n\n                // In order to find the offset to `nestedAssetData`, we must add:\n                // assetDataOffset\n                // + 32 (assetData len)\n                // + 4 (assetProxyId)\n                // + 32 (amounts offset)\n                let nestedAssetDataOffset := calldataload(add(assetDataOffset, 68))\n\n                // In order to find the start of the `amounts` contents, we must add:\n                // assetDataOffset\n                // + 32 (assetData len)\n                // + 4 (assetProxyId)\n                // + amountsOffset\n                // + 32 (amounts len)\n                let amountsContentsStart := add(assetDataOffset, add(amountsOffset, 68))\n\n                // Load number of elements in `amounts`\n                let amountsLen := calldataload(sub(amountsContentsStart, 32))\n\n                // In order to find the start of the `nestedAssetData` contents, we must add:\n                // assetDataOffset\n                // + 32 (assetData len)\n                // + 4 (assetProxyId)\n                // + nestedAssetDataOffset\n                // + 32 (nestedAssetData len)\n                let nestedAssetDataContentsStart := add(assetDataOffset, add(nestedAssetDataOffset, 68))\n\n                // Load number of elements in `nestedAssetData`\n                let nestedAssetDataLen := calldataload(sub(nestedAssetDataContentsStart, 32))\n\n                // Revert if number of elements in `amounts` differs from number of elements in `nestedAssetData`\n                if sub(amountsLen, nestedAssetDataLen) {\n                    // Revert with `Error(\"LENGTH_MISMATCH\")`\n                    mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n                    mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n                    mstore(64, 0x0000000f4c454e4754485f4d49534d4154434800000000000000000000000000)\n                    mstore(96, 0)\n                    revert(0, 100)\n                }\n\n                // Copy `transferFrom` selector, offset to `assetData`, `from`, and `to` from calldata to memory\n                calldatacopy(\n                    0,   // memory can safely be overwritten from beginning\n                    0,   // start of calldata\n                    100  // length of selector (4) and 3 params (32 * 3)\n                )\n\n                // Overwrite existing offset to `assetData` with our own\n                mstore(4, 128)\n\n                // Load `amount`\n                let amount := calldataload(100)\n\n                // Calculate number of bytes in `amounts` contents\n                let amountsByteLen := mul(amountsLen, 32)\n\n                // Initialize `assetProxyId` and `assetProxy` to 0\n                let assetProxyId := 0\n                let assetProxy := 0\n\n                // Loop through `amounts` and `nestedAssetData`, calling `transferFrom` for each respective element\n                for {let i := 0} lt(i, amountsByteLen) {i := add(i, 32)} {\n\n                    // Calculate the total amount\n                    let amountsElement := calldataload(add(amountsContentsStart, i))\n                    let totalAmount := mul(amountsElement, amount)\n\n                    // Revert if `amount` != 0 and multiplication resulted in an overflow\n                    if iszero(or(\n                        iszero(amount),\n                        eq(div(totalAmount, amount), amountsElement)\n                    )) {\n                        // Revert with `Error(\"UINT256_OVERFLOW\")`\n                        mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n                        mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n                        mstore(64, 0x0000001055494e543235365f4f564552464c4f57000000000000000000000000)\n                        mstore(96, 0)\n                        revert(0, 100)\n                    }\n\n                    // Write `totalAmount` to memory\n                    mstore(100, totalAmount)\n\n                    // Load offset to `nestedAssetData[i]`\n                    let nestedAssetDataElementOffset := calldataload(add(nestedAssetDataContentsStart, i))\n\n                    // In order to find the start of the `nestedAssetData[i]` contents, we must add:\n                    // assetDataOffset\n                    // + 32 (assetData len)\n                    // + 4 (assetProxyId)\n                    // + nestedAssetDataOffset\n                    // + 32 (nestedAssetData len)\n                    // + nestedAssetDataElementOffset\n                    // + 32 (nestedAssetDataElement len)\n                    let nestedAssetDataElementContentsStart := add(\n                        assetDataOffset,\n                        add(\n                            nestedAssetDataOffset,\n                            add(nestedAssetDataElementOffset, 100)\n                        )\n                    )\n\n                    // Load length of `nestedAssetData[i]`\n                    let nestedAssetDataElementLenStart := sub(nestedAssetDataElementContentsStart, 32)\n                    let nestedAssetDataElementLen := calldataload(nestedAssetDataElementLenStart)\n\n                    // Revert if the `nestedAssetData` does not contain a 4 byte `assetProxyId`\n                    if lt(nestedAssetDataElementLen, 4) {\n                        // Revert with `Error(\"LENGTH_GREATER_THAN_3_REQUIRED\")`\n                        mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n                        mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n                        mstore(64, 0x0000001e4c454e4754485f475245415445525f5448414e5f335f524551554952)\n                        mstore(96, 0x4544000000000000000000000000000000000000000000000000000000000000)\n                        revert(0, 100)\n                    }\n\n                    // Load AssetProxy id\n                    let currentAssetProxyId := and(\n                        calldataload(nestedAssetDataElementContentsStart),\n                        0xffffffff00000000000000000000000000000000000000000000000000000000\n                    )\n\n                    // Only load `assetProxy` if `currentAssetProxyId` does not equal `assetProxyId`\n                    // We do not need to check if `currentAssetProxyId` is 0 since `assetProxy` is also initialized to 0\n                    if sub(currentAssetProxyId, assetProxyId) {\n                        // Update `assetProxyId`\n                        assetProxyId := currentAssetProxyId\n                        // To lookup a value in a mapping, we load from the storage location keccak256(k, p),\n                        // where k is the key left padded to 32 bytes and p is the storage slot\n                        mstore(132, assetProxyId)\n                        mstore(164, assetProxies_slot)\n                        assetProxy := sload(keccak256(132, 64))\n                    }\n\n                    // Revert if AssetProxy with given id does not exist\n                    if iszero(assetProxy) {\n                        // Revert with `Error(\"ASSET_PROXY_DOES_NOT_EXIST\")`\n                        mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n                        mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n                        mstore(64, 0x0000001a41535345545f50524f58595f444f45535f4e4f545f45584953540000)\n                        mstore(96, 0)\n                        revert(0, 100)\n                    }\n\n                    // Copy `nestedAssetData[i]` from calldata to memory\n                    calldatacopy(\n                        132,                                // memory slot after `amounts[i]`\n                        nestedAssetDataElementLenStart,     // location of `nestedAssetData[i]` in calldata\n                        add(nestedAssetDataElementLen, 32)  // `nestedAssetData[i].length` plus 32 byte length\n                    )\n\n                    // call `assetProxy.transferFrom`\n                    let success := call(\n                        gas,                                    // forward all gas\n                        assetProxy,                             // call address of asset proxy\n                        0,                                      // don't send any ETH\n                        0,                                      // pointer to start of input\n                        add(164, nestedAssetDataElementLen),    // length of input\n                        0,                                      // write output over memory that won't be reused\n                        0                                       // don't copy output to memory\n                    )\n\n                    // Revert with reason given by AssetProxy if `transferFrom` call failed\n                    if iszero(success) {\n                        returndatacopy(\n                            0,                // copy to memory at 0\n                            0,                // copy from return data at 0\n                            returndatasize()  // copy all return data\n                        )\n                        revert(0, returndatasize())\n                    }\n                }\n\n                // Return if no `transferFrom` calls reverted\n                return(0, 0)\n            }\n\n            // Revert if undefined function is called\n            revert(0, 0)\n        }\n    }\n\n    /// @dev Gets the proxy id associated with the proxy address.\n    /// @return Proxy id.\n    function getProxyId()\n        external\n        pure\n        returns (bytes4)\n    {\n        return PROXY_ID;\n    }\n}\n"
    },
    "contracts/asset-proxy/contracts/archive/MixinAuthorizable.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"../archive/Ownable.sol\";\nimport \"../src/interfaces/IAuthorizable.sol\";\n\n\ncontract MixinAuthorizable is\n    Ownable,\n    IAuthorizable\n{\n    /// @dev Only authorized addresses can invoke functions with this modifier.\n    modifier onlyAuthorized {\n        require(\n            authorized[msg.sender],\n            \"SENDER_NOT_AUTHORIZED\"\n        );\n        _;\n    }\n\n    mapping (address => bool) public authorized;\n    address[] public authorities;\n\n    /// @dev Authorizes an address.\n    /// @param target Address to authorize.\n    function addAuthorizedAddress(address target)\n        external\n        onlyOwner\n    {\n        require(\n            !authorized[target],\n            \"TARGET_ALREADY_AUTHORIZED\"\n        );\n\n        authorized[target] = true;\n        authorities.push(target);\n        emit AuthorizedAddressAdded(target, msg.sender);\n    }\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    function removeAuthorizedAddress(address target)\n        external\n        onlyOwner\n    {\n        require(\n            authorized[target],\n            \"TARGET_NOT_AUTHORIZED\"\n        );\n\n        delete authorized[target];\n        for (uint256 i = 0; i < authorities.length; i++) {\n            if (authorities[i] == target) {\n                authorities[i] = authorities[authorities.length - 1];\n                authorities.length -= 1;\n                break;\n            }\n        }\n        emit AuthorizedAddressRemoved(target, msg.sender);\n    }\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    /// @param index Index of target in authorities array.\n    function removeAuthorizedAddressAtIndex(\n        address target,\n        uint256 index\n    )\n        external\n        onlyOwner\n    {\n        require(\n            authorized[target],\n            \"TARGET_NOT_AUTHORIZED\"\n        );\n        require(\n            index < authorities.length,\n            \"INDEX_OUT_OF_BOUNDS\"\n        );\n        require(\n            authorities[index] == target,\n            \"AUTHORIZED_ADDRESS_MISMATCH\"\n        );\n\n        delete authorized[target];\n        authorities[index] = authorities[authorities.length - 1];\n        authorities.length -= 1;\n        emit AuthorizedAddressRemoved(target, msg.sender);\n    }\n\n    /// @dev Gets all authorized addresses.\n    /// @return Array of authorized addresses.\n    function getAuthorizedAddresses()\n        external\n        view\n        returns (address[] memory)\n    {\n        return authorities;\n    }\n}\n"
    },
    "contracts/asset-proxy/contracts/src/interfaces/IAuthorizable.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-utils/contracts/src/interfaces/IOwnable.sol\";\n\n\ncontract IAuthorizable is\n    IOwnable\n{\n    // Event logged when a new address is authorized.\n    event AuthorizedAddressAdded(\n        address indexed target,\n        address indexed caller\n    );\n\n    // Event logged when a currently authorized address is unauthorized.\n    event AuthorizedAddressRemoved(\n        address indexed target,\n        address indexed caller\n    );\n\n    /// @dev Authorizes an address.\n    /// @param target Address to authorize.\n    function addAuthorizedAddress(address target)\n        external;\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    function removeAuthorizedAddress(address target)\n        external;\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    /// @param index Index of target in authorities array.\n    function removeAuthorizedAddressAtIndex(\n        address target,\n        uint256 index\n    )\n        external;\n\n    /// @dev Gets all authorized addresses.\n    /// @return Array of authorized addresses.\n    function getAuthorizedAddresses()\n        external\n        view\n        returns (address[] memory);\n}\n"
    },
    "contracts/asset-proxy/contracts/src/ERC721Proxy.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"../archive/MixinAuthorizable.sol\";\n\n\ncontract ERC721Proxy is\n    MixinAuthorizable\n{\n    // Id of this proxy.\n    bytes4 constant internal PROXY_ID = bytes4(keccak256(\"ERC721Token(address,uint256)\"));\n\n    // solhint-disable-next-line payable-fallback\n    function ()\n        external\n    {\n        assembly {\n            // The first 4 bytes of calldata holds the function selector\n            let selector := and(calldataload(0), 0xffffffff00000000000000000000000000000000000000000000000000000000)\n\n            // `transferFrom` will be called with the following parameters:\n            // assetData Encoded byte array.\n            // from Address to transfer asset from.\n            // to Address to transfer asset to.\n            // amount Amount of asset to transfer.\n            // bytes4(keccak256(\"transferFrom(bytes,address,address,uint256)\")) = 0xa85e59e4\n            if eq(selector, 0xa85e59e400000000000000000000000000000000000000000000000000000000) {\n\n                // To lookup a value in a mapping, we load from the storage location keccak256(k, p),\n                // where k is the key left padded to 32 bytes and p is the storage slot\n                let start := mload(64)\n                mstore(start, and(caller, 0xffffffffffffffffffffffffffffffffffffffff))\n                mstore(add(start, 32), authorized_slot)\n\n                // Revert if authorized[msg.sender] == false\n                if iszero(sload(keccak256(start, 64))) {\n                    // Revert with `Error(\"SENDER_NOT_AUTHORIZED\")`\n                    mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n                    mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n                    mstore(64, 0x0000001553454e4445525f4e4f545f415554484f52495a454400000000000000)\n                    mstore(96, 0)\n                    revert(0, 100)\n                }\n\n                // `transferFrom`.\n                // The function is marked `external`, so no abi decodeding is done for\n                // us. Instead, we expect the `calldata` memory to contain the\n                // following:\n                //\n                // | Area     | Offset | Length  | Contents                            |\n                // |----------|--------|---------|-------------------------------------|\n                // | Header   | 0      | 4       | function selector                   |\n                // | Params   |        | 4 * 32  | function parameters:                |\n                // |          | 4      |         |   1. offset to assetData (*)        |\n                // |          | 36     |         |   2. from                           |\n                // |          | 68     |         |   3. to                             |\n                // |          | 100    |         |   4. amount                         |\n                // | Data     |        |         | assetData:                          |\n                // |          | 132    | 32      | assetData Length                    |\n                // |          | 164    | **      | assetData Contents                  |\n                //\n                // (*): offset is computed from start of function parameters, so offset\n                //      by an additional 4 bytes in the calldata.\n                //\n                // (**): see table below to compute length of assetData Contents\n                //\n                // WARNING: The ABIv2 specification allows additional padding between\n                //          the Params and Data section. This will result in a larger\n                //          offset to assetData.\n\n                // Asset data itself is encoded as follows:\n                //\n                // | Area     | Offset | Length  | Contents                            |\n                // |----------|--------|---------|-------------------------------------|\n                // | Header   | 0      | 4       | function selector                   |\n                // | Params   |        | 2 * 32  | function parameters:                |\n                // |          | 4      | 12 + 20 |   1. token address                  |\n                // |          | 36     |         |   2. tokenId                        |\n\n                // We construct calldata for the `token.transferFrom` ABI.\n                // The layout of this calldata is in the table below.\n                //\n                // | Area     | Offset | Length  | Contents                            |\n                // |----------|--------|---------|-------------------------------------|\n                // | Header   | 0      | 4       | function selector                   |\n                // | Params   |        | 3 * 32  | function parameters:                |\n                // |          | 4      |         |   1. from                           |\n                // |          | 36     |         |   2. to                             |\n                // |          | 68     |         |   3. tokenId                        |\n\n                // There exists only 1 of each token.\n                // require(amount == 1, \"INVALID_AMOUNT\")\n                if sub(calldataload(100), 1) {\n                    // Revert with `Error(\"INVALID_AMOUNT\")`\n                    mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n                    mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n                    mstore(64, 0x0000000e494e56414c49445f414d4f554e540000000000000000000000000000)\n                    mstore(96, 0)\n                    revert(0, 100)\n                }\n\n                /////// Setup Header Area ///////\n                // This area holds the 4-byte `transferFrom` selector.\n                // Any trailing data in transferFromSelector will be\n                // overwritten in the next `mstore` call.\n                mstore(0, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\n\n                /////// Setup Params Area ///////\n                // We copy the fields `from` and `to` in bulk\n                // from our own calldata to the new calldata.\n                calldatacopy(4, 36, 64)\n\n                // Copy `tokenId` field from our own calldata to the new calldata.\n                let assetDataOffset := calldataload(4)\n                calldatacopy(68, add(assetDataOffset, 72), 32)\n\n                /////// Call `token.transferFrom` using the calldata ///////\n                let token := calldataload(add(assetDataOffset, 40))\n                let success := call(\n                    gas,            // forward all gas\n                    token,          // call address of token contract\n                    0,              // don't send any ETH\n                    0,              // pointer to start of input\n                    100,            // length of input\n                    0,              // write output to null\n                    0               // output size is 0 bytes\n                )\n                if success {\n                    return(0, 0)\n                }\n\n                // Revert with `Error(\"TRANSFER_FAILED\")`\n                mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n                mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n                mstore(64, 0x0000000f5452414e534645525f4641494c454400000000000000000000000000)\n                mstore(96, 0)\n                revert(0, 100)\n            }\n\n            // Revert if undefined function is called\n            revert(0, 0)\n        }\n    }\n\n    /// @dev Gets the proxy id associated with the proxy address.\n    /// @return Proxy id.\n    function getProxyId()\n        external\n        pure\n        returns (bytes4)\n    {\n        return PROXY_ID;\n    }\n}\n"
    },
    "contracts/asset-proxy/contracts/src/ERC20Proxy.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"../archive/MixinAuthorizable.sol\";\n\n\ncontract ERC20Proxy is\n    MixinAuthorizable\n{\n    // Id of this proxy.\n    bytes4 constant internal PROXY_ID = bytes4(keccak256(\"ERC20Token(address)\"));\n\n    // solhint-disable-next-line payable-fallback\n    function ()\n        external\n    {\n        assembly {\n            // The first 4 bytes of calldata holds the function selector\n            let selector := and(calldataload(0), 0xffffffff00000000000000000000000000000000000000000000000000000000)\n\n            // `transferFrom` will be called with the following parameters:\n            // assetData Encoded byte array.\n            // from Address to transfer asset from.\n            // to Address to transfer asset to.\n            // amount Amount of asset to transfer.\n            // bytes4(keccak256(\"transferFrom(bytes,address,address,uint256)\")) = 0xa85e59e4\n            if eq(selector, 0xa85e59e400000000000000000000000000000000000000000000000000000000) {\n\n                // To lookup a value in a mapping, we load from the storage location keccak256(k, p),\n                // where k is the key left padded to 32 bytes and p is the storage slot\n                let start := mload(64)\n                mstore(start, and(caller, 0xffffffffffffffffffffffffffffffffffffffff))\n                mstore(add(start, 32), authorized_slot)\n\n                // Revert if authorized[msg.sender] == false\n                if iszero(sload(keccak256(start, 64))) {\n                    // Revert with `Error(\"SENDER_NOT_AUTHORIZED\")`\n                    mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n                    mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n                    mstore(64, 0x0000001553454e4445525f4e4f545f415554484f52495a454400000000000000)\n                    mstore(96, 0)\n                    revert(0, 100)\n                }\n\n                // `transferFrom`.\n                // The function is marked `external`, so no abi decodeding is done for\n                // us. Instead, we expect the `calldata` memory to contain the\n                // following:\n                //\n                // | Area     | Offset | Length  | Contents                            |\n                // |----------|--------|---------|-------------------------------------|\n                // | Header   | 0      | 4       | function selector                   |\n                // | Params   |        | 4 * 32  | function parameters:                |\n                // |          | 4      |         |   1. offset to assetData (*)        |\n                // |          | 36     |         |   2. from                           |\n                // |          | 68     |         |   3. to                             |\n                // |          | 100    |         |   4. amount                         |\n                // | Data     |        |         | assetData:                          |\n                // |          | 132    | 32      | assetData Length                    |\n                // |          | 164    | **      | assetData Contents                  |\n                //\n                // (*): offset is computed from start of function parameters, so offset\n                //      by an additional 4 bytes in the calldata.\n                //\n                // (**): see table below to compute length of assetData Contents\n                //\n                // WARNING: The ABIv2 specification allows additional padding between\n                //          the Params and Data section. This will result in a larger\n                //          offset to assetData.\n\n                // Asset data itself is encoded as follows:\n                //\n                // | Area     | Offset | Length  | Contents                            |\n                // |----------|--------|---------|-------------------------------------|\n                // | Header   | 0      | 4       | function selector                   |\n                // | Params   |        | 1 * 32  | function parameters:                |\n                // |          | 4      | 12 + 20 |   1. token address                  |\n\n                // We construct calldata for the `token.transferFrom` ABI.\n                // The layout of this calldata is in the table below.\n                //\n                // | Area     | Offset | Length  | Contents                            |\n                // |----------|--------|---------|-------------------------------------|\n                // | Header   | 0      | 4       | function selector                   |\n                // | Params   |        | 3 * 32  | function parameters:                |\n                // |          | 4      |         |   1. from                           |\n                // |          | 36     |         |   2. to                             |\n                // |          | 68     |         |   3. amount                         |\n\n                /////// Read token address from calldata ///////\n                // * The token address is stored in `assetData`.\n                //\n                // * The \"offset to assetData\" is stored at offset 4 in the calldata (table 1).\n                //   [assetDataOffsetFromParams = calldataload(4)]\n                //\n                // * Notes that the \"offset to assetData\" is relative to the \"Params\" area of calldata;\n                //   add 4 bytes to account for the length of the \"Header\" area (table 1).\n                //   [assetDataOffsetFromHeader = assetDataOffsetFromParams + 4]\n                //\n                // * The \"token address\" is offset 32+4=36 bytes into \"assetData\" (tables 1 & 2).\n                //   [tokenOffset = assetDataOffsetFromHeader + 36 = calldataload(4) + 4 + 36]\n                let token := calldataload(add(calldataload(4), 40))\n\n                /////// Setup Header Area ///////\n                // This area holds the 4-byte `transferFrom` selector.\n                // Any trailing data in transferFromSelector will be\n                // overwritten in the next `mstore` call.\n                mstore(0, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\n\n                /////// Setup Params Area ///////\n                // We copy the fields `from`, `to` and `amount` in bulk\n                // from our own calldata to the new calldata.\n                calldatacopy(4, 36, 96)\n\n                /////// Call `token.transferFrom` using the calldata ///////\n                let success := call(\n                    gas,            // forward all gas\n                    token,          // call address of token contract\n                    0,              // don't send any ETH\n                    0,              // pointer to start of input\n                    100,            // length of input\n                    0,              // write output over input\n                    32              // output size should be 32 bytes\n                )\n\n                /////// Check return data. ///////\n                // If there is no return data, we assume the token incorrectly\n                // does not return a bool. In this case we expect it to revert\n                // on failure, which was handled above.\n                // If the token does return data, we require that it is a single\n                // nonzero 32 bytes value.\n                // So the transfer succeeded if the call succeeded and either\n                // returned nothing, or returned a non-zero 32 byte value.\n                success := and(success, or(\n                    iszero(returndatasize),\n                    and(\n                        eq(returndatasize, 32),\n                        gt(mload(0), 0)\n                    )\n                ))\n                if success {\n                    return(0, 0)\n                }\n\n                // Revert with `Error(\"TRANSFER_FAILED\")`\n                mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n                mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n                mstore(64, 0x0000000f5452414e534645525f4641494c454400000000000000000000000000)\n                mstore(96, 0)\n                revert(0, 100)\n            }\n\n            // Revert if undefined function is called\n            revert(0, 0)\n        }\n    }\n\n    /// @dev Gets the proxy id associated with the proxy address.\n    /// @return Proxy id.\n    function getProxyId()\n        external\n        pure\n        returns (bytes4)\n    {\n        return PROXY_ID;\n    }\n}\n"
    },
    "contracts/asset-proxy/contracts/src/ERC1155Proxy.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibSafeMath.sol\";\nimport \"@0x/contracts-erc1155/contracts/src/interfaces/IERC1155.sol\";\nimport \"../archive/MixinAuthorizable.sol\";\nimport \"./interfaces/IAssetProxy.sol\";\n\n\ncontract ERC1155Proxy is\n    MixinAuthorizable,\n    IAssetProxy\n{\n    using LibBytes for bytes;\n    using LibSafeMath for uint256;\n\n    // Id of this proxy.\n    bytes4 constant internal PROXY_ID = bytes4(keccak256(\"ERC1155Assets(address,uint256[],uint256[],bytes)\"));\n\n    /// @dev Transfers batch of ERC1155 assets. Either succeeds or throws.\n    /// @param assetData Byte array encoded with ERC1155 token address, array of ids, array of values, and callback data.\n    /// @param from Address to transfer assets from.\n    /// @param to Address to transfer assets to.\n    /// @param amount Amount that will be multiplied with each element of `assetData.values` to scale the\n    ///        values that will be transferred.\n    function transferFrom(\n        bytes calldata assetData,\n        address from,\n        address to,\n        uint256 amount\n    )\n        external\n        onlyAuthorized\n    {\n        // Decode params from `assetData`\n        // solhint-disable indent\n        (\n            address erc1155TokenAddress,\n            uint256[] memory ids,\n            uint256[] memory values,\n            bytes memory data\n        ) = abi.decode(\n            assetData.sliceDestructive(4, assetData.length),\n            (address, uint256[], uint256[], bytes)\n        );\n        // solhint-enable indent\n\n        // Scale values up by `amount`\n        uint256 length = values.length;\n        uint256[] memory scaledValues = new uint256[](length);\n        for (uint256 i = 0; i != length; i++) {\n            // We write the scaled values to an unused location in memory in order\n            // to avoid copying over `ids` or `data`. This is possible if they are\n            // identical to `values` and the offsets for each are pointing to the\n            // same location in the ABI encoded calldata.\n            scaledValues[i] = values[i].safeMul(amount);\n        }\n\n        // Execute `safeBatchTransferFrom` call\n        // Either succeeds or throws\n        IERC1155(erc1155TokenAddress).safeBatchTransferFrom(\n            from,\n            to,\n            ids,\n            scaledValues,\n            data\n        );\n    }\n\n    /// @dev Gets the proxy id associated with the proxy address.\n    /// @return Proxy id.\n    function getProxyId()\n        external\n        pure\n        returns (bytes4)\n    {\n        return PROXY_ID;\n    }\n}\n"
    },
    "@0x/contracts-utils/contracts/src/LibBytes.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"./LibBytesRichErrors.sol\";\nimport \"./LibRichErrors.sol\";\n\n\nlibrary LibBytes {\n\n    using LibBytes for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    /// @dev When `from == 0`, the original array will match the slice. In other cases its state will be corrupted.\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n"
    },
    "@0x/contracts-utils/contracts/src/LibSafeMath.sol": {
      "content": "pragma solidity ^0.5.9;\n\nimport \"./LibRichErrors.sol\";\nimport \"./LibSafeMathRichErrors.sol\";\n\n\nlibrary LibSafeMath {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n}\n"
    },
    "@0x/contracts-erc1155/contracts/src/interfaces/IERC1155.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\n\n/// @title ERC-1155 Multi Token Standard\n/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1155.md\n/// Note: The ERC-165 identifier for this interface is 0xd9b67a26.\ninterface IERC1155 {\n\n    /// @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred,\n    ///      including zero value transfers as well as minting or burning.\n    /// Operator will always be msg.sender.\n    /// Either event from address `0x0` signifies a minting operation.\n    /// An event to address `0x0` signifies a burning or melting operation.\n    /// The total value transferred from address 0x0 minus the total value transferred to 0x0 may\n    /// be used by clients and exchanges to be added to the \"circulating supply\" for a given token ID.\n    /// To define a token ID with no initial balance, the contract SHOULD emit the TransferSingle event\n    /// from `0x0` to `0x0`, with the token creator as `_operator`.\n    event TransferSingle(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256 id,\n        uint256 value\n    );\n\n    /// @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred,\n    ///      including zero value transfers as well as minting or burning.\n    ///Operator will always be msg.sender.\n    /// Either event from address `0x0` signifies a minting operation.\n    /// An event to address `0x0` signifies a burning or melting operation.\n    /// The total value transferred from address 0x0 minus the total value transferred to 0x0 may\n    /// be used by clients and exchanges to be added to the \"circulating supply\" for a given token ID.\n    /// To define multiple token IDs with no initial balance, this SHOULD emit the TransferBatch event\n    /// from `0x0` to `0x0`, with the token creator as `_operator`.\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /// @dev MUST emit when an approval is updated.\n    event ApprovalForAll(\n        address indexed owner,\n        address indexed operator,\n        bool approved\n    );\n\n    /// @dev MUST emit when the URI is updated for a token ID.\n    /// URIs are defined in RFC 3986.\n    /// The URI MUST point a JSON file that conforms to the \"ERC-1155 Metadata JSON Schema\".\n    event URI(\n        string value,\n        uint256 indexed id\n    );\n\n    /// @notice Transfers value amount of an _id from the _from address to the _to address specified.\n    /// @dev MUST emit TransferSingle event on success.\n    /// Caller must be approved to manage the _from account's tokens (see isApprovedForAll).\n    /// MUST throw if `_to` is the zero address.\n    /// MUST throw if balance of sender for token `_id` is lower than the `_value` sent.\n    /// MUST throw on any other error.\n    /// When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0).\n    /// If so, it MUST call `onERC1155Received` on `_to` and revert if the return value\n    /// is not `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`.\n    /// @param from    Source address\n    /// @param to      Target address\n    /// @param id      ID of the token type\n    /// @param value   Transfer amount\n    /// @param data    Additional data with no specified format, sent in call to `_to`\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    )\n        external;\n\n    /// @notice Send multiple types of Tokens from a 3rd party in one transfer (with safety call).\n    /// @dev MUST emit TransferBatch event on success.\n    /// Caller must be approved to manage the _from account's tokens (see isApprovedForAll).\n    /// MUST throw if `_to` is the zero address.\n    /// MUST throw if length of `_ids` is not the same as length of `_values`.\n    ///  MUST throw if any of the balance of sender for token `_ids` is lower than the respective `_values` sent.\n    /// MUST throw on any other error.\n    /// When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0).\n    /// If so, it MUST call `onERC1155BatchReceived` on `_to` and revert if the return value\n    /// is not `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`.\n    /// @param from    Source addresses\n    /// @param to      Target addresses\n    /// @param ids     IDs of each token type\n    /// @param values  Transfer amounts per token type\n    /// @param data    Additional data with no specified format, sent in call to `_to`\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    )\n        external;\n\n    /// @notice Enable or disable approval for a third party (\"operator\") to manage all of the caller's tokens.\n    /// @dev MUST emit the ApprovalForAll event on success.\n    /// @param operator  Address to add to the set of authorized operators\n    /// @param approved  True if the operator is approved, false to revoke approval\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /// @notice Queries the approval status of an operator for a given owner.\n    /// @param owner     The owner of the Tokens\n    /// @param operator  Address of authorized operator\n    /// @return           True if the operator is approved, false if not\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /// @notice Get the balance of an account's Tokens.\n    /// @param owner  The address of the token holder\n    /// @param id     ID of the Token\n    /// @return        The _owner's balance of the Token type requested\n    function balanceOf(address owner, uint256 id) external view returns (uint256);\n\n    /// @notice Get the balance of multiple account/token pairs\n    /// @param owners The addresses of the token holders\n    /// @param ids    ID of the Tokens\n    /// @return        The _owner's balance of the Token types requested\n    function balanceOfBatch(\n        address[] calldata owners,\n        uint256[] calldata ids\n    )\n        external\n        view\n        returns (uint256[] memory balances_);\n}\n"
    },
    "@0x/contracts-utils/contracts/src/LibBytesRichErrors.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\nlibrary LibBytesRichErrors {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n"
    },
    "@0x/contracts-utils/contracts/src/LibRichErrors.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\nlibrary LibRichErrors {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR =\n        0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(\n        string memory message\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n"
    },
    "@0x/contracts-utils/contracts/src/LibSafeMathRichErrors.sol": {
      "content": "pragma solidity ^0.5.9;\n\n\nlibrary LibSafeMathRichErrors {\n\n    // bytes4(keccak256(\"Uint256BinOpError(uint8,uint256,uint256)\"))\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =\n        0xe946c1bb;\n\n    // bytes4(keccak256(\"Uint256DowncastError(uint8,uint256)\"))\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =\n        0xc996af7b;\n\n    enum BinOpErrorCodes {\n        ADDITION_OVERFLOW,\n        MULTIPLICATION_OVERFLOW,\n        SUBTRACTION_UNDERFLOW,\n        DIVISION_BY_ZERO\n    }\n\n    enum DowncastErrorCodes {\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96\n    }\n\n    // solhint-disable func-name-mixedcase\n    function Uint256BinOpError(\n        BinOpErrorCodes errorCode,\n        uint256 a,\n        uint256 b\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_BINOP_ERROR_SELECTOR,\n            errorCode,\n            a,\n            b\n        );\n    }\n\n    function Uint256DowncastError(\n        DowncastErrorCodes errorCode,\n        uint256 a\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_DOWNCAST_ERROR_SELECTOR,\n            errorCode,\n            a\n        );\n    }\n}\n"
    },
    "contracts/asset-proxy/contracts/src/ERC20BridgeProxy.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibSafeMath.sol\";\nimport \"@0x/contracts-utils/contracts/src/Authorizable.sol\";\nimport \"@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol\";\nimport \"./interfaces/IAssetProxy.sol\";\nimport \"./interfaces/IERC20Bridge.sol\";\n\n\ncontract ERC20BridgeProxy is\n    IAssetProxy,\n    Authorizable\n{\n    using LibBytes for bytes;\n    using LibSafeMath for uint256;\n\n    // @dev Id of this proxy. Also the result of a successful bridge call.\n    //      bytes4(keccak256(\"ERC20Bridge(address,address,bytes)\"))\n    bytes4 constant private PROXY_ID = 0xdc1600f3;\n\n    /// @dev Calls a bridge contract to transfer `amount` of ERC20 from `from`\n    ///      to `to`. Asserts that the balance of `to` has increased by `amount`.\n    /// @param assetData Abi-encoded data for this asset proxy encoded as:\n    ///          abi.encodeWithSelector(\n    ///             bytes4 PROXY_ID,\n    ///             address tokenAddress,\n    ///             address bridgeAddress,\n    ///             bytes bridgeData\n    ///          )\n    /// @param from Address to transfer asset from.\n    /// @param to Address to transfer asset to.\n    /// @param amount Amount of asset to transfer.\n    function transferFrom(\n        bytes calldata assetData,\n        address from,\n        address to,\n        uint256 amount\n    )\n        external\n        onlyAuthorized\n    {\n        // Extract asset data fields.\n        (\n            address tokenAddress,\n            address bridgeAddress,\n            bytes memory bridgeData\n        ) = abi.decode(\n            assetData.sliceDestructive(4, assetData.length),\n            (address, address, bytes)\n        );\n\n        // Remember the balance of `to` before calling the bridge.\n        uint256 balanceBefore = balanceOf(tokenAddress, to);\n        // Call the bridge, who should transfer `amount` of `tokenAddress` to\n        // `to`.\n        bytes4 success = IERC20Bridge(bridgeAddress).bridgeTransferFrom(\n            tokenAddress,\n            from,\n            to,\n            amount,\n            bridgeData\n        );\n        // Bridge must return the proxy ID to indicate success.\n        require(success == PROXY_ID, \"BRIDGE_FAILED\");\n        // Ensure that the balance of `to` has increased by at least `amount`.\n        require(\n            balanceBefore.safeAdd(amount) <= balanceOf(tokenAddress, to),\n            \"BRIDGE_UNDERPAY\"\n        );\n    }\n\n    /// @dev Gets the proxy id associated with this asset proxy.\n    /// @return proxyId The proxy id.\n    function getProxyId()\n        external\n        pure\n        returns (bytes4 proxyId)\n    {\n        return PROXY_ID;\n    }\n\n    /// @dev Retrieves the balance of `owner` for this asset.\n    /// @return balance The balance of the ERC20 token being transferred by this\n    ///         asset proxy.\n    function balanceOf(bytes calldata assetData, address owner)\n        external\n        view\n        returns (uint256 balance)\n    {\n        (address tokenAddress) = abi.decode(\n            assetData.sliceDestructive(4, assetData.length),\n            (address)\n        );\n        return balanceOf(tokenAddress, owner);\n    }\n\n    /// @dev Retrieves the balance of `owner` given an ERC20 address.\n    /// @return balance The balance of the ERC20 token for `owner`.\n    function balanceOf(address tokenAddress, address owner)\n        private\n        view\n        returns (uint256 balance)\n    {\n        return IERC20Token(tokenAddress).balanceOf(owner);\n    }\n}\n"
    },
    "@0x/contracts-utils/contracts/src/Authorizable.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"./interfaces/IAuthorizable.sol\";\nimport \"./LibAuthorizableRichErrors.sol\";\nimport \"./LibRichErrors.sol\";\nimport \"./Ownable.sol\";\n\n\n// solhint-disable no-empty-blocks\ncontract Authorizable is\n    Ownable,\n    IAuthorizable\n{\n    /// @dev Only authorized addresses can invoke functions with this modifier.\n    modifier onlyAuthorized {\n        _assertSenderIsAuthorized();\n        _;\n    }\n\n    /// @dev Whether an adderss is authorized to call privileged functions.\n    /// @param 0 Address to query.\n    /// @return 0 Whether the address is authorized.\n    mapping (address => bool) public authorized;\n    /// @dev Whether an adderss is authorized to call privileged functions.\n    /// @param 0 Index of authorized address.\n    /// @return 0 Authorized address.\n    address[] public authorities;\n\n    /// @dev Initializes the `owner` address.\n    constructor()\n        public\n        Ownable()\n    {}\n\n    /// @dev Authorizes an address.\n    /// @param target Address to authorize.\n    function addAuthorizedAddress(address target)\n        external\n        onlyOwner\n    {\n        _addAuthorizedAddress(target);\n    }\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    function removeAuthorizedAddress(address target)\n        external\n        onlyOwner\n    {\n        if (!authorized[target]) {\n            LibRichErrors.rrevert(LibAuthorizableRichErrors.TargetNotAuthorizedError(target));\n        }\n        for (uint256 i = 0; i < authorities.length; i++) {\n            if (authorities[i] == target) {\n                _removeAuthorizedAddressAtIndex(target, i);\n                break;\n            }\n        }\n    }\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    /// @param index Index of target in authorities array.\n    function removeAuthorizedAddressAtIndex(\n        address target,\n        uint256 index\n    )\n        external\n        onlyOwner\n    {\n        _removeAuthorizedAddressAtIndex(target, index);\n    }\n\n    /// @dev Gets all authorized addresses.\n    /// @return Array of authorized addresses.\n    function getAuthorizedAddresses()\n        external\n        view\n        returns (address[] memory)\n    {\n        return authorities;\n    }\n\n    /// @dev Reverts if msg.sender is not authorized.\n    function _assertSenderIsAuthorized()\n        internal\n        view\n    {\n        if (!authorized[msg.sender]) {\n            LibRichErrors.rrevert(LibAuthorizableRichErrors.SenderNotAuthorizedError(msg.sender));\n        }\n    }\n\n    /// @dev Authorizes an address.\n    /// @param target Address to authorize.\n    function _addAuthorizedAddress(address target)\n        internal\n    {\n        // Ensure that the target is not the zero address.\n        if (target == address(0)) {\n            LibRichErrors.rrevert(LibAuthorizableRichErrors.ZeroCantBeAuthorizedError());\n        }\n\n        // Ensure that the target is not already authorized.\n        if (authorized[target]) {\n            LibRichErrors.rrevert(LibAuthorizableRichErrors.TargetAlreadyAuthorizedError(target));\n        }\n\n        authorized[target] = true;\n        authorities.push(target);\n        emit AuthorizedAddressAdded(target, msg.sender);\n    }\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    /// @param index Index of target in authorities array.\n    function _removeAuthorizedAddressAtIndex(\n        address target,\n        uint256 index\n    )\n        internal\n    {\n        if (!authorized[target]) {\n            LibRichErrors.rrevert(LibAuthorizableRichErrors.TargetNotAuthorizedError(target));\n        }\n        if (index >= authorities.length) {\n            LibRichErrors.rrevert(LibAuthorizableRichErrors.IndexOutOfBoundsError(\n                index,\n                authorities.length\n            ));\n        }\n        if (authorities[index] != target) {\n            LibRichErrors.rrevert(LibAuthorizableRichErrors.AuthorizedAddressMismatchError(\n                authorities[index],\n                target\n            ));\n        }\n\n        delete authorized[target];\n        authorities[index] = authorities[authorities.length - 1];\n        authorities.length -= 1;\n        emit AuthorizedAddressRemoved(target, msg.sender);\n    }\n}\n"
    },
    "@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ncontract IERC20Token {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed _from,\n        address indexed _to,\n        uint256 _value\n    );\n\n    event Approval(\n        address indexed _owner,\n        address indexed _spender,\n        uint256 _value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address _to, uint256 _value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `_spender` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address _spender, uint256 _value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address _owner)\n        external\n        view\n        returns (uint256);\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender)\n        external\n        view\n        returns (uint256);\n}\n"
    },
    "contracts/asset-proxy/contracts/src/interfaces/IERC20Bridge.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ncontract IERC20Bridge {\n\n    /// @dev Result of a successful bridge call.\n    bytes4 constant internal BRIDGE_SUCCESS = 0xdc1600f3;\n\n    /// @dev Emitted when a trade occurs.\n    /// @param inputToken The token the bridge is converting from.\n    /// @param outputToken The token the bridge is converting to.\n    /// @param inputTokenAmount Amount of input token.\n    /// @param outputTokenAmount Amount of output token.\n    /// @param from The `from` address in `bridgeTransferFrom()`\n    /// @param to The `to` address in `bridgeTransferFrom()`\n    event ERC20BridgeTransfer(\n        address inputToken,\n        address outputToken,\n        uint256 inputTokenAmount,\n        uint256 outputTokenAmount,\n        address from,\n        address to\n    );\n\n    /// @dev Transfers `amount` of the ERC20 `tokenAddress` from `from` to `to`.\n    /// @param tokenAddress The address of the ERC20 token to transfer.\n    /// @param from Address to transfer asset from.\n    /// @param to Address to transfer asset to.\n    /// @param amount Amount of asset to transfer.\n    /// @param bridgeData Arbitrary asset data needed by the bridge contract.\n    /// @return success The magic bytes `0xdc1600f3` if successful.\n    function bridgeTransferFrom(\n        address tokenAddress,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata bridgeData\n    )\n        external\n        returns (bytes4 success);\n}\n"
    },
    "@0x/contracts-utils/contracts/src/interfaces/IAuthorizable.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"./IOwnable.sol\";\n\n\ncontract IAuthorizable is\n    IOwnable\n{\n    // Event logged when a new address is authorized.\n    event AuthorizedAddressAdded(\n        address indexed target,\n        address indexed caller\n    );\n\n    // Event logged when a currently authorized address is unauthorized.\n    event AuthorizedAddressRemoved(\n        address indexed target,\n        address indexed caller\n    );\n\n    /// @dev Authorizes an address.\n    /// @param target Address to authorize.\n    function addAuthorizedAddress(address target)\n        external;\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    function removeAuthorizedAddress(address target)\n        external;\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    /// @param index Index of target in authorities array.\n    function removeAuthorizedAddressAtIndex(\n        address target,\n        uint256 index\n    )\n        external;\n\n    /// @dev Gets all authorized addresses.\n    /// @return Array of authorized addresses.\n    function getAuthorizedAddresses()\n        external\n        view\n        returns (address[] memory);\n}\n"
    },
    "@0x/contracts-utils/contracts/src/LibAuthorizableRichErrors.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\nlibrary LibAuthorizableRichErrors {\n\n    // bytes4(keccak256(\"AuthorizedAddressMismatchError(address,address)\"))\n    bytes4 internal constant AUTHORIZED_ADDRESS_MISMATCH_ERROR_SELECTOR =\n        0x140a84db;\n\n    // bytes4(keccak256(\"IndexOutOfBoundsError(uint256,uint256)\"))\n    bytes4 internal constant INDEX_OUT_OF_BOUNDS_ERROR_SELECTOR =\n        0xe9f83771;\n\n    // bytes4(keccak256(\"SenderNotAuthorizedError(address)\"))\n    bytes4 internal constant SENDER_NOT_AUTHORIZED_ERROR_SELECTOR =\n        0xb65a25b9;\n\n    // bytes4(keccak256(\"TargetAlreadyAuthorizedError(address)\"))\n    bytes4 internal constant TARGET_ALREADY_AUTHORIZED_ERROR_SELECTOR =\n        0xde16f1a0;\n\n    // bytes4(keccak256(\"TargetNotAuthorizedError(address)\"))\n    bytes4 internal constant TARGET_NOT_AUTHORIZED_ERROR_SELECTOR =\n        0xeb5108a2;\n\n    // bytes4(keccak256(\"ZeroCantBeAuthorizedError()\"))\n    bytes internal constant ZERO_CANT_BE_AUTHORIZED_ERROR_BYTES =\n        hex\"57654fe4\";\n\n    // solhint-disable func-name-mixedcase\n    function AuthorizedAddressMismatchError(\n        address authorized,\n        address target\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            AUTHORIZED_ADDRESS_MISMATCH_ERROR_SELECTOR,\n            authorized,\n            target\n        );\n    }\n\n    function IndexOutOfBoundsError(\n        uint256 index,\n        uint256 length\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INDEX_OUT_OF_BOUNDS_ERROR_SELECTOR,\n            index,\n            length\n        );\n    }\n\n    function SenderNotAuthorizedError(address sender)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            SENDER_NOT_AUTHORIZED_ERROR_SELECTOR,\n            sender\n        );\n    }\n\n    function TargetAlreadyAuthorizedError(address target)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            TARGET_ALREADY_AUTHORIZED_ERROR_SELECTOR,\n            target\n        );\n    }\n\n    function TargetNotAuthorizedError(address target)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            TARGET_NOT_AUTHORIZED_ERROR_SELECTOR,\n            target\n        );\n    }\n\n    function ZeroCantBeAuthorizedError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return ZERO_CANT_BE_AUTHORIZED_ERROR_BYTES;\n    }\n}\n"
    },
    "@0x/contracts-utils/contracts/src/Ownable.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"./interfaces/IOwnable.sol\";\nimport \"./LibOwnableRichErrors.sol\";\nimport \"./LibRichErrors.sol\";\n\n\ncontract Ownable is\n    IOwnable\n{\n    /// @dev The owner of this contract.\n    /// @return 0 The owner address.\n    address public owner;\n\n    constructor ()\n        public\n    {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        _assertSenderIsOwner();\n        _;\n    }\n\n    /// @dev Change the owner of this contract.\n    /// @param newOwner New owner address.\n    function transferOwnership(address newOwner)\n        public\n        onlyOwner\n    {\n        if (newOwner == address(0)) {\n            LibRichErrors.rrevert(LibOwnableRichErrors.TransferOwnerToZeroError());\n        } else {\n            owner = newOwner;\n            emit OwnershipTransferred(msg.sender, newOwner);\n        }\n    }\n\n    function _assertSenderIsOwner()\n        internal\n        view\n    {\n        if (msg.sender != owner) {\n            LibRichErrors.rrevert(LibOwnableRichErrors.OnlyOwnerError(\n                msg.sender,\n                owner\n            ));\n        }\n    }\n}\n"
    },
    "@0x/contracts-utils/contracts/src/LibOwnableRichErrors.sol": {
      "content": "pragma solidity ^0.5.9;\n\n\nlibrary LibOwnableRichErrors {\n\n    // bytes4(keccak256(\"OnlyOwnerError(address,address)\"))\n    bytes4 internal constant ONLY_OWNER_ERROR_SELECTOR =\n        0x1de45ad1;\n\n    // bytes4(keccak256(\"TransferOwnerToZeroError()\"))\n    bytes internal constant TRANSFER_OWNER_TO_ZERO_ERROR_BYTES =\n        hex\"e69edc3e\";\n\n    // solhint-disable func-name-mixedcase\n    function OnlyOwnerError(\n        address sender,\n        address owner\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ONLY_OWNER_ERROR_SELECTOR,\n            sender,\n            owner\n        );\n    }\n\n    function TransferOwnerToZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return TRANSFER_OWNER_TO_ZERO_ERROR_BYTES;\n    }\n}\n"
    },
    "contracts/asset-proxy/contracts/test/TestERC20Bridge.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"../src/interfaces/IERC20Bridge.sol\";\n\n\n/// @dev Test bridge token\ncontract TestERC20BridgeToken {\n    mapping (address => uint256) private _balances;\n\n    function addBalance(address owner, int256 amount)\n        external\n    {\n        setBalance(owner, uint256(int256(balanceOf(owner)) + amount));\n    }\n\n    function setBalance(address owner, uint256 balance)\n        public\n    {\n        _balances[owner] = balance;\n    }\n\n    function balanceOf(address owner)\n        public\n        view\n        returns (uint256)\n    {\n        return _balances[owner];\n    }\n}\n\n\n/// @dev Test bridge contract.\ncontract TestERC20Bridge is\n    IERC20Bridge\n{\n    TestERC20BridgeToken public testToken;\n\n    event BridgeWithdrawTo(\n        address tokenAddress,\n        address from,\n        address to,\n        uint256 amount,\n        bytes bridgeData\n    );\n\n    constructor() public {\n        testToken = new TestERC20BridgeToken();\n    }\n\n    function setTestTokenBalance(address owner, uint256 balance)\n        external\n    {\n        testToken.setBalance(owner, balance);\n    }\n\n    function bridgeTransferFrom(\n        address tokenAddress,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata bridgeData\n    )\n        external\n        returns (bytes4)\n    {\n        emit BridgeWithdrawTo(\n            tokenAddress,\n            from,\n            to,\n            amount,\n            bridgeData\n        );\n        // Unpack the bridgeData.\n        (\n            int256 transferAmount,\n            bytes memory revertData,\n            bytes memory returnData\n        ) = abi.decode(bridgeData, (int256, bytes, bytes));\n\n        // If `revertData` is set, revert.\n        if (revertData.length != 0) {\n            assembly { revert(add(revertData, 0x20), mload(revertData)) }\n        }\n        // Increase `to`'s balance by `transferAmount`.\n        TestERC20BridgeToken(tokenAddress).addBalance(to, transferAmount);\n        // Return `returnData`.\n        assembly { return(add(returnData, 0x20), mload(returnData)) }\n    }\n}\n"
    },
    "contracts/asset-proxy/contracts/src/bridges/UniswapV2Bridge.sol": {
      "content": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol\";\nimport \"@0x/contracts-erc20/contracts/src/interfaces/IEtherToken.sol\";\nimport \"@0x/contracts-erc20/contracts/src/LibERC20Token.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/IWallet.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibAddressArray.sol\";\nimport \"@0x/contracts-utils/contracts/src/DeploymentConstants.sol\";\nimport \"../interfaces/IUniswapV2Router01.sol\";\nimport \"../interfaces/IERC20Bridge.sol\";\n\n\n// solhint-disable space-after-comma\n// solhint-disable not-rely-on-time\ncontract UniswapV2Bridge is\n    IERC20Bridge,\n    IWallet,\n    DeploymentConstants\n{\n    struct TransferState {\n        address[] path;\n        uint256 fromTokenBalance;\n    }\n\n    /// @dev Callback for `IERC20Bridge`. Tries to buy `amount` of\n    ///      `toTokenAddress` tokens by selling the entirety of the `fromTokenAddress`\n    ///      token encoded in the bridge data.\n    /// @param toTokenAddress The token to buy and transfer to `to`.\n    /// @param from The maker (this contract).\n    /// @param to The recipient of the bought tokens.\n    /// @param amount Minimum amount of `toTokenAddress` tokens to buy.\n    /// @param bridgeData The abi-encoded path of token addresses. Last element must be toTokenAddress\n    /// @return success The magic bytes if successful.\n    function bridgeTransferFrom(\n        address toTokenAddress,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata bridgeData\n    )\n        external\n        returns (bytes4 success)\n    {\n        // hold variables to get around stack depth limitations\n        TransferState memory state;\n\n        // Decode the bridge data to get the `fromTokenAddress`.\n        // solhint-disable indent\n        state.path = abi.decode(bridgeData, (address[]));\n        // solhint-enable indent\n\n        require(state.path.length >= 2, \"UniswapV2Bridge/PATH_LENGTH_MUST_BE_AT_LEAST_TWO\");\n        require(state.path[state.path.length - 1] == toTokenAddress, \"UniswapV2Bridge/LAST_ELEMENT_OF_PATH_MUST_MATCH_OUTPUT_TOKEN\");\n\n        // Just transfer the tokens if they're the same.\n        if (state.path[0] == toTokenAddress) {\n            LibERC20Token.transfer(state.path[0], to, amount);\n            return BRIDGE_SUCCESS;\n        }\n\n        // Get our balance of `fromTokenAddress` token.\n        state.fromTokenBalance = IERC20Token(state.path[0]).balanceOf(address(this));\n\n        // Grant the Uniswap router an allowance.\n        LibERC20Token.approveIfBelow(\n            state.path[0],\n            _getUniswapV2Router01Address(),\n            state.fromTokenBalance\n        );\n\n        // Buy as much `toTokenAddress` token with `fromTokenAddress` token\n        // and transfer it to `to`.\n        IUniswapV2Router01 router = IUniswapV2Router01(_getUniswapV2Router01Address());\n        uint[] memory amounts = router.swapExactTokensForTokens(\n             // Sell all tokens we hold.\n            state.fromTokenBalance,\n             // Minimum buy amount.\n            amount,\n            // Convert `fromTokenAddress` to `toTokenAddress`.\n            state.path,\n            // Recipient is `to`.\n            to,\n            // Expires after this block.\n            block.timestamp\n        );\n\n        emit ERC20BridgeTransfer(\n            // input token\n            state.path[0],\n            // output token\n            toTokenAddress,\n            // input token amount\n            state.fromTokenBalance,\n            // output token amount\n            amounts[amounts.length - 1],\n            from,\n            to\n        );\n\n        return BRIDGE_SUCCESS;\n    }\n\n    /// @dev `SignatureType.Wallet` callback, so that this bridge can be the maker\n    ///      and sign for itself in orders. Always succeeds.\n    /// @return magicValue Success bytes, always.\n    function isValidSignature(\n        bytes32,\n        bytes calldata\n    )\n        external\n        view\n        returns (bytes4 magicValue)\n    {\n        return LEGACY_WALLET_MAGIC_VALUE;\n    }\n}\n"
    },
    "@0x/contracts-erc20/contracts/src/interfaces/IEtherToken.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"./IERC20Token.sol\";\n\n\ncontract IEtherToken is\n    IERC20Token\n{\n    function deposit()\n        public\n        payable;\n    \n    function withdraw(uint256 amount)\n        public;\n}\n"
    },
    "@0x/contracts-erc20/contracts/src/LibERC20Token.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-utils/contracts/src/LibRichErrors.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\nimport \"../src/interfaces/IERC20Token.sol\";\n\n\nlibrary LibERC20Token {\n    bytes constant private DECIMALS_CALL_DATA = hex\"313ce567\";\n\n    /// @dev Calls `IERC20Token(token).approve()`.\n    ///      Reverts if `false` is returned or if the return\n    ///      data length is nonzero and not 32 bytes.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param allowance The allowance to set.\n    function approve(\n        address token,\n        address spender,\n        uint256 allowance\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            IERC20Token(0).approve.selector,\n            spender,\n            allowance\n        );\n        _callWithOptionalBooleanResult(token, callData);\n    }\n\n    /// @dev Calls `IERC20Token(token).approve()` and sets the allowance to the\n    ///      maximum if the current approval is not already >= an amount.\n    ///      Reverts if `false` is returned or if the return\n    ///      data length is nonzero and not 32 bytes.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param amount The minimum allowance needed.\n    function approveIfBelow(\n        address token,\n        address spender,\n        uint256 amount\n    )\n        internal\n    {\n        if (IERC20Token(token).allowance(address(this), spender) < amount) {\n            approve(token, spender, uint256(-1));\n        }\n    }\n\n    /// @dev Calls `IERC20Token(token).transfer()`.\n    ///      Reverts if `false` is returned or if the return\n    ///      data length is nonzero and not 32 bytes.\n    /// @param token The address of the token contract.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function transfer(\n        address token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            IERC20Token(0).transfer.selector,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(token, callData);\n    }\n\n    /// @dev Calls `IERC20Token(token).transferFrom()`.\n    ///      Reverts if `false` is returned or if the return\n    ///      data length is nonzero and not 32 bytes.\n    /// @param token The address of the token contract.\n    /// @param from The owner of the tokens.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function transferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            IERC20Token(0).transferFrom.selector,\n            from,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(token, callData);\n    }\n\n    /// @dev Retrieves the number of decimals for a token.\n    ///      Returns `18` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @return tokenDecimals The number of decimals places for the token.\n    function decimals(address token)\n        internal\n        view\n        returns (uint8 tokenDecimals)\n    {\n        tokenDecimals = 18;\n        (bool didSucceed, bytes memory resultData) = token.staticcall(DECIMALS_CALL_DATA);\n        if (didSucceed && resultData.length == 32) {\n            tokenDecimals = uint8(LibBytes.readUint256(resultData, 0));\n        }\n    }\n\n    /// @dev Retrieves the allowance for a token, owner, and spender.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @param spender The address the spender.\n    /// @return allowance The allowance for a token, owner, and spender.\n    function allowance(address token, address owner, address spender)\n        internal\n        view\n        returns (uint256 allowance_)\n    {\n        (bool didSucceed, bytes memory resultData) = token.staticcall(\n            abi.encodeWithSelector(\n                IERC20Token(0).allowance.selector,\n                owner,\n                spender\n            )\n        );\n        if (didSucceed && resultData.length == 32) {\n            allowance_ = LibBytes.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Retrieves the balance for a token owner.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @return balance The token balance of an owner.\n    function balanceOf(address token, address owner)\n        internal\n        view\n        returns (uint256 balance)\n    {\n        (bool didSucceed, bytes memory resultData) = token.staticcall(\n            abi.encodeWithSelector(\n                IERC20Token(0).balanceOf.selector,\n                owner\n            )\n        );\n        if (didSucceed && resultData.length == 32) {\n            balance = LibBytes.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Executes a call on address `target` with calldata `callData`\n    ///      and asserts that either nothing was returned or a single boolean\n    ///      was returned equal to `true`.\n    /// @param target The call target.\n    /// @param callData The abi-encoded call data.\n    function _callWithOptionalBooleanResult(\n        address target,\n        bytes memory callData\n    )\n        private\n    {\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\n        if (didSucceed) {\n            if (resultData.length == 0) {\n                return;\n            }\n            if (resultData.length == 32) {\n                uint256 result = LibBytes.readUint256(resultData, 0);\n                if (result == 1) {\n                    return;\n                }\n            }\n        }\n        LibRichErrors.rrevert(resultData);\n    }\n}\n"
    },
    "@0x/contracts-exchange-libs/contracts/src/IWallet.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\n\ncontract IWallet {\n\n    bytes4 internal constant LEGACY_WALLET_MAGIC_VALUE = 0xb0671381;\n\n    /// @dev Validates a hash with the `Wallet` signature type.\n    /// @param hash Message hash that is signed.\n    /// @param signature Proof of signing.\n    /// @return magicValue `bytes4(0xb0671381)` if the signature check succeeds.\n    function isValidSignature(\n        bytes32 hash,\n        bytes calldata signature\n    )\n        external\n        view\n        returns (bytes4 magicValue);\n}\n"
    },
    "@0x/contracts-utils/contracts/src/LibAddressArray.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"./LibAddressArrayRichErrors.sol\";\nimport \"./LibBytes.sol\";\nimport \"./LibRichErrors.sol\";\n\n\nlibrary LibAddressArray {\n\n    /// @dev Append a new address to an array of addresses.\n    ///      The `addressArray` may need to be reallocated to make space\n    ///      for the new address. Because of this we return the resulting\n    ///      memory location of `addressArray`.\n    /// @param addressArray Array of addresses.\n    /// @param addressToAppend  Address to append.\n    /// @return Array of addresses: [... addressArray, addressToAppend]\n    function append(address[] memory addressArray, address addressToAppend)\n        internal\n        pure\n        returns (address[] memory)\n    {\n        // Get stats on address array and free memory\n        uint256 freeMemPtr = 0;\n        uint256 addressArrayBeginPtr = 0;\n        uint256 addressArrayEndPtr = 0;\n        uint256 addressArrayLength = addressArray.length;\n        uint256 addressArrayMemSizeInBytes = 32 + (32 * addressArrayLength);\n        assembly {\n            freeMemPtr := mload(0x40)\n            addressArrayBeginPtr := addressArray\n            addressArrayEndPtr := add(addressArray, addressArrayMemSizeInBytes)\n        }\n\n        // Cases for `freeMemPtr`:\n        //  `freeMemPtr` == `addressArrayEndPtr`: Nothing occupies memory after `addressArray`\n        //  `freeMemPtr` > `addressArrayEndPtr`: Some value occupies memory after `addressArray`\n        //  `freeMemPtr` < `addressArrayEndPtr`: Memory has not been managed properly.\n        if (freeMemPtr < addressArrayEndPtr) {\n            LibRichErrors.rrevert(LibAddressArrayRichErrors.MismanagedMemoryError(\n                freeMemPtr,\n                addressArrayEndPtr\n            ));\n        }\n\n        // If free memory begins at the end of `addressArray`\n        // then we can append `addressToAppend` directly.\n        // Otherwise, we must copy the array to free memory\n        // before appending new values to it.\n        if (freeMemPtr > addressArrayEndPtr) {\n            LibBytes.memCopy(freeMemPtr, addressArrayBeginPtr, addressArrayMemSizeInBytes);\n            assembly {\n                addressArray := freeMemPtr\n                addressArrayBeginPtr := addressArray\n            }\n        }\n\n        // Append `addressToAppend`\n        addressArrayLength += 1;\n        addressArrayMemSizeInBytes += 32;\n        addressArrayEndPtr = addressArrayBeginPtr + addressArrayMemSizeInBytes;\n        freeMemPtr = addressArrayEndPtr;\n        assembly {\n            // Store new array length\n            mstore(addressArray, addressArrayLength)\n\n            // Update `freeMemPtr`\n            mstore(0x40, freeMemPtr)\n        }\n        addressArray[addressArrayLength - 1] = addressToAppend;\n        return addressArray;\n    }\n\n    /// @dev Checks if an address array contains the target address.\n    /// @param addressArray Array of addresses.\n    /// @param target Address to search for in array.\n    /// @return True if the addressArray contains the target.\n    function contains(address[] memory addressArray, address target)\n        internal\n        pure\n        returns (bool success)\n    {\n        assembly {\n\n            // Calculate byte length of array\n            let arrayByteLen := mul(mload(addressArray), 32)\n            // Calculate beginning of array contents\n            let arrayContentsStart := add(addressArray, 32)\n            // Calclulate end of array contents\n            let arrayContentsEnd := add(arrayContentsStart, arrayByteLen)\n\n            // Loop through array\n            for {let i:= arrayContentsStart} lt(i, arrayContentsEnd) {i := add(i, 32)} {\n\n                // Load array element\n                let arrayElement := mload(i)\n\n                // Return true if array element equals target\n                if eq(target, arrayElement) {\n                    // Set success to true\n                    success := 1\n                    // Break loop\n                    i := arrayContentsEnd\n                }\n            }\n        }\n        return success;\n    }\n\n    /// @dev Finds the index of an address within an array.\n    /// @param addressArray Array of addresses.\n    /// @param target Address to search for in array.\n    /// @return Existence and index of the target in the array.\n    function indexOf(address[] memory addressArray, address target)\n        internal\n        pure\n        returns (bool success, uint256 index)\n    {\n        assembly {\n\n            // Calculate byte length of array\n            let arrayByteLen := mul(mload(addressArray), 32)\n            // Calculate beginning of array contents\n            let arrayContentsStart := add(addressArray, 32)\n            // Calclulate end of array contents\n            let arrayContentsEnd := add(arrayContentsStart, arrayByteLen)\n\n            // Loop through array\n            for {let i:= arrayContentsStart} lt(i, arrayContentsEnd) {i := add(i, 32)} {\n\n                // Load array element\n                let arrayElement := mload(i)\n\n                // Return true if array element equals target\n                if eq(target, arrayElement) {\n                    // Set success and index\n                    success := 1\n                    index := div(sub(i, arrayContentsStart), 32)\n                    // Break loop\n                    i := arrayContentsEnd\n                }\n            }\n        }\n        return (success, index);\n    }\n}\n"
    },
    "@0x/contracts-utils/contracts/src/DeploymentConstants.sol": {
      "content": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ncontract DeploymentConstants {\n\n    // solhint-disable separate-by-one-line-in-contract\n\n    // Mainnet addresses ///////////////////////////////////////////////////////\n    /// @dev Mainnet address of the WETH contract.\n    address constant private WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    /// @dev Mainnet address of the KyberNetworkProxy contract.\n    address constant private KYBER_NETWORK_PROXY_ADDRESS = 0x9AAb3f75489902f3a48495025729a0AF77d4b11e;\n    /// @dev Mainnet address of the KyberHintHandler contract.\n    address constant private KYBER_HINT_HANDLER_ADDRESS = 0xa1C0Fa73c39CFBcC11ec9Eb1Afc665aba9996E2C;\n    /// @dev Mainnet address of the `UniswapExchangeFactory` contract.\n    address constant private UNISWAP_EXCHANGE_FACTORY_ADDRESS = 0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95;\n    /// @dev Mainnet address of the `UniswapV2Router01` contract.\n    address constant private UNISWAP_V2_ROUTER_01_ADDRESS = 0xf164fC0Ec4E93095b804a4795bBe1e041497b92a;\n    /// @dev Mainnet address of the Eth2Dai `MatchingMarket` contract.\n    address constant private ETH2DAI_ADDRESS = 0x794e6e91555438aFc3ccF1c5076A74F42133d08D;\n    /// @dev Mainnet address of the `ERC20BridgeProxy` contract\n    address constant private ERC20_BRIDGE_PROXY_ADDRESS = 0x8ED95d1746bf1E4dAb58d8ED4724f1Ef95B20Db0;\n    ///@dev Mainnet address of the `Dai` (multi-collateral) contract\n    address constant private DAI_ADDRESS = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n    /// @dev Mainnet address of the `Chai` contract\n    address constant private CHAI_ADDRESS = 0x06AF07097C9Eeb7fD685c692751D5C66dB49c215;\n    /// @dev Mainnet address of the 0x DevUtils contract.\n    address constant private DEV_UTILS_ADDRESS = 0x74134CF88b21383713E096a5ecF59e297dc7f547;\n    /// @dev Kyber ETH pseudo-address.\n    address constant internal KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    /// @dev Mainnet address of the dYdX contract.\n    address constant private DYDX_ADDRESS = 0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e;\n    /// @dev Mainnet address of the GST2 contract\n    address constant private GST_ADDRESS = 0x0000000000b3F879cb30FE243b4Dfee438691c04;\n    /// @dev Mainnet address of the GST Collector\n    address constant private GST_COLLECTOR_ADDRESS = 0x000000D3b08566BE75A6DB803C03C85C0c1c5B96;\n    /// @dev Mainnet address of the mStable mUSD contract.\n    address constant private MUSD_ADDRESS = 0xe2f2a5C287993345a840Db3B0845fbC70f5935a5;\n    /// @dev Mainnet address of the Mooniswap Registry contract\n    address constant private MOONISWAP_REGISTRY = 0x71CD6666064C3A1354a3B4dca5fA1E2D3ee7D303;\n    /// @dev Mainnet address of the DODO Registry (ZOO) contract\n    address constant private DODO_REGISTRY = 0x3A97247DF274a17C59A3bd12735ea3FcDFb49950;\n    /// @dev Mainnet address of the DODO Helper contract\n    address constant private DODO_HELPER = 0x533dA777aeDCE766CEAe696bf90f8541A4bA80Eb;\n\n    // // Ropsten addresses ///////////////////////////////////////////////////////\n    // /// @dev Mainnet address of the WETH contract.\n    // address constant private WETH_ADDRESS = 0xc778417E063141139Fce010982780140Aa0cD5Ab;\n    // /// @dev Mainnet address of the KyberNetworkProxy contract.\n    // address constant private KYBER_NETWORK_PROXY_ADDRESS = 0xd719c34261e099Fdb33030ac8909d5788D3039C4;\n    // /// @dev Mainnet address of the `UniswapExchangeFactory` contract.\n    // address constant private UNISWAP_EXCHANGE_FACTORY_ADDRESS = 0x9c83dCE8CA20E9aAF9D3efc003b2ea62aBC08351;\n    // /// @dev Mainnet address of the `UniswapV2Router01` contract.\n    // address constant private UNISWAP_V2_ROUTER_01_ADDRESS = 0xf164fC0Ec4E93095b804a4795bBe1e041497b92a;\n    // /// @dev Mainnet address of the Eth2Dai `MatchingMarket` contract.\n    // address constant private ETH2DAI_ADDRESS = address(0);\n    // /// @dev Mainnet address of the `ERC20BridgeProxy` contract\n    // address constant private ERC20_BRIDGE_PROXY_ADDRESS = 0xb344afeD348de15eb4a9e180205A2B0739628339;\n    // ///@dev Mainnet address of the `Dai` (multi-collateral) contract\n    // address constant private DAI_ADDRESS = address(0);\n    // /// @dev Mainnet address of the `Chai` contract\n    // address constant private CHAI_ADDRESS = address(0);\n    // /// @dev Mainnet address of the 0x DevUtils contract.\n    // address constant private DEV_UTILS_ADDRESS = 0xC812AF3f3fBC62F76ea4262576EC0f49dB8B7f1c;\n    // /// @dev Kyber ETH pseudo-address.\n    // address constant internal KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    // /// @dev Mainnet address of the dYdX contract.\n    // address constant private DYDX_ADDRESS = address(0);\n    // /// @dev Mainnet address of the GST2 contract\n    // address constant private GST_ADDRESS = address(0);\n    // /// @dev Mainnet address of the GST Collector\n    // address constant private GST_COLLECTOR_ADDRESS = address(0);\n    // /// @dev Mainnet address of the mStable mUSD contract.\n    // address constant private MUSD_ADDRESS = 0x4E1000616990D83e56f4b5fC6CC8602DcfD20459;\n\n    // // Rinkeby addresses ///////////////////////////////////////////////////////\n    // /// @dev Mainnet address of the WETH contract.\n    // address constant private WETH_ADDRESS = 0xc778417E063141139Fce010982780140Aa0cD5Ab;\n    // /// @dev Mainnet address of the KyberNetworkProxy contract.\n    // address constant private KYBER_NETWORK_PROXY_ADDRESS = 0x0d5371e5EE23dec7DF251A8957279629aa79E9C5;\n    // /// @dev Mainnet address of the `UniswapExchangeFactory` contract.\n    // address constant private UNISWAP_EXCHANGE_FACTORY_ADDRESS = 0xf5D915570BC477f9B8D6C0E980aA81757A3AaC36;\n    // /// @dev Mainnet address of the `UniswapV2Router01` contract.\n    // address constant private UNISWAP_V2_ROUTER_01_ADDRESS = 0xf164fC0Ec4E93095b804a4795bBe1e041497b92a;\n    // /// @dev Mainnet address of the Eth2Dai `MatchingMarket` contract.\n    // address constant private ETH2DAI_ADDRESS = address(0);\n    // /// @dev Mainnet address of the `ERC20BridgeProxy` contract\n    // address constant private ERC20_BRIDGE_PROXY_ADDRESS = 0xA2AA4bEFED748Fba27a3bE7Dfd2C4b2c6DB1F49B;\n    // ///@dev Mainnet address of the `Dai` (multi-collateral) contract\n    // address constant private DAI_ADDRESS = address(0);\n    // /// @dev Mainnet address of the `Chai` contract\n    // address constant private CHAI_ADDRESS = address(0);\n    // /// @dev Mainnet address of the 0x DevUtils contract.\n    // address constant private DEV_UTILS_ADDRESS = 0x46B5BC959e8A754c0256FFF73bF34A52Ad5CdfA9;\n    // /// @dev Kyber ETH pseudo-address.\n    // address constant internal KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    // /// @dev Mainnet address of the dYdX contract.\n    // address constant private DYDX_ADDRESS = address(0);\n    // /// @dev Mainnet address of the GST2 contract\n    // address constant private GST_ADDRESS = address(0);\n    // /// @dev Mainnet address of the GST Collector\n    // address constant private GST_COLLECTOR_ADDRESS = address(0);\n    // /// @dev Mainnet address of the mStable mUSD contract.\n    // address constant private MUSD_ADDRESS = address(0);\n\n    // // Kovan addresses /////////////////////////////////////////////////////////\n    // /// @dev Kovan address of the WETH contract.\n    // address constant private WETH_ADDRESS = 0xd0A1E359811322d97991E03f863a0C30C2cF029C;\n    // /// @dev Kovan address of the KyberNetworkProxy contract.\n    // address constant private KYBER_NETWORK_PROXY_ADDRESS = 0x692f391bCc85cefCe8C237C01e1f636BbD70EA4D;\n    // /// @dev Kovan address of the `UniswapExchangeFactory` contract.\n    // address constant private UNISWAP_EXCHANGE_FACTORY_ADDRESS = 0xD3E51Ef092B2845f10401a0159B2B96e8B6c3D30;\n    // /// @dev Kovan address of the `UniswapV2Router01` contract.\n    // address constant private UNISWAP_V2_ROUTER_01_ADDRESS = 0xf164fC0Ec4E93095b804a4795bBe1e041497b92a;\n    // /// @dev Kovan address of the Eth2Dai `MatchingMarket` contract.\n    // address constant private ETH2DAI_ADDRESS = 0xe325acB9765b02b8b418199bf9650972299235F4;\n    // /// @dev Kovan address of the `ERC20BridgeProxy` contract\n    // address constant private ERC20_BRIDGE_PROXY_ADDRESS = 0x3577552C1Fb7A44aD76BeEB7aB53251668A21F8D;\n    // /// @dev Kovan address of the `Chai` contract\n    // address constant private CHAI_ADDRESS = address(0);\n    // /// @dev Kovan address of the `Dai` (multi-collateral) contract\n    // address constant private DAI_ADDRESS = 0x4F96Fe3b7A6Cf9725f59d353F723c1bDb64CA6Aa;\n    // /// @dev Kovan address of the 0x DevUtils contract.\n    // address constant private DEV_UTILS_ADDRESS = 0x9402639A828BdF4E9e4103ac3B69E1a6E522eB59;\n    // /// @dev Kyber ETH pseudo-address.\n    // address constant internal KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    // /// @dev Kovan address of the dYdX contract.\n    // address constant private DYDX_ADDRESS = address(0);\n    // /// @dev Kovan address of the GST2 contract\n    // address constant private GST_ADDRESS = address(0);\n    // /// @dev Kovan address of the GST Collector\n    // address constant private GST_COLLECTOR_ADDRESS = address(0);\n    // /// @dev Mainnet address of the mStable mUSD contract.\n    // address constant private MUSD_ADDRESS = address(0);\n\n    /// @dev Overridable way to get the `KyberNetworkProxy` address.\n    /// @return kyberAddress The `IKyberNetworkProxy` address.\n    function _getKyberNetworkProxyAddress()\n        internal\n        view\n        returns (address kyberAddress)\n    {\n        return KYBER_NETWORK_PROXY_ADDRESS;\n    }\n\n    /// @dev Overridable way to get the `KyberHintHandler` address.\n    /// @return kyberAddress The `IKyberHintHandler` address.\n    function _getKyberHintHandlerAddress()\n        internal\n        view\n        returns (address hintHandlerAddress)\n    {\n        return KYBER_HINT_HANDLER_ADDRESS;\n    }\n\n    /// @dev Overridable way to get the WETH address.\n    /// @return wethAddress The WETH address.\n    function _getWethAddress()\n        internal\n        view\n        returns (address wethAddress)\n    {\n        return WETH_ADDRESS;\n    }\n\n    /// @dev Overridable way to get the `UniswapExchangeFactory` address.\n    /// @return uniswapAddress The `UniswapExchangeFactory` address.\n    function _getUniswapExchangeFactoryAddress()\n        internal\n        view\n        returns (address uniswapAddress)\n    {\n        return UNISWAP_EXCHANGE_FACTORY_ADDRESS;\n    }\n\n    /// @dev Overridable way to get the `UniswapV2Router01` address.\n    /// @return uniswapRouterAddress The `UniswapV2Router01` address.\n    function _getUniswapV2Router01Address()\n        internal\n        view\n        returns (address uniswapRouterAddress)\n    {\n        return UNISWAP_V2_ROUTER_01_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the Eth2Dai `MatchingMarket` contract.\n    /// @return eth2daiAddress The Eth2Dai `MatchingMarket` contract.\n    function _getEth2DaiAddress()\n        internal\n        view\n        returns (address eth2daiAddress)\n    {\n        return ETH2DAI_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the `ERC20BridgeProxy` contract.\n    /// @return erc20BridgeProxyAddress The `ERC20BridgeProxy` contract.\n    function _getERC20BridgeProxyAddress()\n        internal\n        view\n        returns (address erc20BridgeProxyAddress)\n    {\n        return ERC20_BRIDGE_PROXY_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the `Dai` contract.\n    /// @return daiAddress The `Dai` contract.\n    function _getDaiAddress()\n        internal\n        view\n        returns (address daiAddress)\n    {\n        return DAI_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the `Chai` contract.\n    /// @return chaiAddress The `Chai` contract.\n    function _getChaiAddress()\n        internal\n        view\n        returns (address chaiAddress)\n    {\n        return CHAI_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the 0x `DevUtils` contract address.\n    /// @return devUtils The 0x `DevUtils` contract address.\n    function _getDevUtilsAddress()\n        internal\n        view\n        returns (address devUtils)\n    {\n        return DEV_UTILS_ADDRESS;\n    }\n\n    /// @dev Overridable way to get the DyDx contract.\n    /// @return exchange The DyDx exchange contract.\n    function _getDydxAddress()\n        internal\n        view\n        returns (address dydxAddress)\n    {\n        return DYDX_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the GST2 contract address.\n    /// @return gst The GST contract.\n    function _getGstAddress()\n        internal\n        view\n        returns (address gst)\n    {\n        return GST_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the GST Collector address.\n    /// @return collector The GST collector address.\n    function _getGstCollectorAddress()\n        internal\n        view\n        returns (address collector)\n    {\n        return GST_COLLECTOR_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the mStable mUSD address.\n    /// @return musd The mStable mUSD address.\n    function _getMUsdAddress()\n        internal\n        view\n        returns (address musd)\n    {\n        return MUSD_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the Mooniswap registry address.\n    /// @return registry The Mooniswap registry address.\n    function _getMooniswapAddress()\n        internal\n        view\n        returns (address)\n    {\n        return MOONISWAP_REGISTRY;\n    }\n\n    /// @dev An overridable way to retrieve the DODO Registry contract address.\n    /// @return registry The DODO Registry contract address.\n    function _getDODORegistryAddress()\n        internal\n        view\n        returns (address)\n    {\n        return DODO_REGISTRY;\n    }\n\n    /// @dev An overridable way to retrieve the DODO Helper contract address.\n    /// @return registry The DODO Helper contract address.\n    function _getDODOHelperAddress()\n        internal\n        view\n        returns (address)\n    {\n        return DODO_HELPER;\n    }\n}\n"
    },
    "contracts/asset-proxy/contracts/src/interfaces/IUniswapV2Router01.sol": {
      "content": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ninterface IUniswapV2Router01 {\n\n    /// @dev Swaps an exact amount of input tokens for as many output tokens as possible, along the route determined by the path.\n    ///      The first element of path is the input token, the last is the output token, and any intermediate elements represent\n    ///      intermediate pairs to trade through (if, for example, a direct pair does not exist).\n    /// @param amountIn The amount of input tokens to send.\n    /// @param amountOutMin The minimum amount of output tokens that must be received for the transaction not to revert.\n    /// @param path An array of token addresses. path.length must be >= 2. Pools for each consecutive pair of addresses must exist and have liquidity.\n    /// @param to Recipient of the output tokens.\n    /// @param deadline Unix timestamp after which the transaction will revert.\n    /// @return amounts The input token amount and all subsequent output token amounts.\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n}\n"
    },
    "@0x/contracts-utils/contracts/src/LibAddressArrayRichErrors.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\nlibrary LibAddressArrayRichErrors {\n\n    // bytes4(keccak256(\"MismanagedMemoryError(uint256,uint256)\"))\n    bytes4 internal constant MISMANAGED_MEMORY_ERROR_SELECTOR =\n        0x5fc83722;\n\n    // solhint-disable func-name-mixedcase\n    function MismanagedMemoryError(\n        uint256 freeMemPtr,\n        uint256 addressArrayEndPtr\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            MISMANAGED_MEMORY_ERROR_SELECTOR,\n            freeMemPtr,\n            addressArrayEndPtr\n        );\n    }\n}\n"
    },
    "contracts/asset-proxy/contracts/test/TestUniswapV2Bridge.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibSafeMath.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibAddressArray.sol\";\nimport \"../src/bridges/UniswapV2Bridge.sol\";\nimport \"../src/interfaces/IUniswapV2Router01.sol\";\n\n\ncontract TestEventsRaiser {\n\n    event TokenTransfer(\n        address token,\n        address from,\n        address to,\n        uint256 amount\n    );\n\n    event TokenApprove(\n        address spender,\n        uint256 allowance\n    );\n\n    event SwapExactTokensForTokensInput(\n        uint amountIn,\n        uint amountOutMin,\n        address toTokenAddress,\n        address to,\n        uint deadline\n    );\n\n    function raiseTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    )\n        external\n    {\n        emit TokenTransfer(\n            msg.sender,\n            from,\n            to,\n            amount\n        );\n    }\n\n    function raiseTokenApprove(address spender, uint256 allowance) external {\n        emit TokenApprove(spender, allowance);\n    }\n\n    function raiseSwapExactTokensForTokensInput(\n        uint amountIn,\n        uint amountOutMin,\n        address toTokenAddress,\n        address to,\n        uint deadline\n    ) external\n    {\n        emit SwapExactTokensForTokensInput(\n            amountIn,\n            amountOutMin,\n            toTokenAddress,\n            to,\n            deadline\n        );\n    }\n}\n\n\n/// @dev A minimalist ERC20 token.\ncontract TestToken {\n\n    using LibSafeMath for uint256;\n\n    mapping (address => uint256) public balances;\n    string private _nextRevertReason;\n\n    /// @dev Set the balance for `owner`.\n    function setBalance(address owner, uint256 balance)\n        external\n        payable\n    {\n        balances[owner] = balance;\n    }\n\n    /// @dev Just emits a TokenTransfer event on the caller\n    function transfer(address to, uint256 amount)\n        external\n        returns (bool)\n    {\n        TestEventsRaiser(msg.sender).raiseTokenTransfer(msg.sender, to, amount);\n        return true;\n    }\n\n    /// @dev Just emits a TokenApprove event on the caller\n    function approve(address spender, uint256 allowance)\n        external\n        returns (bool)\n    {\n        TestEventsRaiser(msg.sender).raiseTokenApprove(spender, allowance);\n        return true;\n    }\n\n    function allowance(address, address) external view returns (uint256) {\n        return 0;\n    }\n\n    /// @dev Retrieve the balance for `owner`.\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256)\n    {\n        return balances[owner];\n    }\n}\n\n\n/// @dev Mock the UniswapV2Router01 contract\ncontract TestRouter is\n    IUniswapV2Router01\n{\n    string private _nextRevertReason;\n\n    /// @dev Set the revert reason for `swapExactTokensForTokens`.\n    function setRevertReason(string calldata reason)\n        external\n    {\n        _nextRevertReason = reason;\n    }\n\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts)\n    {\n        _revertIfReasonExists();\n\n        amounts = new uint[](path.length);\n        amounts[0] = amountIn;\n        amounts[amounts.length - 1] = amountOutMin;\n\n        TestEventsRaiser(msg.sender).raiseSwapExactTokensForTokensInput(\n            // tokens sold\n            amountIn,\n            // tokens bought\n            amountOutMin,\n            // output token (toTokenAddress)\n            path[path.length - 1],\n            // recipient\n            to,\n            // deadline\n            deadline\n        );\n    }\n\n    function _revertIfReasonExists()\n        private\n        view\n    {\n        if (bytes(_nextRevertReason).length != 0) {\n            revert(_nextRevertReason);\n        }\n    }\n\n}\n\n\n/// @dev UniswapV2Bridge overridden to mock tokens and Uniswap router\ncontract TestUniswapV2Bridge is\n    UniswapV2Bridge,\n    TestEventsRaiser\n{\n\n    // Token address to TestToken instance.\n    mapping (address => TestToken) private _testTokens;\n    // TestRouter instance.\n    TestRouter private _testRouter;\n\n    constructor() public {\n        _testRouter = new TestRouter();\n    }\n\n    function setRouterRevertReason(string calldata revertReason)\n        external\n    {\n        _testRouter.setRevertReason(revertReason);\n    }\n\n    /// @dev Sets the balance of this contract for an existing token.\n    ///      The wei attached will be the balance.\n    function setTokenBalance(address tokenAddress, uint256 balance)\n        external\n    {\n        TestToken token = _testTokens[tokenAddress];\n        token.setBalance(address(this), balance);\n    }\n\n    /// @dev Create a new token\n    /// @param tokenAddress The token address. If zero, one will be created.\n    function createToken(\n        address tokenAddress\n    )\n        external\n        returns (TestToken token)\n    {\n        token = TestToken(tokenAddress);\n        if (tokenAddress == address(0)) {\n            token = new TestToken();\n        }\n        _testTokens[address(token)] = token;\n\n        return token;\n    }\n\n    function getRouterAddress()\n        external\n        view\n        returns (address)\n    {\n        return address(_testRouter);\n    }\n\n    function _getUniswapV2Router01Address()\n        internal\n        view\n        returns (address)\n    {\n        return address(_testRouter);\n    }\n}\n"
    },
    "contracts/asset-proxy/contracts/src/bridges/SushiSwapBridge.sol": {
      "content": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol\";\nimport \"@0x/contracts-erc20/contracts/src/interfaces/IEtherToken.sol\";\nimport \"@0x/contracts-erc20/contracts/src/LibERC20Token.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/IWallet.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibAddressArray.sol\";\nimport \"@0x/contracts-utils/contracts/src/DeploymentConstants.sol\";\nimport \"../interfaces/IUniswapV2Router01.sol\";\nimport \"../interfaces/IERC20Bridge.sol\";\n\n\n// solhint-disable space-after-comma\n// solhint-disable not-rely-on-time\ncontract SushiSwapBridge is\n    IERC20Bridge,\n    IWallet,\n    DeploymentConstants\n{\n    struct TransferState {\n        address[] path;\n        address router;\n        uint256 fromTokenBalance;\n    }\n\n    /// @dev Callback for `IERC20Bridge`. Tries to buy `amount` of\n    ///      `toTokenAddress` tokens by selling the entirety of the `fromTokenAddress`\n    ///      token encoded in the bridge data.\n    /// @param toTokenAddress The token to buy and transfer to `to`.\n    /// @param from The maker (this contract).\n    /// @param to The recipient of the bought tokens.\n    /// @param amount Minimum amount of `toTokenAddress` tokens to buy.\n    /// @param bridgeData The abi-encoded path of token addresses. Last element must be toTokenAddress\n    /// @return success The magic bytes if successful.\n    function bridgeTransferFrom(\n        address toTokenAddress,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata bridgeData\n    )\n        external\n        returns (bytes4 success)\n    {\n        // hold variables to get around stack depth limitations\n        TransferState memory state;\n\n        // Decode the bridge data to get the `fromTokenAddress`.\n        // solhint-disable indent\n        (state.path, state.router) = abi.decode(bridgeData, (address[], address));\n        // solhint-enable indent\n\n        require(state.path.length >= 2, \"SushiSwapBridge/PATH_LENGTH_MUST_BE_AT_LEAST_TWO\");\n        require(state.path[state.path.length - 1] == toTokenAddress, \"SushiSwapBridge/LAST_ELEMENT_OF_PATH_MUST_MATCH_OUTPUT_TOKEN\");\n\n        // Just transfer the tokens if they're the same.\n        if (state.path[0] == toTokenAddress) {\n            LibERC20Token.transfer(state.path[0], to, amount);\n            return BRIDGE_SUCCESS;\n        }\n\n        // Get our balance of `fromTokenAddress` token.\n        state.fromTokenBalance = IERC20Token(state.path[0]).balanceOf(address(this));\n\n        // Grant the SushiSwap router an allowance.\n        LibERC20Token.approveIfBelow(\n            state.path[0],\n            state.router,\n            state.fromTokenBalance\n        );\n\n        // Buy as much `toTokenAddress` token with `fromTokenAddress` token\n        // and transfer it to `to`.\n        IUniswapV2Router01 router = IUniswapV2Router01(state.router);\n        uint[] memory amounts = router.swapExactTokensForTokens(\n             // Sell all tokens we hold.\n            state.fromTokenBalance,\n             // Minimum buy amount.\n            amount,\n            // Convert `fromTokenAddress` to `toTokenAddress`.\n            state.path,\n            // Recipient is `to`.\n            to,\n            // Expires after this block.\n            block.timestamp\n        );\n\n        emit ERC20BridgeTransfer(\n            // input token\n            state.path[0],\n            // output token\n            toTokenAddress,\n            // input token amount\n            state.fromTokenBalance,\n            // output token amount\n            amounts[amounts.length - 1],\n            from,\n            to\n        );\n\n        return BRIDGE_SUCCESS;\n    }\n\n    /// @dev `SignatureType.Wallet` callback, so that this bridge can be the maker\n    ///      and sign for itself in orders. Always succeeds.\n    /// @return magicValue Success bytes, always.\n    function isValidSignature(\n        bytes32,\n        bytes calldata\n    )\n        external\n        view\n        returns (bytes4 magicValue)\n    {\n        return LEGACY_WALLET_MAGIC_VALUE;\n    }\n}\n"
    },
    "contracts/dev-utils/contracts/src/Addresses.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.16;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-asset-proxy/contracts/src/interfaces/IAssetData.sol\";\nimport \"@0x/contracts-exchange/contracts/src/interfaces/IExchange.sol\";\nimport \"@0x/contracts-utils/contracts/src/DeploymentConstants.sol\";\n\n\n// solhint-disable no-empty-blocks\ncontract Addresses is\n    DeploymentConstants\n{\n    address public exchangeAddress;\n    address public erc20ProxyAddress;\n    address public erc721ProxyAddress;\n    address public erc1155ProxyAddress;\n    address public staticCallProxyAddress;\n    address public chaiBridgeAddress;\n    address public dydxBridgeAddress;\n\n    constructor (\n        address exchange_,\n        address chaiBridge_,\n        address dydxBridge_\n    )\n        public\n    {\n        exchangeAddress = exchange_;\n        chaiBridgeAddress = chaiBridge_;\n        dydxBridgeAddress = dydxBridge_;\n        erc20ProxyAddress = IExchange(exchange_).getAssetProxy(IAssetData(address(0)).ERC20Token.selector);\n        erc721ProxyAddress = IExchange(exchange_).getAssetProxy(IAssetData(address(0)).ERC721Token.selector);\n        erc1155ProxyAddress = IExchange(exchange_).getAssetProxy(IAssetData(address(0)).ERC1155Assets.selector);\n        staticCallProxyAddress = IExchange(exchange_).getAssetProxy(IAssetData(address(0)).StaticCall.selector);\n    }\n}\n"
    },
    "@0x/contracts-asset-proxy/contracts/src/interfaces/IAssetData.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\n// solhint-disable\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\n\n// @dev Interface of the asset proxy's assetData.\n// The asset proxies take an ABI encoded `bytes assetData` as argument.\n// This argument is ABI encoded as one of the methods of this interface.\ninterface IAssetData {\n\n    /// @dev Function signature for encoding ERC20 assetData.\n    /// @param tokenAddress Address of ERC20Token contract.\n    function ERC20Token(address tokenAddress)\n        external;\n\n    /// @dev Function signature for encoding ERC721 assetData.\n    /// @param tokenAddress Address of ERC721 token contract.\n    /// @param tokenId Id of ERC721 token to be transferred.\n    function ERC721Token(\n        address tokenAddress,\n        uint256 tokenId\n    )\n        external;\n\n    /// @dev Function signature for encoding ERC1155 assetData.\n    /// @param tokenAddress Address of ERC1155 token contract.\n    /// @param tokenIds Array of ids of tokens to be transferred.\n    /// @param values Array of values that correspond to each token id to be transferred.\n    ///        Note that each value will be multiplied by the amount being filled in the order before transferring.\n    /// @param callbackData Extra data to be passed to receiver's `onERC1155Received` callback function.\n    function ERC1155Assets(\n        address tokenAddress,\n        uint256[] calldata tokenIds,\n        uint256[] calldata values,\n        bytes calldata callbackData\n    )\n        external;\n\n    /// @dev Function signature for encoding MultiAsset assetData.\n    /// @param values Array of amounts that correspond to each asset to be transferred.\n    ///        Note that each value will be multiplied by the amount being filled in the order before transferring.\n    /// @param nestedAssetData Array of assetData fields that will be be dispatched to their correspnding AssetProxy contract.\n    function MultiAsset(\n        uint256[] calldata values,\n        bytes[] calldata nestedAssetData\n    )\n        external;\n\n    /// @dev Function signature for encoding StaticCall assetData.\n    /// @param staticCallTargetAddress Address that will execute the staticcall.\n    /// @param staticCallData Data that will be executed via staticcall on the staticCallTargetAddress.\n    /// @param expectedReturnDataHash Keccak-256 hash of the expected staticcall return data.\n    function StaticCall(\n        address staticCallTargetAddress,\n        bytes calldata staticCallData,\n        bytes32 expectedReturnDataHash\n    )\n        external;\n\n    /// @dev Function signature for encoding ERC20Bridge assetData.\n    /// @param tokenAddress Address of token to transfer.\n    /// @param bridgeAddress Address of the bridge contract.\n    /// @param bridgeData Arbitrary data to be passed to the bridge contract.\n    function ERC20Bridge(\n        address tokenAddress,\n        address bridgeAddress,\n        bytes calldata bridgeData\n    )\n        external;\n}\n"
    },
    "@0x/contracts-exchange/contracts/src/interfaces/IExchange.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"./IExchangeCore.sol\";\nimport \"./IProtocolFees.sol\";\nimport \"./IMatchOrders.sol\";\nimport \"./ISignatureValidator.sol\";\nimport \"./ITransactions.sol\";\nimport \"./IAssetProxyDispatcher.sol\";\nimport \"./IWrapperFunctions.sol\";\nimport \"./ITransferSimulator.sol\";\n\n\n// solhint-disable no-empty-blocks\ncontract IExchange is\n    IProtocolFees,\n    IExchangeCore,\n    IMatchOrders,\n    ISignatureValidator,\n    ITransactions,\n    IAssetProxyDispatcher,\n    ITransferSimulator,\n    IWrapperFunctions\n{}\n"
    },
    "@0x/contracts-exchange/contracts/src/interfaces/IExchangeCore.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol\";\n\n\ncontract IExchangeCore {\n\n    // Fill event is emitted whenever an order is filled.\n    event Fill(\n        address indexed makerAddress,         // Address that created the order.\n        address indexed feeRecipientAddress,  // Address that received fees.\n        bytes makerAssetData,                 // Encoded data specific to makerAsset.\n        bytes takerAssetData,                 // Encoded data specific to takerAsset.\n        bytes makerFeeAssetData,              // Encoded data specific to makerFeeAsset.\n        bytes takerFeeAssetData,              // Encoded data specific to takerFeeAsset.\n        bytes32 indexed orderHash,            // EIP712 hash of order (see LibOrder.getTypedDataHash).\n        address takerAddress,                 // Address that filled the order.\n        address senderAddress,                // Address that called the Exchange contract (msg.sender).\n        uint256 makerAssetFilledAmount,       // Amount of makerAsset sold by maker and bought by taker.\n        uint256 takerAssetFilledAmount,       // Amount of takerAsset sold by taker and bought by maker.\n        uint256 makerFeePaid,                 // Amount of makerFeeAssetData paid to feeRecipient by maker.\n        uint256 takerFeePaid,                 // Amount of takerFeeAssetData paid to feeRecipient by taker.\n        uint256 protocolFeePaid               // Amount of eth or weth paid to the staking contract.\n    );\n\n    // Cancel event is emitted whenever an individual order is cancelled.\n    event Cancel(\n        address indexed makerAddress,         // Address that created the order.\n        address indexed feeRecipientAddress,  // Address that would have recieved fees if order was filled.\n        bytes makerAssetData,                 // Encoded data specific to makerAsset.\n        bytes takerAssetData,                 // Encoded data specific to takerAsset.\n        address senderAddress,                // Address that called the Exchange contract (msg.sender).\n        bytes32 indexed orderHash             // EIP712 hash of order (see LibOrder.getTypedDataHash).\n    );\n\n    // CancelUpTo event is emitted whenever `cancelOrdersUpTo` is executed succesfully.\n    event CancelUpTo(\n        address indexed makerAddress,         // Orders cancelled must have been created by this address.\n        address indexed orderSenderAddress,   // Orders cancelled must have a `senderAddress` equal to this address.\n        uint256 orderEpoch                    // Orders with specified makerAddress and senderAddress with a salt less than this value are considered cancelled.\n    );\n\n    /// @dev Cancels all orders created by makerAddress with a salt less than or equal to the targetOrderEpoch\n    ///      and senderAddress equal to msg.sender (or null address if msg.sender == makerAddress).\n    /// @param targetOrderEpoch Orders created with a salt less or equal to this value will be cancelled.\n    function cancelOrdersUpTo(uint256 targetOrderEpoch)\n        external\n        payable;\n\n    /// @dev Fills the input order.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    /// @return Amounts filled and fees paid by maker and taker.\n    function fillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev After calling, the order can not be filled anymore.\n    /// @param order Order struct containing order specifications.\n    function cancelOrder(LibOrder.Order memory order)\n        public\n        payable;\n\n    /// @dev Gets information about an order: status, hash, and amount filled.\n    /// @param order Order to gather information on.\n    /// @return OrderInfo Information about the order and its state.\n    ///                   See LibOrder.OrderInfo for a complete description.\n    function getOrderInfo(LibOrder.Order memory order)\n        public\n        view\n        returns (LibOrder.OrderInfo memory orderInfo);\n}\n"
    },
    "@0x/contracts-exchange/contracts/src/interfaces/IProtocolFees.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ncontract IProtocolFees {\n\n    // Logs updates to the protocol fee multiplier.\n    event ProtocolFeeMultiplier(uint256 oldProtocolFeeMultiplier, uint256 updatedProtocolFeeMultiplier);\n\n    // Logs updates to the protocolFeeCollector address.\n    event ProtocolFeeCollectorAddress(address oldProtocolFeeCollector, address updatedProtocolFeeCollector);\n\n    /// @dev Allows the owner to update the protocol fee multiplier.\n    /// @param updatedProtocolFeeMultiplier The updated protocol fee multiplier.\n    function setProtocolFeeMultiplier(uint256 updatedProtocolFeeMultiplier)\n        external;\n\n    /// @dev Allows the owner to update the protocolFeeCollector address.\n    /// @param updatedProtocolFeeCollector The updated protocolFeeCollector contract address.\n    function setProtocolFeeCollectorAddress(address updatedProtocolFeeCollector)\n        external;\n\n    /// @dev Returns the protocolFeeMultiplier\n    function protocolFeeMultiplier()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Returns the protocolFeeCollector address\n    function protocolFeeCollector()\n        external\n        view\n        returns (address);\n}\n"
    },
    "@0x/contracts-exchange/contracts/src/interfaces/IMatchOrders.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol\";\n\n\ncontract IMatchOrders {\n\n    /// @dev Match complementary orders that have a profitable spread.\n    ///      Each order is filled at their respective price point, and\n    ///      the matcher receives a profit denominated in the left maker asset.\n    /// @param leftOrders Set of orders with the same maker / taker asset.\n    /// @param rightOrders Set of orders to match against `leftOrders`\n    /// @param leftSignatures Proof that left orders were created by the left makers.\n    /// @param rightSignatures Proof that right orders were created by the right makers.\n    /// @return batchMatchedFillResults Amounts filled and profit generated.\n    function batchMatchOrders(\n        LibOrder.Order[] memory leftOrders,\n        LibOrder.Order[] memory rightOrders,\n        bytes[] memory leftSignatures,\n        bytes[] memory rightSignatures\n    )\n        public\n        payable\n        returns (LibFillResults.BatchMatchedFillResults memory batchMatchedFillResults);\n\n    /// @dev Match complementary orders that have a profitable spread.\n    ///      Each order is maximally filled at their respective price point, and\n    ///      the matcher receives a profit denominated in either the left maker asset,\n    ///      right maker asset, or a combination of both.\n    /// @param leftOrders Set of orders with the same maker / taker asset.\n    /// @param rightOrders Set of orders to match against `leftOrders`\n    /// @param leftSignatures Proof that left orders were created by the left makers.\n    /// @param rightSignatures Proof that right orders were created by the right makers.\n    /// @return batchMatchedFillResults Amounts filled and profit generated.\n    function batchMatchOrdersWithMaximalFill(\n        LibOrder.Order[] memory leftOrders,\n        LibOrder.Order[] memory rightOrders,\n        bytes[] memory leftSignatures,\n        bytes[] memory rightSignatures\n    )\n        public\n        payable\n        returns (LibFillResults.BatchMatchedFillResults memory batchMatchedFillResults);\n\n    /// @dev Match two complementary orders that have a profitable spread.\n    ///      Each order is filled at their respective price point. However, the calculations are\n    ///      carried out as though the orders are both being filled at the right order's price point.\n    ///      The profit made by the left order goes to the taker (who matched the two orders).\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    /// @param leftSignature Proof that order was created by the left maker.\n    /// @param rightSignature Proof that order was created by the right maker.\n    /// @return matchedFillResults Amounts filled and fees paid by maker and taker of matched orders.\n    function matchOrders(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        bytes memory leftSignature,\n        bytes memory rightSignature\n    )\n        public\n        payable\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults);\n\n    /// @dev Match two complementary orders that have a profitable spread.\n    ///      Each order is maximally filled at their respective price point, and\n    ///      the matcher receives a profit denominated in either the left maker asset,\n    ///      right maker asset, or a combination of both.\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    /// @param leftSignature Proof that order was created by the left maker.\n    /// @param rightSignature Proof that order was created by the right maker.\n    /// @return matchedFillResults Amounts filled by maker and taker of matched orders.\n    function matchOrdersWithMaximalFill(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        bytes memory leftSignature,\n        bytes memory rightSignature\n    )\n        public\n        payable\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults);\n}\n"
    },
    "@0x/contracts-exchange/contracts/src/interfaces/ISignatureValidator.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibZeroExTransaction.sol\";\n\n\ncontract ISignatureValidator {\n\n   // Allowed signature types.\n    enum SignatureType {\n        Illegal,                     // 0x00, default value\n        Invalid,                     // 0x01\n        EIP712,                      // 0x02\n        EthSign,                     // 0x03\n        Wallet,                      // 0x04\n        Validator,                   // 0x05\n        PreSigned,                   // 0x06\n        EIP1271Wallet,               // 0x07\n        NSignatureTypes              // 0x08, number of signature types. Always leave at end.\n    }\n\n    event SignatureValidatorApproval(\n        address indexed signerAddress,     // Address that approves or disapproves a contract to verify signatures.\n        address indexed validatorAddress,  // Address of signature validator contract.\n        bool isApproved                    // Approval or disapproval of validator contract.\n    );\n\n    /// @dev Approves a hash on-chain.\n    ///      After presigning a hash, the preSign signature type will become valid for that hash and signer.\n    /// @param hash Any 32-byte hash.\n    function preSign(bytes32 hash)\n        external\n        payable;\n\n    /// @dev Approves/unnapproves a Validator contract to verify signatures on signer's behalf.\n    /// @param validatorAddress Address of Validator contract.\n    /// @param approval Approval or disapproval of  Validator contract.\n    function setSignatureValidatorApproval(\n        address validatorAddress,\n        bool approval\n    )\n        external\n        payable;\n\n    /// @dev Verifies that a hash has been signed by the given signer.\n    /// @param hash Any 32-byte hash.\n    /// @param signature Proof that the hash has been signed by signer.\n    /// @return isValid `true` if the signature is valid for the given hash and signer.\n    function isValidHashSignature(\n        bytes32 hash,\n        address signerAddress,\n        bytes memory signature\n    )\n        public\n        view\n        returns (bool isValid);\n\n    /// @dev Verifies that a signature for an order is valid.\n    /// @param order The order.\n    /// @param signature Proof that the order has been signed by signer.\n    /// @return isValid true if the signature is valid for the given order and signer.\n    function isValidOrderSignature(\n        LibOrder.Order memory order,\n        bytes memory signature\n    )\n        public\n        view\n        returns (bool isValid);\n\n    /// @dev Verifies that a signature for a transaction is valid.\n    /// @param transaction The transaction.\n    /// @param signature Proof that the order has been signed by signer.\n    /// @return isValid true if the signature is valid for the given transaction and signer.\n    function isValidTransactionSignature(\n        LibZeroExTransaction.ZeroExTransaction memory transaction,\n        bytes memory signature\n    )\n        public\n        view\n        returns (bool isValid);\n\n    /// @dev Verifies that an order, with provided order hash, has been signed\n    ///      by the given signer.\n    /// @param order The order.\n    /// @param orderHash The hash of the order.\n    /// @param signature Proof that the hash has been signed by signer.\n    /// @return isValid True if the signature is valid for the given order and signer.\n    function _isValidOrderWithHashSignature(\n        LibOrder.Order memory order,\n        bytes32 orderHash,\n        bytes memory signature\n    )\n        internal\n        view\n        returns (bool isValid);\n\n    /// @dev Verifies that a transaction, with provided order hash, has been signed\n    ///      by the given signer.\n    /// @param transaction The transaction.\n    /// @param transactionHash The hash of the transaction.\n    /// @param signature Proof that the hash has been signed by signer.\n    /// @return isValid True if the signature is valid for the given transaction and signer.\n    function _isValidTransactionWithHashSignature(\n        LibZeroExTransaction.ZeroExTransaction memory transaction,\n        bytes32 transactionHash,\n        bytes memory signature\n    )\n        internal\n        view\n        returns (bool isValid);\n}\n"
    },
    "@0x/contracts-exchange/contracts/src/interfaces/ITransactions.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibZeroExTransaction.sol\";\n\n\ncontract ITransactions {\n\n    // TransactionExecution event is emitted when a ZeroExTransaction is executed.\n    event TransactionExecution(bytes32 indexed transactionHash);\n\n    /// @dev Executes an Exchange method call in the context of signer.\n    /// @param transaction 0x transaction containing salt, signerAddress, and data.\n    /// @param signature Proof that transaction has been signed by signer.\n    /// @return ABI encoded return data of the underlying Exchange function call.\n    function executeTransaction(\n        LibZeroExTransaction.ZeroExTransaction memory transaction,\n        bytes memory signature\n    )\n        public\n        payable\n        returns (bytes memory);\n\n    /// @dev Executes a batch of Exchange method calls in the context of signer(s).\n    /// @param transactions Array of 0x transactions containing salt, signerAddress, and data.\n    /// @param signatures Array of proofs that transactions have been signed by signer(s).\n    /// @return Array containing ABI encoded return data for each of the underlying Exchange function calls.\n    function batchExecuteTransactions(\n        LibZeroExTransaction.ZeroExTransaction[] memory transactions,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (bytes[] memory);\n\n    /// @dev The current function will be called in the context of this address (either 0x transaction signer or `msg.sender`).\n    ///      If calling a fill function, this address will represent the taker.\n    ///      If calling a cancel function, this address will represent the maker.\n    /// @return Signer of 0x transaction if entry point is `executeTransaction`.\n    ///         `msg.sender` if entry point is any other function.\n    function _getCurrentContextAddress()\n        internal\n        view\n        returns (address);\n}\n"
    },
    "@0x/contracts-exchange/contracts/src/interfaces/IAssetProxyDispatcher.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ncontract IAssetProxyDispatcher {\n\n    // Logs registration of new asset proxy\n    event AssetProxyRegistered(\n        bytes4 id,              // Id of new registered AssetProxy.\n        address assetProxy      // Address of new registered AssetProxy.\n    );\n\n    /// @dev Registers an asset proxy to its asset proxy id.\n    ///      Once an asset proxy is registered, it cannot be unregistered.\n    /// @param assetProxy Address of new asset proxy to register.\n    function registerAssetProxy(address assetProxy)\n        external;\n\n    /// @dev Gets an asset proxy.\n    /// @param assetProxyId Id of the asset proxy.\n    /// @return The asset proxy registered to assetProxyId. Returns 0x0 if no proxy is registered.\n    function getAssetProxy(bytes4 assetProxyId)\n        external\n        view\n        returns (address);\n}\n"
    },
    "@0x/contracts-exchange/contracts/src/interfaces/IWrapperFunctions.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol\";\n\n\ncontract IWrapperFunctions {\n\n    /// @dev Fills the input order. Reverts if exact takerAssetFillAmount not filled.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    function fillOrKillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev Executes multiple calls of fillOrder.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Array of amounts filled and fees paid by makers and taker.\n    function batchFillOrders(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults[] memory fillResults);\n\n    /// @dev Executes multiple calls of fillOrKillOrder.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Array of amounts filled and fees paid by makers and taker.\n    function batchFillOrKillOrders(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults[] memory fillResults);\n\n    /// @dev Executes multiple calls of fillOrder. If any fill reverts, the error is caught and ignored.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Array of amounts filled and fees paid by makers and taker.\n    function batchFillOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults[] memory fillResults);\n\n    /// @dev Executes multiple calls of fillOrder until total amount of takerAsset is sold by taker.\n    ///      If any fill reverts, the error is caught and ignored.\n    ///      NOTE: This function does not enforce that the takerAsset is the same for each order.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketSellOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256 takerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev Executes multiple calls of fillOrder until total amount of makerAsset is bought by taker.\n    ///      If any fill reverts, the error is caught and ignored.\n    ///      NOTE: This function does not enforce that the makerAsset is the same for each order.\n    /// @param orders Array of order specifications.\n    /// @param makerAssetFillAmount Desired amount of makerAsset to buy.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketBuyOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256 makerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev Calls marketSellOrdersNoThrow then reverts if < takerAssetFillAmount has been sold.\n    ///      NOTE: This function does not enforce that the takerAsset is the same for each order.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmount Minimum amount of takerAsset to sell.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketSellOrdersFillOrKill(\n        LibOrder.Order[] memory orders,\n        uint256 takerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev Calls marketBuyOrdersNoThrow then reverts if < makerAssetFillAmount has been bought.\n    ///      NOTE: This function does not enforce that the makerAsset is the same for each order.\n    /// @param orders Array of order specifications.\n    /// @param makerAssetFillAmount Minimum amount of makerAsset to buy.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketBuyOrdersFillOrKill(\n        LibOrder.Order[] memory orders,\n        uint256 makerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev Executes multiple calls of cancelOrder.\n    /// @param orders Array of order specifications.\n    function batchCancelOrders(LibOrder.Order[] memory orders)\n        public\n        payable;\n}\n"
    },
    "@0x/contracts-exchange/contracts/src/interfaces/ITransferSimulator.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\n\ncontract ITransferSimulator {\n\n    /// @dev This function may be used to simulate any amount of transfers\n    /// As they would occur through the Exchange contract. Note that this function\n    /// will always revert, even if all transfers are successful. However, it may\n    /// be used with eth_call or with a try/catch pattern in order to simulate\n    /// the results of the transfers.\n    /// @param assetData Array of asset details, each encoded per the AssetProxy contract specification.\n    /// @param fromAddresses Array containing the `from` addresses that correspond with each transfer.\n    /// @param toAddresses Array containing the `to` addresses that correspond with each transfer.\n    /// @param amounts Array containing the amounts that correspond to each transfer.\n    /// @return This function does not return a value. However, it will always revert with\n    /// `Error(\"TRANSFERS_SUCCESSFUL\")` if all of the transfers were successful.\n    function simulateDispatchTransferFromCalls(\n        bytes[] memory assetData,\n        address[] memory fromAddresses,\n        address[] memory toAddresses,\n        uint256[] memory amounts\n    )\n        public;\n}\n"
    },
    "@0x/contracts-exchange-libs/contracts/src/LibOrder.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-utils/contracts/src/LibEIP712.sol\";\n\n\nlibrary LibOrder {\n\n    using LibOrder for Order;\n\n    // Hash for the EIP712 Order Schema:\n    // keccak256(abi.encodePacked(\n    //     \"Order(\",\n    //     \"address makerAddress,\",\n    //     \"address takerAddress,\",\n    //     \"address feeRecipientAddress,\",\n    //     \"address senderAddress,\",\n    //     \"uint256 makerAssetAmount,\",\n    //     \"uint256 takerAssetAmount,\",\n    //     \"uint256 makerFee,\",\n    //     \"uint256 takerFee,\",\n    //     \"uint256 expirationTimeSeconds,\",\n    //     \"uint256 salt,\",\n    //     \"bytes makerAssetData,\",\n    //     \"bytes takerAssetData,\",\n    //     \"bytes makerFeeAssetData,\",\n    //     \"bytes takerFeeAssetData\",\n    //     \")\"\n    // ))\n    bytes32 constant internal _EIP712_ORDER_SCHEMA_HASH =\n        0xf80322eb8376aafb64eadf8f0d7623f22130fd9491a221e902b713cb984a7534;\n\n    // A valid order remains fillable until it is expired, fully filled, or cancelled.\n    // An order's status is unaffected by external factors, like account balances.\n    enum OrderStatus {\n        INVALID,                     // Default value\n        INVALID_MAKER_ASSET_AMOUNT,  // Order does not have a valid maker asset amount\n        INVALID_TAKER_ASSET_AMOUNT,  // Order does not have a valid taker asset amount\n        FILLABLE,                    // Order is fillable\n        EXPIRED,                     // Order has already expired\n        FULLY_FILLED,                // Order is fully filled\n        CANCELLED                    // Order has been cancelled\n    }\n\n    // solhint-disable max-line-length\n    /// @dev Canonical order structure.\n    struct Order {\n        address makerAddress;           // Address that created the order.\n        address takerAddress;           // Address that is allowed to fill the order. If set to 0, any address is allowed to fill the order.\n        address feeRecipientAddress;    // Address that will recieve fees when order is filled.\n        address senderAddress;          // Address that is allowed to call Exchange contract methods that affect this order. If set to 0, any address is allowed to call these methods.\n        uint256 makerAssetAmount;       // Amount of makerAsset being offered by maker. Must be greater than 0.\n        uint256 takerAssetAmount;       // Amount of takerAsset being bid on by maker. Must be greater than 0.\n        uint256 makerFee;               // Fee paid to feeRecipient by maker when order is filled.\n        uint256 takerFee;               // Fee paid to feeRecipient by taker when order is filled.\n        uint256 expirationTimeSeconds;  // Timestamp in seconds at which order expires.\n        uint256 salt;                   // Arbitrary number to facilitate uniqueness of the order's hash.\n        bytes makerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring makerAsset. The leading bytes4 references the id of the asset proxy.\n        bytes takerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring takerAsset. The leading bytes4 references the id of the asset proxy.\n        bytes makerFeeAssetData;        // Encoded data that can be decoded by a specified proxy contract when transferring makerFeeAsset. The leading bytes4 references the id of the asset proxy.\n        bytes takerFeeAssetData;        // Encoded data that can be decoded by a specified proxy contract when transferring takerFeeAsset. The leading bytes4 references the id of the asset proxy.\n    }\n    // solhint-enable max-line-length\n\n    /// @dev Order information returned by `getOrderInfo()`.\n    struct OrderInfo {\n        OrderStatus orderStatus;                    // Status that describes order's validity and fillability.\n        bytes32 orderHash;                    // EIP712 typed data hash of the order (see LibOrder.getTypedDataHash).\n        uint256 orderTakerAssetFilledAmount;  // Amount of order that has already been filled.\n    }\n\n    /// @dev Calculates the EIP712 typed data hash of an order with a given domain separator.\n    /// @param order The order structure.\n    /// @return EIP712 typed data hash of the order.\n    function getTypedDataHash(Order memory order, bytes32 eip712ExchangeDomainHash)\n        internal\n        pure\n        returns (bytes32 orderHash)\n    {\n        orderHash = LibEIP712.hashEIP712Message(\n            eip712ExchangeDomainHash,\n            order.getStructHash()\n        );\n        return orderHash;\n    }\n\n    /// @dev Calculates EIP712 hash of the order struct.\n    /// @param order The order structure.\n    /// @return EIP712 hash of the order struct.\n    function getStructHash(Order memory order)\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        bytes32 schemaHash = _EIP712_ORDER_SCHEMA_HASH;\n        bytes memory makerAssetData = order.makerAssetData;\n        bytes memory takerAssetData = order.takerAssetData;\n        bytes memory makerFeeAssetData = order.makerFeeAssetData;\n        bytes memory takerFeeAssetData = order.takerFeeAssetData;\n\n        // Assembly for more efficiently computing:\n        // keccak256(abi.encodePacked(\n        //     EIP712_ORDER_SCHEMA_HASH,\n        //     uint256(order.makerAddress),\n        //     uint256(order.takerAddress),\n        //     uint256(order.feeRecipientAddress),\n        //     uint256(order.senderAddress),\n        //     order.makerAssetAmount,\n        //     order.takerAssetAmount,\n        //     order.makerFee,\n        //     order.takerFee,\n        //     order.expirationTimeSeconds,\n        //     order.salt,\n        //     keccak256(order.makerAssetData),\n        //     keccak256(order.takerAssetData),\n        //     keccak256(order.makerFeeAssetData),\n        //     keccak256(order.takerFeeAssetData)\n        // ));\n\n        assembly {\n            // Assert order offset (this is an internal error that should never be triggered)\n            if lt(order, 32) {\n                invalid()\n            }\n\n            // Calculate memory addresses that will be swapped out before hashing\n            let pos1 := sub(order, 32)\n            let pos2 := add(order, 320)\n            let pos3 := add(order, 352)\n            let pos4 := add(order, 384)\n            let pos5 := add(order, 416)\n\n            // Backup\n            let temp1 := mload(pos1)\n            let temp2 := mload(pos2)\n            let temp3 := mload(pos3)\n            let temp4 := mload(pos4)\n            let temp5 := mload(pos5)\n\n            // Hash in place\n            mstore(pos1, schemaHash)\n            mstore(pos2, keccak256(add(makerAssetData, 32), mload(makerAssetData)))        // store hash of makerAssetData\n            mstore(pos3, keccak256(add(takerAssetData, 32), mload(takerAssetData)))        // store hash of takerAssetData\n            mstore(pos4, keccak256(add(makerFeeAssetData, 32), mload(makerFeeAssetData)))  // store hash of makerFeeAssetData\n            mstore(pos5, keccak256(add(takerFeeAssetData, 32), mload(takerFeeAssetData)))  // store hash of takerFeeAssetData\n            result := keccak256(pos1, 480)\n\n            // Restore\n            mstore(pos1, temp1)\n            mstore(pos2, temp2)\n            mstore(pos3, temp3)\n            mstore(pos4, temp4)\n            mstore(pos5, temp5)\n        }\n        return result;\n    }\n}\n"
    },
    "@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-utils/contracts/src/LibSafeMath.sol\";\nimport \"./LibMath.sol\";\nimport \"./LibOrder.sol\";\n\n\nlibrary LibFillResults {\n\n    using LibSafeMath for uint256;\n\n    struct BatchMatchedFillResults {\n        FillResults[] left;              // Fill results for left orders\n        FillResults[] right;             // Fill results for right orders\n        uint256 profitInLeftMakerAsset;  // Profit taken from left makers\n        uint256 profitInRightMakerAsset; // Profit taken from right makers\n    }\n\n    struct FillResults {\n        uint256 makerAssetFilledAmount;  // Total amount of makerAsset(s) filled.\n        uint256 takerAssetFilledAmount;  // Total amount of takerAsset(s) filled.\n        uint256 makerFeePaid;            // Total amount of fees paid by maker(s) to feeRecipient(s).\n        uint256 takerFeePaid;            // Total amount of fees paid by taker to feeRecipients(s).\n        uint256 protocolFeePaid;         // Total amount of fees paid by taker to the staking contract.\n    }\n\n    struct MatchedFillResults {\n        FillResults left;                // Amounts filled and fees paid of left order.\n        FillResults right;               // Amounts filled and fees paid of right order.\n        uint256 profitInLeftMakerAsset;  // Profit taken from the left maker\n        uint256 profitInRightMakerAsset; // Profit taken from the right maker\n    }\n\n    /// @dev Calculates amounts filled and fees paid by maker and taker.\n    /// @param order to be filled.\n    /// @param takerAssetFilledAmount Amount of takerAsset that will be filled.\n    /// @param protocolFeeMultiplier The current protocol fee of the exchange contract.\n    /// @param gasPrice The gasprice of the transaction. This is provided so that the function call can continue\n    ///        to be pure rather than view.\n    /// @return fillResults Amounts filled and fees paid by maker and taker.\n    function calculateFillResults(\n        LibOrder.Order memory order,\n        uint256 takerAssetFilledAmount,\n        uint256 protocolFeeMultiplier,\n        uint256 gasPrice\n    )\n        internal\n        pure\n        returns (FillResults memory fillResults)\n    {\n        // Compute proportional transfer amounts\n        fillResults.takerAssetFilledAmount = takerAssetFilledAmount;\n        fillResults.makerAssetFilledAmount = LibMath.safeGetPartialAmountFloor(\n            takerAssetFilledAmount,\n            order.takerAssetAmount,\n            order.makerAssetAmount\n        );\n        fillResults.makerFeePaid = LibMath.safeGetPartialAmountFloor(\n            takerAssetFilledAmount,\n            order.takerAssetAmount,\n            order.makerFee\n        );\n        fillResults.takerFeePaid = LibMath.safeGetPartialAmountFloor(\n            takerAssetFilledAmount,\n            order.takerAssetAmount,\n            order.takerFee\n        );\n\n        // Compute the protocol fee that should be paid for a single fill.\n        fillResults.protocolFeePaid = gasPrice.safeMul(protocolFeeMultiplier);\n\n        return fillResults;\n    }\n\n    /// @dev Calculates fill amounts for the matched orders.\n    ///      Each order is filled at their respective price point. However, the calculations are\n    ///      carried out as though the orders are both being filled at the right order's price point.\n    ///      The profit made by the leftOrder order goes to the taker (who matched the two orders).\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    /// @param leftOrderTakerAssetFilledAmount Amount of left order already filled.\n    /// @param rightOrderTakerAssetFilledAmount Amount of right order already filled.\n    /// @param protocolFeeMultiplier The current protocol fee of the exchange contract.\n    /// @param gasPrice The gasprice of the transaction. This is provided so that the function call can continue\n    ///        to be pure rather than view.\n    /// @param shouldMaximallyFillOrders A value that indicates whether or not this calculation should use\n    ///                                  the maximal fill order matching strategy.\n    /// @param matchedFillResults Amounts to fill and fees to pay by maker and taker of matched orders.\n    function calculateMatchedFillResults(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        uint256 leftOrderTakerAssetFilledAmount,\n        uint256 rightOrderTakerAssetFilledAmount,\n        uint256 protocolFeeMultiplier,\n        uint256 gasPrice,\n        bool shouldMaximallyFillOrders\n    )\n        internal\n        pure\n        returns (MatchedFillResults memory matchedFillResults)\n    {\n        // Derive maker asset amounts for left & right orders, given store taker assert amounts\n        uint256 leftTakerAssetAmountRemaining = leftOrder.takerAssetAmount.safeSub(leftOrderTakerAssetFilledAmount);\n        uint256 leftMakerAssetAmountRemaining = LibMath.safeGetPartialAmountFloor(\n            leftOrder.makerAssetAmount,\n            leftOrder.takerAssetAmount,\n            leftTakerAssetAmountRemaining\n        );\n        uint256 rightTakerAssetAmountRemaining = rightOrder.takerAssetAmount.safeSub(rightOrderTakerAssetFilledAmount);\n        uint256 rightMakerAssetAmountRemaining = LibMath.safeGetPartialAmountFloor(\n            rightOrder.makerAssetAmount,\n            rightOrder.takerAssetAmount,\n            rightTakerAssetAmountRemaining\n        );\n\n        // Maximally fill the orders and pay out profits to the matcher in one or both of the maker assets.\n        if (shouldMaximallyFillOrders) {\n            matchedFillResults = _calculateMatchedFillResultsWithMaximalFill(\n                leftOrder,\n                rightOrder,\n                leftMakerAssetAmountRemaining,\n                leftTakerAssetAmountRemaining,\n                rightMakerAssetAmountRemaining,\n                rightTakerAssetAmountRemaining\n            );\n        } else {\n            matchedFillResults = _calculateMatchedFillResults(\n                leftOrder,\n                rightOrder,\n                leftMakerAssetAmountRemaining,\n                leftTakerAssetAmountRemaining,\n                rightMakerAssetAmountRemaining,\n                rightTakerAssetAmountRemaining\n            );\n        }\n\n        // Compute fees for left order\n        matchedFillResults.left.makerFeePaid = LibMath.safeGetPartialAmountFloor(\n            matchedFillResults.left.makerAssetFilledAmount,\n            leftOrder.makerAssetAmount,\n            leftOrder.makerFee\n        );\n        matchedFillResults.left.takerFeePaid = LibMath.safeGetPartialAmountFloor(\n            matchedFillResults.left.takerAssetFilledAmount,\n            leftOrder.takerAssetAmount,\n            leftOrder.takerFee\n        );\n\n        // Compute fees for right order\n        matchedFillResults.right.makerFeePaid = LibMath.safeGetPartialAmountFloor(\n            matchedFillResults.right.makerAssetFilledAmount,\n            rightOrder.makerAssetAmount,\n            rightOrder.makerFee\n        );\n        matchedFillResults.right.takerFeePaid = LibMath.safeGetPartialAmountFloor(\n            matchedFillResults.right.takerAssetFilledAmount,\n            rightOrder.takerAssetAmount,\n            rightOrder.takerFee\n        );\n\n        // Compute the protocol fee that should be paid for a single fill. In this\n        // case this should be made the protocol fee for both the left and right orders.\n        uint256 protocolFee = gasPrice.safeMul(protocolFeeMultiplier);\n        matchedFillResults.left.protocolFeePaid = protocolFee;\n        matchedFillResults.right.protocolFeePaid = protocolFee;\n\n        // Return fill results\n        return matchedFillResults;\n    }\n\n    /// @dev Adds properties of both FillResults instances.\n    /// @param fillResults1 The first FillResults.\n    /// @param fillResults2 The second FillResults.\n    /// @return The sum of both fill results.\n    function addFillResults(\n        FillResults memory fillResults1,\n        FillResults memory fillResults2\n    )\n        internal\n        pure\n        returns (FillResults memory totalFillResults)\n    {\n        totalFillResults.makerAssetFilledAmount = fillResults1.makerAssetFilledAmount.safeAdd(fillResults2.makerAssetFilledAmount);\n        totalFillResults.takerAssetFilledAmount = fillResults1.takerAssetFilledAmount.safeAdd(fillResults2.takerAssetFilledAmount);\n        totalFillResults.makerFeePaid = fillResults1.makerFeePaid.safeAdd(fillResults2.makerFeePaid);\n        totalFillResults.takerFeePaid = fillResults1.takerFeePaid.safeAdd(fillResults2.takerFeePaid);\n        totalFillResults.protocolFeePaid = fillResults1.protocolFeePaid.safeAdd(fillResults2.protocolFeePaid);\n\n        return totalFillResults;\n    }\n\n    /// @dev Calculates part of the matched fill results for a given situation using the fill strategy that only\n    ///      awards profit denominated in the left maker asset.\n    /// @param leftOrder The left order in the order matching situation.\n    /// @param rightOrder The right order in the order matching situation.\n    /// @param leftMakerAssetAmountRemaining The amount of the left order maker asset that can still be filled.\n    /// @param leftTakerAssetAmountRemaining The amount of the left order taker asset that can still be filled.\n    /// @param rightMakerAssetAmountRemaining The amount of the right order maker asset that can still be filled.\n    /// @param rightTakerAssetAmountRemaining The amount of the right order taker asset that can still be filled.\n    /// @return MatchFillResults struct that does not include fees paid.\n    function _calculateMatchedFillResults(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        uint256 leftMakerAssetAmountRemaining,\n        uint256 leftTakerAssetAmountRemaining,\n        uint256 rightMakerAssetAmountRemaining,\n        uint256 rightTakerAssetAmountRemaining\n    )\n        private\n        pure\n        returns (MatchedFillResults memory matchedFillResults)\n    {\n        // Calculate fill results for maker and taker assets: at least one order will be fully filled.\n        // The maximum amount the left maker can buy is `leftTakerAssetAmountRemaining`\n        // The maximum amount the right maker can sell is `rightMakerAssetAmountRemaining`\n        // We have two distinct cases for calculating the fill results:\n        // Case 1.\n        //   If the left maker can buy more than the right maker can sell, then only the right order is fully filled.\n        //   If the left maker can buy exactly what the right maker can sell, then both orders are fully filled.\n        // Case 2.\n        //   If the left maker cannot buy more than the right maker can sell, then only the left order is fully filled.\n        // Case 3.\n        //   If the left maker can buy exactly as much as the right maker can sell, then both orders are fully filled.\n        if (leftTakerAssetAmountRemaining > rightMakerAssetAmountRemaining) {\n            // Case 1: Right order is fully filled\n            matchedFillResults = _calculateCompleteRightFill(\n                leftOrder,\n                rightMakerAssetAmountRemaining,\n                rightTakerAssetAmountRemaining\n            );\n        } else if (leftTakerAssetAmountRemaining < rightMakerAssetAmountRemaining) {\n            // Case 2: Left order is fully filled\n            matchedFillResults.left.makerAssetFilledAmount = leftMakerAssetAmountRemaining;\n            matchedFillResults.left.takerAssetFilledAmount = leftTakerAssetAmountRemaining;\n            matchedFillResults.right.makerAssetFilledAmount = leftTakerAssetAmountRemaining;\n            // Round up to ensure the maker's exchange rate does not exceed the price specified by the order.\n            // We favor the maker when the exchange rate must be rounded.\n            matchedFillResults.right.takerAssetFilledAmount = LibMath.safeGetPartialAmountCeil(\n                rightOrder.takerAssetAmount,\n                rightOrder.makerAssetAmount,\n                leftTakerAssetAmountRemaining // matchedFillResults.right.makerAssetFilledAmount\n            );\n        } else {\n            // leftTakerAssetAmountRemaining == rightMakerAssetAmountRemaining\n            // Case 3: Both orders are fully filled. Technically, this could be captured by the above cases, but\n            //         this calculation will be more precise since it does not include rounding.\n            matchedFillResults = _calculateCompleteFillBoth(\n                leftMakerAssetAmountRemaining,\n                leftTakerAssetAmountRemaining,\n                rightMakerAssetAmountRemaining,\n                rightTakerAssetAmountRemaining\n            );\n        }\n\n        // Calculate amount given to taker\n        matchedFillResults.profitInLeftMakerAsset = matchedFillResults.left.makerAssetFilledAmount.safeSub(\n            matchedFillResults.right.takerAssetFilledAmount\n        );\n\n        return matchedFillResults;\n    }\n\n    /// @dev Calculates part of the matched fill results for a given situation using the maximal fill order matching\n    ///      strategy.\n    /// @param leftOrder The left order in the order matching situation.\n    /// @param rightOrder The right order in the order matching situation.\n    /// @param leftMakerAssetAmountRemaining The amount of the left order maker asset that can still be filled.\n    /// @param leftTakerAssetAmountRemaining The amount of the left order taker asset that can still be filled.\n    /// @param rightMakerAssetAmountRemaining The amount of the right order maker asset that can still be filled.\n    /// @param rightTakerAssetAmountRemaining The amount of the right order taker asset that can still be filled.\n    /// @return MatchFillResults struct that does not include fees paid.\n    function _calculateMatchedFillResultsWithMaximalFill(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        uint256 leftMakerAssetAmountRemaining,\n        uint256 leftTakerAssetAmountRemaining,\n        uint256 rightMakerAssetAmountRemaining,\n        uint256 rightTakerAssetAmountRemaining\n    )\n        private\n        pure\n        returns (MatchedFillResults memory matchedFillResults)\n    {\n        // If a maker asset is greater than the opposite taker asset, than there will be a spread denominated in that maker asset.\n        bool doesLeftMakerAssetProfitExist = leftMakerAssetAmountRemaining > rightTakerAssetAmountRemaining;\n        bool doesRightMakerAssetProfitExist = rightMakerAssetAmountRemaining > leftTakerAssetAmountRemaining;\n\n        // Calculate the maximum fill results for the maker and taker assets. At least one of the orders will be fully filled.\n        //\n        // The maximum that the left maker can possibly buy is the amount that the right order can sell.\n        // The maximum that the right maker can possibly buy is the amount that the left order can sell.\n        //\n        // If the left order is fully filled, profit will be paid out in the left maker asset. If the right order is fully filled,\n        // the profit will be out in the right maker asset.\n        //\n        // There are three cases to consider:\n        // Case 1.\n        //   If the left maker can buy more than the right maker can sell, then only the right order is fully filled.\n        // Case 2.\n        //   If the right maker can buy more than the left maker can sell, then only the right order is fully filled.\n        // Case 3.\n        //   If the right maker can sell the max of what the left maker can buy and the left maker can sell the max of\n        //   what the right maker can buy, then both orders are fully filled.\n        if (leftTakerAssetAmountRemaining > rightMakerAssetAmountRemaining) {\n            // Case 1: Right order is fully filled with the profit paid in the left makerAsset\n            matchedFillResults = _calculateCompleteRightFill(\n                leftOrder,\n                rightMakerAssetAmountRemaining,\n                rightTakerAssetAmountRemaining\n            );\n        } else if (rightTakerAssetAmountRemaining > leftMakerAssetAmountRemaining) {\n            // Case 2: Left order is fully filled with the profit paid in the right makerAsset.\n            matchedFillResults.left.makerAssetFilledAmount = leftMakerAssetAmountRemaining;\n            matchedFillResults.left.takerAssetFilledAmount = leftTakerAssetAmountRemaining;\n            // Round down to ensure the right maker's exchange rate does not exceed the price specified by the order.\n            // We favor the right maker when the exchange rate must be rounded and the profit is being paid in the\n            // right maker asset.\n            matchedFillResults.right.makerAssetFilledAmount = LibMath.safeGetPartialAmountFloor(\n                rightOrder.makerAssetAmount,\n                rightOrder.takerAssetAmount,\n                leftMakerAssetAmountRemaining\n            );\n            matchedFillResults.right.takerAssetFilledAmount = leftMakerAssetAmountRemaining;\n        } else {\n            // Case 3: The right and left orders are fully filled\n            matchedFillResults = _calculateCompleteFillBoth(\n                leftMakerAssetAmountRemaining,\n                leftTakerAssetAmountRemaining,\n                rightMakerAssetAmountRemaining,\n                rightTakerAssetAmountRemaining\n            );\n        }\n\n        // Calculate amount given to taker in the left order's maker asset if the left spread will be part of the profit.\n        if (doesLeftMakerAssetProfitExist) {\n            matchedFillResults.profitInLeftMakerAsset = matchedFillResults.left.makerAssetFilledAmount.safeSub(\n                matchedFillResults.right.takerAssetFilledAmount\n            );\n        }\n\n        // Calculate amount given to taker in the right order's maker asset if the right spread will be part of the profit.\n        if (doesRightMakerAssetProfitExist) {\n            matchedFillResults.profitInRightMakerAsset = matchedFillResults.right.makerAssetFilledAmount.safeSub(\n                matchedFillResults.left.takerAssetFilledAmount\n            );\n        }\n\n        return matchedFillResults;\n    }\n\n    /// @dev Calculates the fill results for the maker and taker in the order matching and writes the results\n    ///      to the fillResults that are being collected on the order. Both orders will be fully filled in this\n    ///      case.\n    /// @param leftMakerAssetAmountRemaining The amount of the left maker asset that is remaining to be filled.\n    /// @param leftTakerAssetAmountRemaining The amount of the left taker asset that is remaining to be filled.\n    /// @param rightMakerAssetAmountRemaining The amount of the right maker asset that is remaining to be filled.\n    /// @param rightTakerAssetAmountRemaining The amount of the right taker asset that is remaining to be filled.\n    /// @return MatchFillResults struct that does not include fees paid or spreads taken.\n    function _calculateCompleteFillBoth(\n        uint256 leftMakerAssetAmountRemaining,\n        uint256 leftTakerAssetAmountRemaining,\n        uint256 rightMakerAssetAmountRemaining,\n        uint256 rightTakerAssetAmountRemaining\n    )\n        private\n        pure\n        returns (MatchedFillResults memory matchedFillResults)\n    {\n        // Calculate the fully filled results for both orders.\n        matchedFillResults.left.makerAssetFilledAmount = leftMakerAssetAmountRemaining;\n        matchedFillResults.left.takerAssetFilledAmount = leftTakerAssetAmountRemaining;\n        matchedFillResults.right.makerAssetFilledAmount = rightMakerAssetAmountRemaining;\n        matchedFillResults.right.takerAssetFilledAmount = rightTakerAssetAmountRemaining;\n\n        return matchedFillResults;\n    }\n\n    /// @dev Calculates the fill results for the maker and taker in the order matching and writes the results\n    ///      to the fillResults that are being collected on the order.\n    /// @param leftOrder The left order that is being maximally filled. All of the information about fill amounts\n    ///                  can be derived from this order and the right asset remaining fields.\n    /// @param rightMakerAssetAmountRemaining The amount of the right maker asset that is remaining to be filled.\n    /// @param rightTakerAssetAmountRemaining The amount of the right taker asset that is remaining to be filled.\n    /// @return MatchFillResults struct that does not include fees paid or spreads taken.\n    function _calculateCompleteRightFill(\n        LibOrder.Order memory leftOrder,\n        uint256 rightMakerAssetAmountRemaining,\n        uint256 rightTakerAssetAmountRemaining\n    )\n        private\n        pure\n        returns (MatchedFillResults memory matchedFillResults)\n    {\n        matchedFillResults.right.makerAssetFilledAmount = rightMakerAssetAmountRemaining;\n        matchedFillResults.right.takerAssetFilledAmount = rightTakerAssetAmountRemaining;\n        matchedFillResults.left.takerAssetFilledAmount = rightMakerAssetAmountRemaining;\n        // Round down to ensure the left maker's exchange rate does not exceed the price specified by the order.\n        // We favor the left maker when the exchange rate must be rounded and the profit is being paid in the\n        // left maker asset.\n        matchedFillResults.left.makerAssetFilledAmount = LibMath.safeGetPartialAmountFloor(\n            leftOrder.makerAssetAmount,\n            leftOrder.takerAssetAmount,\n            rightMakerAssetAmountRemaining\n        );\n\n        return matchedFillResults;\n    }\n}\n"
    },
    "@0x/contracts-utils/contracts/src/LibEIP712.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\nlibrary LibEIP712 {\n\n    // Hash of the EIP712 Domain Separator Schema\n    // keccak256(abi.encodePacked(\n    //     \"EIP712Domain(\",\n    //     \"string name,\",\n    //     \"string version,\",\n    //     \"uint256 chainId,\",\n    //     \"address verifyingContract\",\n    //     \")\"\n    // ))\n    bytes32 constant internal _EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\n\n    /// @dev Calculates a EIP712 domain separator.\n    /// @param name The EIP712 domain name.\n    /// @param version The EIP712 domain version.\n    /// @param verifyingContract The EIP712 verifying contract.\n    /// @return EIP712 domain separator.\n    function hashEIP712Domain(\n        string memory name,\n        string memory version,\n        uint256 chainId,\n        address verifyingContract\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        bytes32 schemaHash = _EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH;\n\n        // Assembly for more efficient computing:\n        // keccak256(abi.encodePacked(\n        //     _EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH,\n        //     keccak256(bytes(name)),\n        //     keccak256(bytes(version)),\n        //     chainId,\n        //     uint256(verifyingContract)\n        // ))\n\n        assembly {\n            // Calculate hashes of dynamic data\n            let nameHash := keccak256(add(name, 32), mload(name))\n            let versionHash := keccak256(add(version, 32), mload(version))\n\n            // Load free memory pointer\n            let memPtr := mload(64)\n\n            // Store params in memory\n            mstore(memPtr, schemaHash)\n            mstore(add(memPtr, 32), nameHash)\n            mstore(add(memPtr, 64), versionHash)\n            mstore(add(memPtr, 96), chainId)\n            mstore(add(memPtr, 128), verifyingContract)\n\n            // Compute hash\n            result := keccak256(memPtr, 160)\n        }\n        return result;\n    }\n\n    /// @dev Calculates EIP712 encoding for a hash struct with a given domain hash.\n    /// @param eip712DomainHash Hash of the domain domain separator data, computed\n    ///                         with getDomainHash().\n    /// @param hashStruct The EIP712 hash struct.\n    /// @return EIP712 hash applied to the given EIP712 Domain.\n    function hashEIP712Message(bytes32 eip712DomainHash, bytes32 hashStruct)\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        // Assembly for more efficient computing:\n        // keccak256(abi.encodePacked(\n        //     EIP191_HEADER,\n        //     EIP712_DOMAIN_HASH,\n        //     hashStruct\n        // ));\n\n        assembly {\n            // Load free memory pointer\n            let memPtr := mload(64)\n\n            mstore(memPtr, 0x1901000000000000000000000000000000000000000000000000000000000000)  // EIP191 header\n            mstore(add(memPtr, 2), eip712DomainHash)                                            // EIP712 domain hash\n            mstore(add(memPtr, 34), hashStruct)                                                 // Hash of struct\n\n            // Compute hash\n            result := keccak256(memPtr, 66)\n        }\n        return result;\n    }\n}\n"
    },
    "@0x/contracts-exchange-libs/contracts/src/LibMath.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-utils/contracts/src/LibSafeMath.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibRichErrors.sol\";\nimport \"./LibMathRichErrors.sol\";\n\n\nlibrary LibMath {\n\n    using LibSafeMath for uint256;\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target rounded down.\n    function safeGetPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorFloor(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrors.rrevert(LibMathRichErrors.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target rounded up.\n    function safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorCeil(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrors.rrevert(LibMathRichErrors.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target rounded down.\n    function getPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target rounded up.\n    function getPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return Rounding error is present.\n    function isRoundingErrorFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrors.rrevert(LibMathRichErrors.DivisionByZeroError());\n        }\n\n        // The absolute rounding error is the difference between the rounded\n        // value and the ideal value. The relative rounding error is the\n        // absolute rounding error divided by the absolute value of the\n        // ideal value. This is undefined when the ideal value is zero.\n        //\n        // The ideal value is `numerator * target / denominator`.\n        // Let's call `numerator * target % denominator` the remainder.\n        // The absolute error is `remainder / denominator`.\n        //\n        // When the ideal value is zero, we require the absolute error to\n        // be zero. Fortunately, this is always the case. The ideal value is\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\n        // remainder and absolute error are also zero.\n        if (target == 0 || numerator == 0) {\n            return false;\n        }\n\n        // Otherwise, we want the relative rounding error to be strictly\n        // less than 0.1%.\n        // The relative error is `remainder / (numerator * target)`.\n        // We want the relative error less than 1 / 1000:\n        //        remainder / (numerator * denominator)  <  1 / 1000\n        // or equivalently:\n        //        1000 * remainder  <  numerator * target\n        // so we have a rounding error iff:\n        //        1000 * remainder  >=  numerator * target\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return Rounding error is present.\n    function isRoundingErrorCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrors.rrevert(LibMathRichErrors.DivisionByZeroError());\n        }\n\n        // See the comments in `isRoundingError`.\n        if (target == 0 || numerator == 0) {\n            // When either is zero, the ideal value and rounded value are zero\n            // and there is no rounding error. (Although the relative error\n            // is undefined.)\n            return false;\n        }\n        // Compute remainder as before\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        remainder = denominator.safeSub(remainder) % denominator;\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n}\n"
    },
    "@0x/contracts-exchange-libs/contracts/src/LibMathRichErrors.sol": {
      "content": "pragma solidity ^0.5.9;\n\n\nlibrary LibMathRichErrors {\n\n    // bytes4(keccak256(\"DivisionByZeroError()\"))\n    bytes internal constant DIVISION_BY_ZERO_ERROR =\n        hex\"a791837c\";\n\n    // bytes4(keccak256(\"RoundingError(uint256,uint256,uint256)\"))\n    bytes4 internal constant ROUNDING_ERROR_SELECTOR =\n        0x339f3de2;\n\n    // solhint-disable func-name-mixedcase\n    function DivisionByZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return DIVISION_BY_ZERO_ERROR;\n    }\n\n    function RoundingError(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ROUNDING_ERROR_SELECTOR,\n            numerator,\n            denominator,\n            target\n        );\n    }\n}\n"
    },
    "@0x/contracts-exchange-libs/contracts/src/LibZeroExTransaction.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/LibEIP712.sol\";\n\n\nlibrary LibZeroExTransaction {\n\n    using LibZeroExTransaction for ZeroExTransaction;\n\n    // Hash for the EIP712 0x transaction schema\n    // keccak256(abi.encodePacked(\n    //    \"ZeroExTransaction(\",\n    //    \"uint256 salt,\",\n    //    \"uint256 expirationTimeSeconds,\",\n    //    \"uint256 gasPrice,\",\n    //    \"address signerAddress,\",\n    //    \"bytes data\",\n    //    \")\"\n    // ));\n    bytes32 constant internal _EIP712_ZEROEX_TRANSACTION_SCHEMA_HASH = 0xec69816980a3a3ca4554410e60253953e9ff375ba4536a98adfa15cc71541508;\n\n    struct ZeroExTransaction {\n        uint256 salt;                   // Arbitrary number to ensure uniqueness of transaction hash.\n        uint256 expirationTimeSeconds;  // Timestamp in seconds at which transaction expires.\n        uint256 gasPrice;               // gasPrice that transaction is required to be executed with.\n        address signerAddress;          // Address of transaction signer.\n        bytes data;                     // AbiV2 encoded calldata.\n    }\n\n    /// @dev Calculates the EIP712 typed data hash of a transaction with a given domain separator.\n    /// @param transaction 0x transaction structure.\n    /// @return EIP712 typed data hash of the transaction.\n    function getTypedDataHash(ZeroExTransaction memory transaction, bytes32 eip712ExchangeDomainHash)\n        internal\n        pure\n        returns (bytes32 transactionHash)\n    {\n        // Hash the transaction with the domain separator of the Exchange contract.\n        transactionHash = LibEIP712.hashEIP712Message(\n            eip712ExchangeDomainHash,\n            transaction.getStructHash()\n        );\n        return transactionHash;\n    }\n\n    /// @dev Calculates EIP712 hash of the 0x transaction struct.\n    /// @param transaction 0x transaction structure.\n    /// @return EIP712 hash of the transaction struct.\n    function getStructHash(ZeroExTransaction memory transaction)\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        bytes32 schemaHash = _EIP712_ZEROEX_TRANSACTION_SCHEMA_HASH;\n        bytes memory data = transaction.data;\n        uint256 salt = transaction.salt;\n        uint256 expirationTimeSeconds = transaction.expirationTimeSeconds;\n        uint256 gasPrice = transaction.gasPrice;\n        address signerAddress = transaction.signerAddress;\n\n        // Assembly for more efficiently computing:\n        // result = keccak256(abi.encodePacked(\n        //     schemaHash,\n        //     salt,\n        //     expirationTimeSeconds,\n        //     gasPrice,\n        //     uint256(signerAddress),\n        //     keccak256(data)\n        // ));\n\n        assembly {\n            // Compute hash of data\n            let dataHash := keccak256(add(data, 32), mload(data))\n\n            // Load free memory pointer\n            let memPtr := mload(64)\n\n            mstore(memPtr, schemaHash)                                                                // hash of schema\n            mstore(add(memPtr, 32), salt)                                                             // salt\n            mstore(add(memPtr, 64), expirationTimeSeconds)                                            // expirationTimeSeconds\n            mstore(add(memPtr, 96), gasPrice)                                                         // gasPrice\n            mstore(add(memPtr, 128), and(signerAddress, 0xffffffffffffffffffffffffffffffffffffffff))  // signerAddress\n            mstore(add(memPtr, 160), dataHash)                                                        // hash of data\n\n            // Compute hash\n            result := keccak256(memPtr, 192)\n        }\n        return result;\n    }\n}\n"
    },
    "contracts/dev-utils/contracts/src/ExternalFunctions.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.16;\npragma experimental ABIEncoderV2;\n\nimport \"./Addresses.sol\";\nimport \"./LibAssetData.sol\";\nimport \"./LibTransactionDecoder.sol\";\nimport \"./LibOrderTransferSimulation.sol\";\n\n\ncontract ExternalFunctions is\n    Addresses\n{\n\n    /// @dev Decodes the call data for an Exchange contract method call.\n    /// @param transactionData ABI-encoded calldata for an Exchange\n    ///     contract method call.\n    /// @return The name of the function called, and the parameters it was\n    ///     given.  For single-order fills and cancels, the arrays will have\n    ///     just one element.\n    function decodeZeroExTransactionData(bytes memory transactionData)\n        public\n        pure\n        returns(\n            string memory functionName,\n            LibOrder.Order[] memory orders,\n            uint256[] memory takerAssetFillAmounts,\n            bytes[] memory signatures\n        )\n    {\n        return LibTransactionDecoder.decodeZeroExTransactionData(transactionData);\n    }\n\n    /// @dev Decode AssetProxy identifier\n    /// @param assetData AssetProxy-compliant asset data describing an ERC-20, ERC-721, ERC1155, or MultiAsset asset.\n    /// @return The AssetProxy identifier\n    function decodeAssetProxyId(bytes memory assetData)\n        public\n        pure\n        returns (\n            bytes4 assetProxyId\n        )\n    {\n        return LibAssetData.decodeAssetProxyId(assetData);\n    }\n\n    /// @dev Encode ERC-20 asset data into the format described in the AssetProxy contract specification.\n    /// @param tokenAddress The address of the ERC-20 contract hosting the asset to be traded.\n    /// @return AssetProxy-compliant data describing the asset.\n    function encodeERC20AssetData(address tokenAddress)\n        public\n        pure\n        returns (bytes memory assetData)\n    {\n        return LibAssetData.encodeERC20AssetData(tokenAddress);\n    }\n\n    /// @dev Decode ERC-20 asset data from the format described in the AssetProxy contract specification.\n    /// @param assetData AssetProxy-compliant asset data describing an ERC-20 asset.\n    /// @return The AssetProxy identifier, and the address of the ERC-20\n    /// contract hosting this asset.\n    function decodeERC20AssetData(bytes memory assetData)\n        public\n        pure\n        returns (\n            bytes4 assetProxyId,\n            address tokenAddress\n        )\n    {\n        return LibAssetData.decodeERC20AssetData(assetData);\n    }\n\n    /// @dev Encode ERC-721 asset data into the format described in the AssetProxy specification.\n    /// @param tokenAddress The address of the ERC-721 contract hosting the asset to be traded.\n    /// @param tokenId The identifier of the specific asset to be traded.\n    /// @return AssetProxy-compliant asset data describing the asset.\n    function encodeERC721AssetData(address tokenAddress, uint256 tokenId)\n        public\n        pure\n        returns (bytes memory assetData)\n    {\n        return LibAssetData.encodeERC721AssetData(tokenAddress, tokenId);\n    }\n\n    /// @dev Decode ERC-721 asset data from the format described in the AssetProxy contract specification.\n    /// @param assetData AssetProxy-compliant asset data describing an ERC-721 asset.\n    /// @return The ERC-721 AssetProxy identifier, the address of the ERC-721\n    /// contract hosting this asset, and the identifier of the specific\n    /// asset to be traded.\n    function decodeERC721AssetData(bytes memory assetData)\n        public\n        pure\n        returns (\n            bytes4 assetProxyId,\n            address tokenAddress,\n            uint256 tokenId\n        )\n    {\n        return LibAssetData.decodeERC721AssetData(assetData);\n    }\n\n    /// @dev Encode ERC-1155 asset data into the format described in the AssetProxy contract specification.\n    /// @param tokenAddress The address of the ERC-1155 contract hosting the asset(s) to be traded.\n    /// @param tokenIds The identifiers of the specific assets to be traded.\n    /// @param tokenValues The amounts of each asset to be traded.\n    /// @param callbackData Data to be passed to receiving contracts when a transfer is performed.\n    /// @return AssetProxy-compliant asset data describing the set of assets.\n    function encodeERC1155AssetData(\n        address tokenAddress,\n        uint256[] memory tokenIds,\n        uint256[] memory tokenValues,\n        bytes memory callbackData\n    )\n        public\n        pure\n        returns (bytes memory assetData)\n    {\n        return LibAssetData.encodeERC1155AssetData(\n            tokenAddress,\n            tokenIds,\n            tokenValues,\n            callbackData\n        );\n    }\n\n    /// @dev Decode ERC-1155 asset data from the format described in the AssetProxy contract specification.\n    /// @param assetData AssetProxy-compliant asset data describing an ERC-1155 set of assets.\n    /// @return The ERC-1155 AssetProxy identifier, the address of the ERC-1155\n    /// contract hosting the assets, an array of the identifiers of the\n    /// assets to be traded, an array of asset amounts to be traded, and\n    /// callback data.  Each element of the arrays corresponds to the\n    /// same-indexed element of the other array.  Return values specified as\n    /// `memory` are returned as pointers to locations within the memory of\n    /// the input parameter `assetData`.\n    function decodeERC1155AssetData(bytes memory assetData)\n        public\n        pure\n        returns (\n            bytes4 assetProxyId,\n            address tokenAddress,\n            uint256[] memory tokenIds,\n            uint256[] memory tokenValues,\n            bytes memory callbackData\n        )\n    {\n        return LibAssetData.decodeERC1155AssetData(assetData);\n    }\n\n    /// @dev Encode data for multiple assets, per the AssetProxy contract specification.\n    /// @param amounts The amounts of each asset to be traded.\n    /// @param nestedAssetData AssetProxy-compliant data describing each asset to be traded.\n    /// @return AssetProxy-compliant data describing the set of assets.\n    function encodeMultiAssetData(uint256[] memory amounts, bytes[] memory nestedAssetData)\n        public\n        pure\n        returns (bytes memory assetData)\n    {\n        return LibAssetData.encodeMultiAssetData(amounts, nestedAssetData);\n    }\n\n    /// @dev Decode multi-asset data from the format described in the AssetProxy contract specification.\n    /// @param assetData AssetProxy-compliant data describing a multi-asset basket.\n    /// @return The Multi-Asset AssetProxy identifier, an array of the amounts\n    /// of the assets to be traded, and an array of the\n    /// AssetProxy-compliant data describing each asset to be traded.  Each\n    /// element of the arrays corresponds to the same-indexed element of the other array.\n    function decodeMultiAssetData(bytes memory assetData)\n        public\n        pure\n        returns (\n            bytes4 assetProxyId,\n            uint256[] memory amounts,\n            bytes[] memory nestedAssetData\n        )\n    {\n        return LibAssetData.decodeMultiAssetData(assetData);\n    }\n\n    /// @dev Encode StaticCall asset data into the format described in the AssetProxy contract specification.\n    /// @param staticCallTargetAddress Target address of StaticCall.\n    /// @param staticCallData Data that will be passed to staticCallTargetAddress in the StaticCall.\n    /// @param expectedReturnDataHash Expected Keccak-256 hash of the StaticCall return data.\n    /// @return AssetProxy-compliant asset data describing the set of assets.\n    function encodeStaticCallAssetData(\n        address staticCallTargetAddress,\n        bytes memory staticCallData,\n        bytes32 expectedReturnDataHash\n    )\n        public\n        pure\n        returns (bytes memory assetData)\n    {\n        return LibAssetData.encodeStaticCallAssetData(\n            staticCallTargetAddress,\n            staticCallData,\n            expectedReturnDataHash\n        );\n    }\n\n    /// @dev Decode StaticCall asset data from the format described in the AssetProxy contract specification.\n    /// @param assetData AssetProxy-compliant asset data describing a StaticCall asset\n    /// @return The StaticCall AssetProxy identifier, the target address of the StaticCAll, the data to be\n    /// passed to the target address, and the expected Keccak-256 hash of the static call return data.\n    function decodeStaticCallAssetData(bytes memory assetData)\n        public\n        pure\n        returns (\n            bytes4 assetProxyId,\n            address staticCallTargetAddress,\n            bytes memory staticCallData,\n            bytes32 expectedReturnDataHash\n        )\n    {\n        return LibAssetData.decodeStaticCallAssetData(assetData);\n    }\n\n    /// @dev Decode ERC20Bridge asset data from the format described in the AssetProxy contract specification.\n    /// @param assetData AssetProxy-compliant asset data describing an ERC20Bridge asset\n    /// @return The ERC20BridgeProxy identifier, the address of the ERC20 token to transfer, the address\n    /// of the bridge contract, and extra data to be passed to the bridge contract.\n    function decodeERC20BridgeAssetData(bytes memory assetData)\n        public\n        pure\n        returns (\n            bytes4 assetProxyId,\n            address tokenAddress,\n            address bridgeAddress,\n            bytes memory bridgeData\n        )\n    {\n        return LibAssetData.decodeERC20BridgeAssetData(assetData);\n    }\n\n    /// @dev Reverts if assetData is not of a valid format for its given proxy id.\n    /// @param assetData AssetProxy compliant asset data.\n    function revertIfInvalidAssetData(bytes memory assetData)\n        public\n        pure\n    {\n        return LibAssetData.revertIfInvalidAssetData(assetData);\n    }\n\n    /// @dev Simulates the maker transfers within an order and returns the index of the first failed transfer.\n    /// @param order The order to simulate transfers for.\n    /// @param takerAddress The address of the taker that will fill the order.\n    /// @param takerAssetFillAmount The amount of takerAsset that the taker wished to fill.\n    /// @return The index of the first failed transfer (or 4 if all transfers are successful).\n    function getSimulatedOrderMakerTransferResults(\n        LibOrder.Order memory order,\n        address takerAddress,\n        uint256 takerAssetFillAmount\n    )\n        public\n        returns (LibOrderTransferSimulation.OrderTransferResults orderTransferResults)\n    {\n        return LibOrderTransferSimulation.getSimulatedOrderMakerTransferResults(\n            exchangeAddress,\n            order,\n            takerAddress,\n            takerAssetFillAmount\n        );\n    }\n\n    /// @dev Simulates all of the transfers within an order and returns the index of the first failed transfer.\n    /// @param order The order to simulate transfers for.\n    /// @param takerAddress The address of the taker that will fill the order.\n    /// @param takerAssetFillAmount The amount of takerAsset that the taker wished to fill.\n    /// @return The index of the first failed transfer (or 4 if all transfers are successful).\n    function getSimulatedOrderTransferResults(\n        LibOrder.Order memory order,\n        address takerAddress,\n        uint256 takerAssetFillAmount\n    )\n        public\n        returns (LibOrderTransferSimulation.OrderTransferResults orderTransferResults)\n    {\n        return LibOrderTransferSimulation.getSimulatedOrderTransferResults(\n            exchangeAddress,\n            order,\n            takerAddress,\n            takerAssetFillAmount\n        );\n    }\n\n    /// @dev Simulates all of the transfers for each given order and returns the indices of each first failed transfer.\n    /// @param orders Array of orders to individually simulate transfers for.\n    /// @param takerAddresses Array of addresses of takers that will fill each order.\n    /// @param takerAssetFillAmounts Array of amounts of takerAsset that will be filled for each order.\n    /// @return The indices of the first failed transfer (or 4 if all transfers are successful) for each order.\n    function getSimulatedOrdersTransferResults(\n        LibOrder.Order[] memory orders,\n        address[] memory takerAddresses,\n        uint256[] memory takerAssetFillAmounts\n    )\n        public\n        returns (LibOrderTransferSimulation.OrderTransferResults[] memory orderTransferResults)\n    {\n        return LibOrderTransferSimulation.getSimulatedOrdersTransferResults(\n            exchangeAddress,\n            orders,\n            takerAddresses,\n            takerAssetFillAmounts\n        );\n    }\n}\n"
    },
    "contracts/dev-utils/contracts/src/LibAssetData.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.16;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\nimport \"@0x/contracts-asset-proxy/contracts/src/interfaces/IAssetData.sol\";\n\n\nlibrary LibAssetData {\n\n    using LibBytes for bytes;\n\n    /// @dev Decode AssetProxy identifier\n    /// @param assetData AssetProxy-compliant asset data describing an ERC-20, ERC-721, ERC1155, or MultiAsset asset.\n    /// @return The AssetProxy identifier\n    function decodeAssetProxyId(bytes memory assetData)\n        public\n        pure\n        returns (\n            bytes4 assetProxyId\n        )\n    {\n        assetProxyId = assetData.readBytes4(0);\n\n        require(\n            assetProxyId == IAssetData(address(0)).ERC20Token.selector ||\n            assetProxyId == IAssetData(address(0)).ERC721Token.selector ||\n            assetProxyId == IAssetData(address(0)).ERC1155Assets.selector ||\n            assetProxyId == IAssetData(address(0)).MultiAsset.selector ||\n            assetProxyId == IAssetData(address(0)).StaticCall.selector,\n            \"WRONG_PROXY_ID\"\n        );\n        return assetProxyId;\n    }\n\n    /// @dev Encode ERC-20 asset data into the format described in the AssetProxy contract specification.\n    /// @param tokenAddress The address of the ERC-20 contract hosting the asset to be traded.\n    /// @return AssetProxy-compliant data describing the asset.\n    function encodeERC20AssetData(address tokenAddress)\n        public\n        pure\n        returns (bytes memory assetData)\n    {\n        assetData = abi.encodeWithSelector(IAssetData(address(0)).ERC20Token.selector, tokenAddress);\n        return assetData;\n    }\n\n    /// @dev Decode ERC-20 asset data from the format described in the AssetProxy contract specification.\n    /// @param assetData AssetProxy-compliant asset data describing an ERC-20 asset.\n    /// @return The AssetProxy identifier, and the address of the ERC-20\n    /// contract hosting this asset.\n    function decodeERC20AssetData(bytes memory assetData)\n        public\n        pure\n        returns (\n            bytes4 assetProxyId,\n            address tokenAddress\n        )\n    {\n        assetProxyId = assetData.readBytes4(0);\n\n        require(\n            assetProxyId == IAssetData(address(0)).ERC20Token.selector,\n            \"WRONG_PROXY_ID\"\n        );\n\n        tokenAddress = assetData.readAddress(16);\n        return (assetProxyId, tokenAddress);\n    }\n\n    /// @dev Encode ERC-721 asset data into the format described in the AssetProxy specification.\n    /// @param tokenAddress The address of the ERC-721 contract hosting the asset to be traded.\n    /// @param tokenId The identifier of the specific asset to be traded.\n    /// @return AssetProxy-compliant asset data describing the asset.\n    function encodeERC721AssetData(address tokenAddress, uint256 tokenId)\n        public\n        pure\n        returns (bytes memory assetData)\n    {\n        assetData = abi.encodeWithSelector(\n            IAssetData(address(0)).ERC721Token.selector,\n            tokenAddress,\n            tokenId\n        );\n        return assetData;\n    }\n\n    /// @dev Decode ERC-721 asset data from the format described in the AssetProxy contract specification.\n    /// @param assetData AssetProxy-compliant asset data describing an ERC-721 asset.\n    /// @return The ERC-721 AssetProxy identifier, the address of the ERC-721\n    /// contract hosting this asset, and the identifier of the specific\n    /// asset to be traded.\n    function decodeERC721AssetData(bytes memory assetData)\n        public\n        pure\n        returns (\n            bytes4 assetProxyId,\n            address tokenAddress,\n            uint256 tokenId\n        )\n    {\n        assetProxyId = assetData.readBytes4(0);\n\n        require(\n            assetProxyId == IAssetData(address(0)).ERC721Token.selector,\n            \"WRONG_PROXY_ID\"\n        );\n\n        tokenAddress = assetData.readAddress(16);\n        tokenId = assetData.readUint256(36);\n        return (assetProxyId, tokenAddress, tokenId);\n    }\n\n    /// @dev Encode ERC-1155 asset data into the format described in the AssetProxy contract specification.\n    /// @param tokenAddress The address of the ERC-1155 contract hosting the asset(s) to be traded.\n    /// @param tokenIds The identifiers of the specific assets to be traded.\n    /// @param tokenValues The amounts of each asset to be traded.\n    /// @param callbackData Data to be passed to receiving contracts when a transfer is performed.\n    /// @return AssetProxy-compliant asset data describing the set of assets.\n    function encodeERC1155AssetData(\n        address tokenAddress,\n        uint256[] memory tokenIds,\n        uint256[] memory tokenValues,\n        bytes memory callbackData\n    )\n        public\n        pure\n        returns (bytes memory assetData)\n    {\n        assetData = abi.encodeWithSelector(\n            IAssetData(address(0)).ERC1155Assets.selector,\n            tokenAddress,\n            tokenIds,\n            tokenValues,\n            callbackData\n        );\n        return assetData;\n    }\n\n    /// @dev Decode ERC-1155 asset data from the format described in the AssetProxy contract specification.\n    /// @param assetData AssetProxy-compliant asset data describing an ERC-1155 set of assets.\n    /// @return The ERC-1155 AssetProxy identifier, the address of the ERC-1155\n    /// contract hosting the assets, an array of the identifiers of the\n    /// assets to be traded, an array of asset amounts to be traded, and\n    /// callback data.  Each element of the arrays corresponds to the\n    /// same-indexed element of the other array.  Return values specified as\n    /// `memory` are returned as pointers to locations within the memory of\n    /// the input parameter `assetData`.\n    function decodeERC1155AssetData(bytes memory assetData)\n        public\n        pure\n        returns (\n            bytes4 assetProxyId,\n            address tokenAddress,\n            uint256[] memory tokenIds,\n            uint256[] memory tokenValues,\n            bytes memory callbackData\n        )\n    {\n        assetProxyId = assetData.readBytes4(0);\n\n        require(\n            assetProxyId == IAssetData(address(0)).ERC1155Assets.selector,\n            \"WRONG_PROXY_ID\"\n        );\n\n        assembly {\n            // Skip selector and length to get to the first parameter:\n            assetData := add(assetData, 36)\n            // Read the value of the first parameter:\n            tokenAddress := mload(assetData)\n            // Point to the next parameter's data:\n            tokenIds := add(assetData, mload(add(assetData, 32)))\n            // Point to the next parameter's data:\n            tokenValues := add(assetData, mload(add(assetData, 64)))\n            // Point to the next parameter's data:\n            callbackData := add(assetData, mload(add(assetData, 96)))\n        }\n\n        return (\n            assetProxyId,\n            tokenAddress,\n            tokenIds,\n            tokenValues,\n            callbackData\n        );\n    }\n\n    /// @dev Encode data for multiple assets, per the AssetProxy contract specification.\n    /// @param amounts The amounts of each asset to be traded.\n    /// @param nestedAssetData AssetProxy-compliant data describing each asset to be traded.\n    /// @return AssetProxy-compliant data describing the set of assets.\n    function encodeMultiAssetData(uint256[] memory amounts, bytes[] memory nestedAssetData)\n        public\n        pure\n        returns (bytes memory assetData)\n    {\n        assetData = abi.encodeWithSelector(\n            IAssetData(address(0)).MultiAsset.selector,\n            amounts,\n            nestedAssetData\n        );\n        return assetData;\n    }\n\n    /// @dev Decode multi-asset data from the format described in the AssetProxy contract specification.\n    /// @param assetData AssetProxy-compliant data describing a multi-asset basket.\n    /// @return The Multi-Asset AssetProxy identifier, an array of the amounts\n    /// of the assets to be traded, and an array of the\n    /// AssetProxy-compliant data describing each asset to be traded.  Each\n    /// element of the arrays corresponds to the same-indexed element of the other array.\n    function decodeMultiAssetData(bytes memory assetData)\n        public\n        pure\n        returns (\n            bytes4 assetProxyId,\n            uint256[] memory amounts,\n            bytes[] memory nestedAssetData\n        )\n    {\n        assetProxyId = assetData.readBytes4(0);\n\n        require(\n            assetProxyId == IAssetData(address(0)).MultiAsset.selector,\n            \"WRONG_PROXY_ID\"\n        );\n\n        // solhint-disable indent\n        (amounts, nestedAssetData) = abi.decode(\n            assetData.slice(4, assetData.length),\n            (uint256[], bytes[])\n        );\n        // solhint-enable indent\n    }\n\n    /// @dev Encode StaticCall asset data into the format described in the AssetProxy contract specification.\n    /// @param staticCallTargetAddress Target address of StaticCall.\n    /// @param staticCallData Data that will be passed to staticCallTargetAddress in the StaticCall.\n    /// @param expectedReturnDataHash Expected Keccak-256 hash of the StaticCall return data.\n    /// @return AssetProxy-compliant asset data describing the set of assets.\n    function encodeStaticCallAssetData(\n        address staticCallTargetAddress,\n        bytes memory staticCallData,\n        bytes32 expectedReturnDataHash\n    )\n        public\n        pure\n        returns (bytes memory assetData)\n    {\n        assetData = abi.encodeWithSelector(\n            IAssetData(address(0)).StaticCall.selector,\n            staticCallTargetAddress,\n            staticCallData,\n            expectedReturnDataHash\n        );\n        return assetData;\n    }\n\n    /// @dev Decode StaticCall asset data from the format described in the AssetProxy contract specification.\n    /// @param assetData AssetProxy-compliant asset data describing a StaticCall asset\n    /// @return The StaticCall AssetProxy identifier, the target address of the StaticCAll, the data to be\n    /// passed to the target address, and the expected Keccak-256 hash of the static call return data.\n    function decodeStaticCallAssetData(bytes memory assetData)\n        public\n        pure\n        returns (\n            bytes4 assetProxyId,\n            address staticCallTargetAddress,\n            bytes memory staticCallData,\n            bytes32 expectedReturnDataHash\n        )\n    {\n        assetProxyId = assetData.readBytes4(0);\n\n        require(\n            assetProxyId == IAssetData(address(0)).StaticCall.selector,\n            \"WRONG_PROXY_ID\"\n        );\n\n        (staticCallTargetAddress, staticCallData, expectedReturnDataHash) = abi.decode(\n            assetData.slice(4, assetData.length),\n            (address, bytes, bytes32)\n        );\n    }\n\n    /// @dev Decode ERC20Bridge asset data from the format described in the AssetProxy contract specification.\n    /// @param assetData AssetProxy-compliant asset data describing an ERC20Bridge asset\n    /// @return The ERC20BridgeProxy identifier, the address of the ERC20 token to transfer, the address\n    /// of the bridge contract, and extra data to be passed to the bridge contract.\n    function decodeERC20BridgeAssetData(bytes memory assetData)\n        public\n        pure\n        returns (\n            bytes4 assetProxyId,\n            address tokenAddress,\n            address bridgeAddress,\n            bytes memory bridgeData\n        )\n    {\n        assetProxyId = assetData.readBytes4(0);\n\n        require(\n            assetProxyId == IAssetData(address(0)).ERC20Bridge.selector,\n            \"WRONG_PROXY_ID\"\n        );\n\n        (tokenAddress, bridgeAddress, bridgeData) = abi.decode(\n            assetData.slice(4, assetData.length),\n            (address, address, bytes)\n        );\n    }\n\n    /// @dev Reverts if assetData is not of a valid format for its given proxy id.\n    /// @param assetData AssetProxy compliant asset data.\n    function revertIfInvalidAssetData(bytes memory assetData)\n        public\n        pure\n    {\n        bytes4 assetProxyId = assetData.readBytes4(0);\n\n        if (assetProxyId == IAssetData(address(0)).ERC20Token.selector) {\n            decodeERC20AssetData(assetData);\n        } else if (assetProxyId == IAssetData(address(0)).ERC721Token.selector) {\n            decodeERC721AssetData(assetData);\n        } else if (assetProxyId == IAssetData(address(0)).ERC1155Assets.selector) {\n            decodeERC1155AssetData(assetData);\n        } else if (assetProxyId == IAssetData(address(0)).MultiAsset.selector) {\n            decodeMultiAssetData(assetData);\n        } else if (assetProxyId == IAssetData(address(0)).StaticCall.selector) {\n            decodeStaticCallAssetData(assetData);\n        } else if (assetProxyId == IAssetData(address(0)).ERC20Bridge.selector) {\n            decodeERC20BridgeAssetData(assetData);\n        } else {\n            revert(\"WRONG_PROXY_ID\");\n        }\n    }\n}\n"
    },
    "contracts/dev-utils/contracts/src/LibTransactionDecoder.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.16;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange/contracts/src/interfaces/IExchange.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\n\n\nlibrary LibTransactionDecoder {\n\n    using LibBytes for bytes;\n\n    /// @dev Decodes the call data for an Exchange contract method call.\n    /// @param transactionData ABI-encoded calldata for an Exchange\n    ///     contract method call.\n    /// @return The name of the function called, and the parameters it was\n    ///     given.  For single-order fills and cancels, the arrays will have\n    ///     just one element.\n    function decodeZeroExTransactionData(bytes memory transactionData)\n        public\n        pure\n        returns(\n            string memory functionName,\n            LibOrder.Order[] memory orders,\n            uint256[] memory takerAssetFillAmounts,\n            bytes[] memory signatures\n        )\n    {\n        bytes4 functionSelector = transactionData.readBytes4(0);\n\n        if (functionSelector == IExchange(address(0)).batchCancelOrders.selector) {\n            functionName = \"batchCancelOrders\";\n        } else if (functionSelector == IExchange(address(0)).batchFillOrders.selector) {\n            functionName = \"batchFillOrders\";\n        } else if (functionSelector == IExchange(address(0)).batchFillOrdersNoThrow.selector) {\n            functionName = \"batchFillOrdersNoThrow\";\n        } else if (functionSelector == IExchange(address(0)).batchFillOrKillOrders.selector) {\n            functionName = \"batchFillOrKillOrders\";\n        } else if (functionSelector == IExchange(address(0)).cancelOrder.selector) {\n            functionName = \"cancelOrder\";\n        } else if (functionSelector == IExchange(address(0)).fillOrder.selector) {\n            functionName = \"fillOrder\";\n        } else if (functionSelector == IExchange(address(0)).fillOrKillOrder.selector) {\n            functionName = \"fillOrKillOrder\";\n        } else if (functionSelector == IExchange(address(0)).marketBuyOrdersNoThrow.selector) {\n            functionName = \"marketBuyOrdersNoThrow\";\n        } else if (functionSelector == IExchange(address(0)).marketSellOrdersNoThrow.selector) {\n            functionName = \"marketSellOrdersNoThrow\";\n        } else if (functionSelector == IExchange(address(0)).marketBuyOrdersFillOrKill.selector) {\n            functionName = \"marketBuyOrdersFillOrKill\";\n        } else if (functionSelector == IExchange(address(0)).marketSellOrdersFillOrKill.selector) {\n            functionName = \"marketSellOrdersFillOrKill\";\n        } else if (functionSelector == IExchange(address(0)).matchOrders.selector) {\n            functionName = \"matchOrders\";\n        } else if (\n            functionSelector == IExchange(address(0)).cancelOrdersUpTo.selector ||\n            functionSelector == IExchange(address(0)).executeTransaction.selector\n        ) {\n            revert(\"UNIMPLEMENTED\");\n        } else {\n            revert(\"UNKNOWN_FUNCTION_SELECTOR\");\n        }\n\n        if (functionSelector == IExchange(address(0)).batchCancelOrders.selector) {\n            // solhint-disable-next-line indent\n            orders = abi.decode(transactionData.slice(4, transactionData.length), (LibOrder.Order[]));\n            takerAssetFillAmounts = new uint256[](0);\n            signatures = new bytes[](0);\n        } else if (\n            functionSelector == IExchange(address(0)).batchFillOrKillOrders.selector ||\n            functionSelector == IExchange(address(0)).batchFillOrders.selector ||\n            functionSelector == IExchange(address(0)).batchFillOrdersNoThrow.selector\n        ) {\n            (orders, takerAssetFillAmounts, signatures) = _makeReturnValuesForBatchFill(transactionData);\n        } else if (functionSelector == IExchange(address(0)).cancelOrder.selector) {\n            orders = new LibOrder.Order[](1);\n            orders[0] = abi.decode(transactionData.slice(4, transactionData.length), (LibOrder.Order));\n            takerAssetFillAmounts = new uint256[](0);\n            signatures = new bytes[](0);\n        } else if (\n            functionSelector == IExchange(address(0)).fillOrKillOrder.selector ||\n            functionSelector == IExchange(address(0)).fillOrder.selector\n        ) {\n            (orders, takerAssetFillAmounts, signatures) = _makeReturnValuesForSingleOrderFill(transactionData);\n        } else if (\n            functionSelector == IExchange(address(0)).marketBuyOrdersNoThrow.selector ||\n            functionSelector == IExchange(address(0)).marketSellOrdersNoThrow.selector ||\n            functionSelector == IExchange(address(0)).marketBuyOrdersFillOrKill.selector ||\n            functionSelector == IExchange(address(0)).marketSellOrdersFillOrKill.selector\n        ) {\n            (orders, takerAssetFillAmounts, signatures) = _makeReturnValuesForMarketFill(transactionData);\n        } else if (functionSelector == IExchange(address(0)).matchOrders.selector) {\n            (\n                LibOrder.Order memory leftOrder,\n                LibOrder.Order memory rightOrder,\n                bytes memory leftSignature,\n                bytes memory rightSignature\n            ) = abi.decode(\n                transactionData.slice(4, transactionData.length),\n                (LibOrder.Order, LibOrder.Order, bytes, bytes)\n            );\n\n            orders = new LibOrder.Order[](2);\n            orders[0] = leftOrder;\n            orders[1] = rightOrder;\n\n            takerAssetFillAmounts = new uint256[](2);\n            takerAssetFillAmounts[0] = leftOrder.takerAssetAmount;\n            takerAssetFillAmounts[1] = rightOrder.takerAssetAmount;\n\n            signatures = new bytes[](2);\n            signatures[0] = leftSignature;\n            signatures[1] = rightSignature;\n        }\n    }\n\n    function _makeReturnValuesForSingleOrderFill(bytes memory transactionData)\n        private\n        pure\n        returns(\n            LibOrder.Order[] memory orders,\n            uint256[] memory takerAssetFillAmounts,\n            bytes[] memory signatures\n        )\n    {\n        orders = new LibOrder.Order[](1);\n        takerAssetFillAmounts = new uint256[](1);\n        signatures = new bytes[](1);\n        // solhint-disable-next-line indent\n        (orders[0], takerAssetFillAmounts[0], signatures[0]) = abi.decode(\n            transactionData.slice(4, transactionData.length),\n            (LibOrder.Order, uint256, bytes)\n        );\n    }\n\n    function _makeReturnValuesForBatchFill(bytes memory transactionData)\n        private\n        pure\n        returns(\n            LibOrder.Order[] memory orders,\n            uint256[] memory takerAssetFillAmounts,\n            bytes[] memory signatures\n        )\n    {\n        // solhint-disable-next-line indent\n        (orders, takerAssetFillAmounts, signatures) = abi.decode(\n            transactionData.slice(4, transactionData.length),\n            // solhint-disable-next-line indent\n            (LibOrder.Order[], uint256[], bytes[])\n        );\n    }\n\n    function _makeReturnValuesForMarketFill(bytes memory transactionData)\n        private\n        pure\n        returns(\n            LibOrder.Order[] memory orders,\n            uint256[] memory takerAssetFillAmounts,\n            bytes[] memory signatures\n        )\n    {\n        takerAssetFillAmounts = new uint256[](1);\n        // solhint-disable-next-line indent\n        (orders, takerAssetFillAmounts[0], signatures) = abi.decode(\n            transactionData.slice(4, transactionData.length),\n            // solhint-disable-next-line indent\n            (LibOrder.Order[], uint256, bytes[])\n        );\n    }\n}\n"
    },
    "contracts/dev-utils/contracts/src/LibOrderTransferSimulation.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.16;\npragma experimental ABIEncoderV2;\n\n\nimport \"@0x/contracts-exchange/contracts/src/interfaces/IExchange.sol\";\nimport \"@0x/contracts-exchange/contracts/src/libs/LibExchangeRichErrorDecoder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibExchangeRichErrors.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\n\n\nlibrary LibOrderTransferSimulation {\n    using LibBytes for bytes;\n\n    enum OrderTransferResults {\n        TakerAssetDataFailed,     // Transfer of takerAsset failed\n        MakerAssetDataFailed,     // Transfer of makerAsset failed\n        TakerFeeAssetDataFailed,  // Transfer of takerFeeAsset failed\n        MakerFeeAssetDataFailed,  // Transfer of makerFeeAsset failed\n        TransfersSuccessful       // All transfers in the order were successful\n    }\n\n    // NOTE(jalextowle): This is a random address that we use to avoid issues that addresses like `address(1)`\n    // may cause later.\n    address constant internal UNUSED_ADDRESS = address(0x377f698C4c287018D09b516F415317aEC5919332);\n\n    // keccak256(abi.encodeWithSignature(\"Error(string)\", \"TRANSFERS_SUCCESSFUL\"));\n    bytes32 constant internal _TRANSFERS_SUCCESSFUL_RESULT_HASH = 0xf43f26ea5a94b478394a975e856464913dc1a8a1ca70939d974aa7c238aa0ce0;\n\n    /// @dev Simulates the maker transfers within an order and returns the index of the first failed transfer.\n    /// @param order The order to simulate transfers for.\n    /// @param takerAddress The address of the taker that will fill the order.\n    /// @param takerAssetFillAmount The amount of takerAsset that the taker wished to fill.\n    /// @return The index of the first failed transfer (or 4 if all transfers are successful).\n    function getSimulatedOrderMakerTransferResults(\n        address exchange,\n        LibOrder.Order memory order,\n        address takerAddress,\n        uint256 takerAssetFillAmount\n    )\n        public\n        returns (OrderTransferResults orderTransferResults)\n    {\n        LibFillResults.FillResults memory fillResults = LibFillResults.calculateFillResults(\n            order,\n            takerAssetFillAmount,\n            IExchange(exchange).protocolFeeMultiplier(),\n            tx.gasprice\n        );\n\n        bytes[] memory assetData = new bytes[](2);\n        address[] memory fromAddresses = new address[](2);\n        address[] memory toAddresses = new address[](2);\n        uint256[] memory amounts = new uint256[](2);\n\n        // Transfer `makerAsset` from maker to taker\n        assetData[0] = order.makerAssetData;\n        fromAddresses[0] = order.makerAddress;\n        toAddresses[0] = takerAddress == address(0) ? UNUSED_ADDRESS : takerAddress;\n        amounts[0] = fillResults.makerAssetFilledAmount;\n\n        // Transfer `makerFeeAsset` from maker to feeRecipient\n        assetData[1] = order.makerFeeAssetData;\n        fromAddresses[1] = order.makerAddress;\n        toAddresses[1] = order.feeRecipientAddress == address(0) ? UNUSED_ADDRESS : order.feeRecipientAddress;\n        amounts[1] = fillResults.makerFeePaid;\n\n        return _simulateTransferFromCalls(\n            exchange,\n            assetData,\n            fromAddresses,\n            toAddresses,\n            amounts\n        );\n    }\n\n    /// @dev Simulates all of the transfers within an order and returns the index of the first failed transfer.\n    /// @param order The order to simulate transfers for.\n    /// @param takerAddress The address of the taker that will fill the order.\n    /// @param takerAssetFillAmount The amount of takerAsset that the taker wished to fill.\n    /// @return The index of the first failed transfer (or 4 if all transfers are successful).\n    function getSimulatedOrderTransferResults(\n        address exchange,\n        LibOrder.Order memory order,\n        address takerAddress,\n        uint256 takerAssetFillAmount\n    )\n        public\n        returns (OrderTransferResults orderTransferResults)\n    {\n        LibFillResults.FillResults memory fillResults = LibFillResults.calculateFillResults(\n            order,\n            takerAssetFillAmount,\n            IExchange(exchange).protocolFeeMultiplier(),\n            tx.gasprice\n        );\n\n        // Create input arrays\n        bytes[] memory assetData = new bytes[](4);\n        address[] memory fromAddresses = new address[](4);\n        address[] memory toAddresses = new address[](4);\n        uint256[] memory amounts = new uint256[](4);\n\n        // Transfer `takerAsset` from taker to maker\n        assetData[0] = order.takerAssetData;\n        fromAddresses[0] = takerAddress;\n        toAddresses[0] = order.makerAddress;\n        amounts[0] = takerAssetFillAmount;\n\n        // Transfer `makerAsset` from maker to taker\n        assetData[1] = order.makerAssetData;\n        fromAddresses[1] = order.makerAddress;\n        toAddresses[1] = takerAddress == address(0) ? UNUSED_ADDRESS : takerAddress;\n        amounts[1] = fillResults.makerAssetFilledAmount;\n\n        // Transfer `takerFeeAsset` from taker to feeRecipient\n        assetData[2] = order.takerFeeAssetData;\n        fromAddresses[2] = takerAddress;\n        toAddresses[2] = order.feeRecipientAddress == address(0) ? UNUSED_ADDRESS : order.feeRecipientAddress;\n        amounts[2] = fillResults.takerFeePaid;\n\n        // Transfer `makerFeeAsset` from maker to feeRecipient\n        assetData[3] = order.makerFeeAssetData;\n        fromAddresses[3] = order.makerAddress;\n        toAddresses[3] = order.feeRecipientAddress == address(0) ? UNUSED_ADDRESS : order.feeRecipientAddress;\n        amounts[3] = fillResults.makerFeePaid;\n\n        return _simulateTransferFromCalls(\n            exchange,\n            assetData,\n            fromAddresses,\n            toAddresses,\n            amounts\n        );\n    }\n\n    /// @dev Simulates all of the transfers for each given order and returns the indices of each first failed transfer.\n    /// @param orders Array of orders to individually simulate transfers for.\n    /// @param takerAddresses Array of addresses of takers that will fill each order.\n    /// @param takerAssetFillAmounts Array of amounts of takerAsset that will be filled for each order.\n    /// @return The indices of the first failed transfer (or 4 if all transfers are successful) for each order.\n    function getSimulatedOrdersTransferResults(\n        address exchange,\n        LibOrder.Order[] memory orders,\n        address[] memory takerAddresses,\n        uint256[] memory takerAssetFillAmounts\n    )\n        public\n        returns (OrderTransferResults[] memory orderTransferResults)\n    {\n        uint256 length = orders.length;\n        orderTransferResults = new OrderTransferResults[](length);\n        for (uint256 i = 0; i != length; i++) {\n            orderTransferResults[i] = getSimulatedOrderTransferResults(\n                exchange,\n                orders[i],\n                takerAddresses[i],\n                takerAssetFillAmounts[i]\n            );\n        }\n        return orderTransferResults;\n    }\n\n    /// @dev Makes the simulation call with information about the transfers and processes\n    ///      the returndata.\n    /// @param assetData The assetdata to use to make transfers.\n    /// @param fromAddresses The addresses to transfer funds.\n    /// @param toAddresses The addresses that will receive funds\n    /// @param amounts The amounts involved in the transfer.\n    function _simulateTransferFromCalls(\n        address exchange,\n        bytes[] memory assetData,\n        address[] memory fromAddresses,\n        address[] memory toAddresses,\n        uint256[] memory amounts\n    )\n        private\n        returns (OrderTransferResults orderTransferResults)\n    {\n        // Encode data for `simulateDispatchTransferFromCalls(assetData, fromAddresses, toAddresses, amounts)`\n        bytes memory simulateDispatchTransferFromCallsData = abi.encodeWithSelector(\n            IExchange(address(0)).simulateDispatchTransferFromCalls.selector,\n            assetData,\n            fromAddresses,\n            toAddresses,\n            amounts\n        );\n\n        // Perform call and catch revert\n        (, bytes memory returnData) = address(exchange).call(simulateDispatchTransferFromCallsData);\n\n        bytes4 selector = returnData.readBytes4(0);\n        if (selector == LibExchangeRichErrors.AssetProxyDispatchErrorSelector()) {\n            // Decode AssetProxyDispatchError and return index of failed transfer\n            (, bytes32 failedTransferIndex,) = LibExchangeRichErrorDecoder.decodeAssetProxyDispatchError(returnData);\n            return OrderTransferResults(uint8(uint256(failedTransferIndex)));\n        } else if (selector == LibExchangeRichErrors.AssetProxyTransferErrorSelector()) {\n            // Decode AssetProxyTransferError and return index of failed transfer\n            (bytes32 failedTransferIndex, ,) = LibExchangeRichErrorDecoder.decodeAssetProxyTransferError(returnData);\n            return OrderTransferResults(uint8(uint256(failedTransferIndex)));\n        } else if (keccak256(returnData) == _TRANSFERS_SUCCESSFUL_RESULT_HASH) {\n            // All transfers were successful\n            return OrderTransferResults.TransfersSuccessful;\n        } else {\n            revert(\"UNKNOWN_RETURN_DATA\");\n        }\n    }\n}\n"
    },
    "@0x/contracts-exchange/contracts/src/libs/LibExchangeRichErrorDecoder.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibExchangeRichErrors.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\n\n\nlibrary LibExchangeRichErrorDecoder {\n\n    using LibBytes for bytes;\n\n    /// @dev Decompose an ABI-encoded SignatureError.\n    /// @param encoded ABI-encoded revert error.\n    /// @return errorCode The error code.\n    /// @return signerAddress The expected signer of the hash.\n    /// @return signature The full signature.\n    function decodeSignatureError(bytes memory encoded)\n        internal\n        pure\n        returns (\n            LibExchangeRichErrors.SignatureErrorCodes errorCode,\n            bytes32 hash,\n            address signerAddress,\n            bytes memory signature\n        )\n    {\n        _assertSelectorBytes(encoded, LibExchangeRichErrors.SignatureErrorSelector());\n        uint8 _errorCode;\n        (_errorCode, hash, signerAddress, signature) = abi.decode(\n            encoded.sliceDestructive(4, encoded.length),\n            (uint8, bytes32, address, bytes)\n        );\n        errorCode = LibExchangeRichErrors.SignatureErrorCodes(_errorCode);\n    }\n\n    /// @dev Decompose an ABI-encoded SignatureValidatorError.\n    /// @param encoded ABI-encoded revert error.\n    /// @return signerAddress The expected signer of the hash.\n    /// @return signature The full signature bytes.\n    /// @return errorData The revert data thrown by the validator contract.\n    function decodeEIP1271SignatureError(bytes memory encoded)\n        internal\n        pure\n        returns (\n            address verifyingContractAddress,\n            bytes memory data,\n            bytes memory signature,\n            bytes memory errorData\n        )\n    {\n        _assertSelectorBytes(encoded, LibExchangeRichErrors.EIP1271SignatureErrorSelector());\n        (verifyingContractAddress, data, signature, errorData) = abi.decode(\n            encoded.sliceDestructive(4, encoded.length),\n            (address, bytes, bytes, bytes)\n        );\n    }\n\n    /// @dev Decompose an ABI-encoded SignatureValidatorNotApprovedError.\n    /// @param encoded ABI-encoded revert error.\n    /// @return signerAddress The expected signer of the hash.\n    /// @return validatorAddress The expected validator.\n    function decodeSignatureValidatorNotApprovedError(bytes memory encoded)\n        internal\n        pure\n        returns (\n            address signerAddress,\n            address validatorAddress\n        )\n    {\n        _assertSelectorBytes(encoded, LibExchangeRichErrors.SignatureValidatorNotApprovedErrorSelector());\n        (signerAddress, validatorAddress) = abi.decode(\n            encoded.sliceDestructive(4, encoded.length),\n            (address, address)\n        );\n    }\n\n    /// @dev Decompose an ABI-encoded SignatureWalletError.\n    /// @param encoded ABI-encoded revert error.\n    /// @return errorCode The error code.\n    /// @return signerAddress The expected signer of the hash.\n    /// @return signature The full signature bytes.\n    /// @return errorData The revert data thrown by the validator contract.\n    function decodeSignatureWalletError(bytes memory encoded)\n        internal\n        pure\n        returns (\n            bytes32 hash,\n            address signerAddress,\n            bytes memory signature,\n            bytes memory errorData\n        )\n    {\n        _assertSelectorBytes(encoded, LibExchangeRichErrors.SignatureWalletErrorSelector());\n        (hash, signerAddress, signature, errorData) = abi.decode(\n            encoded.sliceDestructive(4, encoded.length),\n            (bytes32, address, bytes, bytes)\n        );\n    }\n\n    /// @dev Decompose an ABI-encoded OrderStatusError.\n    /// @param encoded ABI-encoded revert error.\n    /// @return orderHash The order hash.\n    /// @return orderStatus The order status.\n    function decodeOrderStatusError(bytes memory encoded)\n        internal\n        pure\n        returns (\n            bytes32 orderHash,\n            LibOrder.OrderStatus orderStatus\n        )\n    {\n        _assertSelectorBytes(encoded, LibExchangeRichErrors.OrderStatusErrorSelector());\n        uint8 _orderStatus;\n        (orderHash, _orderStatus) = abi.decode(\n            encoded.sliceDestructive(4, encoded.length),\n            (bytes32, uint8)\n        );\n        orderStatus = LibOrder.OrderStatus(_orderStatus);\n    }\n\n    /// @dev Decompose an ABI-encoded OrderStatusError.\n    /// @param encoded ABI-encoded revert error.\n    /// @return errorCode Error code that corresponds to invalid maker, taker, or sender.\n    /// @return orderHash The order hash.\n    /// @return contextAddress The maker, taker, or sender address\n    function decodeExchangeInvalidContextError(bytes memory encoded)\n        internal\n        pure\n        returns (\n            LibExchangeRichErrors.ExchangeContextErrorCodes errorCode,\n            bytes32 orderHash,\n            address contextAddress\n        )\n    {\n        _assertSelectorBytes(encoded, LibExchangeRichErrors.ExchangeInvalidContextErrorSelector());\n        uint8 _errorCode;\n        (_errorCode, orderHash, contextAddress) = abi.decode(\n            encoded.sliceDestructive(4, encoded.length),\n            (uint8, bytes32, address)\n        );\n        errorCode = LibExchangeRichErrors.ExchangeContextErrorCodes(_errorCode);\n    }\n\n    /// @dev Decompose an ABI-encoded FillError.\n    /// @param encoded ABI-encoded revert error.\n    /// @return errorCode The error code.\n    /// @return orderHash The order hash.\n    function decodeFillError(bytes memory encoded)\n        internal\n        pure\n        returns (\n            LibExchangeRichErrors.FillErrorCodes errorCode,\n            bytes32 orderHash\n        )\n    {\n        _assertSelectorBytes(encoded, LibExchangeRichErrors.FillErrorSelector());\n        uint8 _errorCode;\n        (_errorCode, orderHash) = abi.decode(\n            encoded.sliceDestructive(4, encoded.length),\n            (uint8, bytes32)\n        );\n        errorCode = LibExchangeRichErrors.FillErrorCodes(_errorCode);\n    }\n\n    /// @dev Decompose an ABI-encoded OrderEpochError.\n    /// @param encoded ABI-encoded revert error.\n    /// @return makerAddress The order maker.\n    /// @return orderSenderAddress The order sender.\n    /// @return currentEpoch The current epoch for the maker.\n    function decodeOrderEpochError(bytes memory encoded)\n        internal\n        pure\n        returns (\n            address makerAddress,\n            address orderSenderAddress,\n            uint256 currentEpoch\n        )\n    {\n        _assertSelectorBytes(encoded, LibExchangeRichErrors.OrderEpochErrorSelector());\n        (makerAddress, orderSenderAddress, currentEpoch) = abi.decode(\n            encoded.sliceDestructive(4, encoded.length),\n            (address, address, uint256)\n        );\n    }\n\n    /// @dev Decompose an ABI-encoded AssetProxyExistsError.\n    /// @param encoded ABI-encoded revert error.\n    /// @return assetProxyId Id of asset proxy.\n    /// @return assetProxyAddress The address of the asset proxy.\n    function decodeAssetProxyExistsError(bytes memory encoded)\n        internal\n        pure\n        returns (\n            bytes4 assetProxyId, address assetProxyAddress)\n    {\n        _assertSelectorBytes(encoded, LibExchangeRichErrors.AssetProxyExistsErrorSelector());\n        (assetProxyId, assetProxyAddress) = abi.decode(\n            encoded.sliceDestructive(4, encoded.length),\n            (bytes4, address)\n        );\n    }\n\n    /// @dev Decompose an ABI-encoded AssetProxyDispatchError.\n    /// @param encoded ABI-encoded revert error.\n    /// @return errorCode The error code.\n    /// @return orderHash Hash of the order being dispatched.\n    /// @return assetData Asset data of the order being dispatched.\n    function decodeAssetProxyDispatchError(bytes memory encoded)\n        internal\n        pure\n        returns (\n            LibExchangeRichErrors.AssetProxyDispatchErrorCodes errorCode,\n            bytes32 orderHash,\n            bytes memory assetData\n        )\n    {\n        _assertSelectorBytes(encoded, LibExchangeRichErrors.AssetProxyDispatchErrorSelector());\n        uint8 _errorCode;\n        (_errorCode, orderHash, assetData) = abi.decode(\n            encoded.sliceDestructive(4, encoded.length),\n            (uint8, bytes32, bytes)\n        );\n        errorCode = LibExchangeRichErrors.AssetProxyDispatchErrorCodes(_errorCode);\n    }\n\n    /// @dev Decompose an ABI-encoded AssetProxyTransferError.\n    /// @param encoded ABI-encoded revert error.\n    /// @return orderHash Hash of the order being dispatched.\n    /// @return assetData Asset data of the order being dispatched.\n    /// @return errorData ABI-encoded revert data from the asset proxy.\n    function decodeAssetProxyTransferError(bytes memory encoded)\n        internal\n        pure\n        returns (\n            bytes32 orderHash,\n            bytes memory assetData,\n            bytes memory errorData\n        )\n    {\n        _assertSelectorBytes(encoded, LibExchangeRichErrors.AssetProxyTransferErrorSelector());\n        (orderHash, assetData, errorData) = abi.decode(\n            encoded.sliceDestructive(4, encoded.length),\n            (bytes32, bytes, bytes)\n        );\n    }\n\n    /// @dev Decompose an ABI-encoded NegativeSpreadError.\n    /// @param encoded ABI-encoded revert error.\n    /// @return leftOrderHash Hash of the left order being matched.\n    /// @return rightOrderHash Hash of the right order being matched.\n    function decodeNegativeSpreadError(bytes memory encoded)\n        internal\n        pure\n        returns (\n            bytes32 leftOrderHash,\n            bytes32 rightOrderHash\n        )\n    {\n        _assertSelectorBytes(encoded, LibExchangeRichErrors.NegativeSpreadErrorSelector());\n        (leftOrderHash, rightOrderHash) = abi.decode(\n            encoded.sliceDestructive(4, encoded.length),\n            (bytes32, bytes32)\n        );\n    }\n\n    /// @dev Decompose an ABI-encoded TransactionError.\n    /// @param encoded ABI-encoded revert error.\n    /// @return errorCode The error code.\n    /// @return transactionHash Hash of the transaction.\n    function decodeTransactionError(bytes memory encoded)\n        internal\n        pure\n        returns (\n            LibExchangeRichErrors.TransactionErrorCodes errorCode,\n            bytes32 transactionHash\n        )\n    {\n        _assertSelectorBytes(encoded, LibExchangeRichErrors.TransactionErrorSelector());\n        uint8 _errorCode;\n        (_errorCode, transactionHash) = abi.decode(\n            encoded.sliceDestructive(4, encoded.length),\n            (uint8, bytes32)\n        );\n        errorCode = LibExchangeRichErrors.TransactionErrorCodes(_errorCode);\n    }\n\n    /// @dev Decompose an ABI-encoded TransactionExecutionError.\n    /// @param encoded ABI-encoded revert error.\n    /// @return transactionHash Hash of the transaction.\n    /// @return errorData Error thrown by exeucteTransaction().\n    function decodeTransactionExecutionError(bytes memory encoded)\n        internal\n        pure\n        returns (\n            bytes32 transactionHash,\n            bytes memory errorData\n        )\n    {\n        _assertSelectorBytes(encoded, LibExchangeRichErrors.TransactionExecutionErrorSelector());\n        (transactionHash, errorData) = abi.decode(\n            encoded.sliceDestructive(4, encoded.length),\n            (bytes32, bytes)\n        );\n    }\n\n    /// @dev Decompose an ABI-encoded IncompleteFillError.\n    /// @param encoded ABI-encoded revert error.\n    /// @return orderHash Hash of the order being filled.\n    function decodeIncompleteFillError(bytes memory encoded)\n        internal\n        pure\n        returns (\n            LibExchangeRichErrors.IncompleteFillErrorCode errorCode,\n            uint256 expectedAssetFillAmount,\n            uint256 actualAssetFillAmount\n        )\n    {\n        _assertSelectorBytes(encoded, LibExchangeRichErrors.IncompleteFillErrorSelector());\n        uint8 _errorCode;\n        (_errorCode, expectedAssetFillAmount, actualAssetFillAmount) = abi.decode(\n            encoded.sliceDestructive(4, encoded.length),\n            (uint8, uint256, uint256)\n        );\n        errorCode = LibExchangeRichErrors.IncompleteFillErrorCode(_errorCode);\n    }\n\n    /// @dev Revert if the leading 4 bytes of `encoded` is not `selector`.\n    function _assertSelectorBytes(bytes memory encoded, bytes4 selector)\n        private\n        pure\n    {\n        bytes4 actualSelector = LibBytes.readBytes4(encoded, 0);\n        require(\n            actualSelector == selector,\n            \"BAD_SELECTOR\"\n        );\n    }\n}\n"
    },
    "@0x/contracts-exchange-libs/contracts/src/LibExchangeRichErrors.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-utils/contracts/src/LibRichErrors.sol\";\nimport \"./LibOrder.sol\";\n\n\nlibrary LibExchangeRichErrors {\n\n    enum AssetProxyDispatchErrorCodes {\n        INVALID_ASSET_DATA_LENGTH,\n        UNKNOWN_ASSET_PROXY\n    }\n\n    enum BatchMatchOrdersErrorCodes {\n        ZERO_LEFT_ORDERS,\n        ZERO_RIGHT_ORDERS,\n        INVALID_LENGTH_LEFT_SIGNATURES,\n        INVALID_LENGTH_RIGHT_SIGNATURES\n    }\n\n    enum ExchangeContextErrorCodes {\n        INVALID_MAKER,\n        INVALID_TAKER,\n        INVALID_SENDER\n    }\n\n    enum FillErrorCodes {\n        INVALID_TAKER_AMOUNT,\n        TAKER_OVERPAY,\n        OVERFILL,\n        INVALID_FILL_PRICE\n    }\n\n    enum SignatureErrorCodes {\n        BAD_ORDER_SIGNATURE,\n        BAD_TRANSACTION_SIGNATURE,\n        INVALID_LENGTH,\n        UNSUPPORTED,\n        ILLEGAL,\n        INAPPROPRIATE_SIGNATURE_TYPE,\n        INVALID_SIGNER\n    }\n\n    enum TransactionErrorCodes {\n        ALREADY_EXECUTED,\n        EXPIRED\n    }\n\n    enum IncompleteFillErrorCode {\n        INCOMPLETE_MARKET_BUY_ORDERS,\n        INCOMPLETE_MARKET_SELL_ORDERS,\n        INCOMPLETE_FILL_ORDER\n    }\n\n    // bytes4(keccak256(\"SignatureError(uint8,bytes32,address,bytes)\"))\n    bytes4 internal constant SIGNATURE_ERROR_SELECTOR =\n        0x7e5a2318;\n\n    // bytes4(keccak256(\"SignatureValidatorNotApprovedError(address,address)\"))\n    bytes4 internal constant SIGNATURE_VALIDATOR_NOT_APPROVED_ERROR_SELECTOR =\n        0xa15c0d06;\n\n    // bytes4(keccak256(\"EIP1271SignatureError(address,bytes,bytes,bytes)\"))\n    bytes4 internal constant EIP1271_SIGNATURE_ERROR_SELECTOR =\n        0x5bd0428d;\n\n    // bytes4(keccak256(\"SignatureWalletError(bytes32,address,bytes,bytes)\"))\n    bytes4 internal constant SIGNATURE_WALLET_ERROR_SELECTOR =\n        0x1b8388f7;\n\n    // bytes4(keccak256(\"OrderStatusError(bytes32,uint8)\"))\n    bytes4 internal constant ORDER_STATUS_ERROR_SELECTOR =\n        0xfdb6ca8d;\n\n    // bytes4(keccak256(\"ExchangeInvalidContextError(uint8,bytes32,address)\"))\n    bytes4 internal constant EXCHANGE_INVALID_CONTEXT_ERROR_SELECTOR =\n        0xe53c76c8;\n\n    // bytes4(keccak256(\"FillError(uint8,bytes32)\"))\n    bytes4 internal constant FILL_ERROR_SELECTOR =\n        0xe94a7ed0;\n\n    // bytes4(keccak256(\"OrderEpochError(address,address,uint256)\"))\n    bytes4 internal constant ORDER_EPOCH_ERROR_SELECTOR =\n        0x4ad31275;\n\n    // bytes4(keccak256(\"AssetProxyExistsError(bytes4,address)\"))\n    bytes4 internal constant ASSET_PROXY_EXISTS_ERROR_SELECTOR =\n        0x11c7b720;\n\n    // bytes4(keccak256(\"AssetProxyDispatchError(uint8,bytes32,bytes)\"))\n    bytes4 internal constant ASSET_PROXY_DISPATCH_ERROR_SELECTOR =\n        0x488219a6;\n\n    // bytes4(keccak256(\"AssetProxyTransferError(bytes32,bytes,bytes)\"))\n    bytes4 internal constant ASSET_PROXY_TRANSFER_ERROR_SELECTOR =\n        0x4678472b;\n\n    // bytes4(keccak256(\"NegativeSpreadError(bytes32,bytes32)\"))\n    bytes4 internal constant NEGATIVE_SPREAD_ERROR_SELECTOR =\n        0xb6555d6f;\n\n    // bytes4(keccak256(\"TransactionError(uint8,bytes32)\"))\n    bytes4 internal constant TRANSACTION_ERROR_SELECTOR =\n        0xf5985184;\n\n    // bytes4(keccak256(\"TransactionExecutionError(bytes32,bytes)\"))\n    bytes4 internal constant TRANSACTION_EXECUTION_ERROR_SELECTOR =\n        0x20d11f61;\n    \n    // bytes4(keccak256(\"TransactionGasPriceError(bytes32,uint256,uint256)\"))\n    bytes4 internal constant TRANSACTION_GAS_PRICE_ERROR_SELECTOR =\n        0xa26dac09;\n\n    // bytes4(keccak256(\"TransactionInvalidContextError(bytes32,address)\"))\n    bytes4 internal constant TRANSACTION_INVALID_CONTEXT_ERROR_SELECTOR =\n        0xdec4aedf;\n\n    // bytes4(keccak256(\"IncompleteFillError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INCOMPLETE_FILL_ERROR_SELECTOR =\n        0x18e4b141;\n\n    // bytes4(keccak256(\"BatchMatchOrdersError(uint8)\"))\n    bytes4 internal constant BATCH_MATCH_ORDERS_ERROR_SELECTOR =\n        0xd4092f4f;\n\n    // bytes4(keccak256(\"PayProtocolFeeError(bytes32,uint256,address,address,bytes)\"))\n    bytes4 internal constant PAY_PROTOCOL_FEE_ERROR_SELECTOR =\n        0x87cb1e75;\n\n    // solhint-disable func-name-mixedcase\n    function SignatureErrorSelector()\n        internal\n        pure\n        returns (bytes4)\n    {\n        return SIGNATURE_ERROR_SELECTOR;\n    }\n\n    function SignatureValidatorNotApprovedErrorSelector()\n        internal\n        pure\n        returns (bytes4)\n    {\n        return SIGNATURE_VALIDATOR_NOT_APPROVED_ERROR_SELECTOR;\n    }\n\n    function EIP1271SignatureErrorSelector()\n        internal\n        pure\n        returns (bytes4)\n    {\n        return EIP1271_SIGNATURE_ERROR_SELECTOR;\n    }\n\n    function SignatureWalletErrorSelector()\n        internal\n        pure\n        returns (bytes4)\n    {\n        return SIGNATURE_WALLET_ERROR_SELECTOR;\n    }\n\n    function OrderStatusErrorSelector()\n        internal\n        pure\n        returns (bytes4)\n    {\n        return ORDER_STATUS_ERROR_SELECTOR;\n    }\n\n    function ExchangeInvalidContextErrorSelector()\n        internal\n        pure\n        returns (bytes4)\n    {\n        return EXCHANGE_INVALID_CONTEXT_ERROR_SELECTOR;\n    }\n\n    function FillErrorSelector()\n        internal\n        pure\n        returns (bytes4)\n    {\n        return FILL_ERROR_SELECTOR;\n    }\n\n    function OrderEpochErrorSelector()\n        internal\n        pure\n        returns (bytes4)\n    {\n        return ORDER_EPOCH_ERROR_SELECTOR;\n    }\n\n    function AssetProxyExistsErrorSelector()\n        internal\n        pure\n        returns (bytes4)\n    {\n        return ASSET_PROXY_EXISTS_ERROR_SELECTOR;\n    }\n\n    function AssetProxyDispatchErrorSelector()\n        internal\n        pure\n        returns (bytes4)\n    {\n        return ASSET_PROXY_DISPATCH_ERROR_SELECTOR;\n    }\n\n    function AssetProxyTransferErrorSelector()\n        internal\n        pure\n        returns (bytes4)\n    {\n        return ASSET_PROXY_TRANSFER_ERROR_SELECTOR;\n    }\n\n    function NegativeSpreadErrorSelector()\n        internal\n        pure\n        returns (bytes4)\n    {\n        return NEGATIVE_SPREAD_ERROR_SELECTOR;\n    }\n\n    function TransactionErrorSelector()\n        internal\n        pure\n        returns (bytes4)\n    {\n        return TRANSACTION_ERROR_SELECTOR;\n    }\n\n    function TransactionExecutionErrorSelector()\n        internal\n        pure\n        returns (bytes4)\n    {\n        return TRANSACTION_EXECUTION_ERROR_SELECTOR;\n    }\n\n    function IncompleteFillErrorSelector()\n        internal\n        pure\n        returns (bytes4)\n    {\n        return INCOMPLETE_FILL_ERROR_SELECTOR;\n    }\n\n    function BatchMatchOrdersErrorSelector()\n        internal\n        pure\n        returns (bytes4)\n    {\n        return BATCH_MATCH_ORDERS_ERROR_SELECTOR;\n    }\n\n    function TransactionGasPriceErrorSelector()\n        internal\n        pure\n        returns (bytes4)\n    {\n        return TRANSACTION_GAS_PRICE_ERROR_SELECTOR;\n    }\n\n    function TransactionInvalidContextErrorSelector()\n        internal\n        pure\n        returns (bytes4)\n    {\n        return TRANSACTION_INVALID_CONTEXT_ERROR_SELECTOR;\n    }\n\n    function PayProtocolFeeErrorSelector()\n        internal\n        pure\n        returns (bytes4)\n    {\n        return PAY_PROTOCOL_FEE_ERROR_SELECTOR;\n    }\n    \n    function BatchMatchOrdersError(\n        BatchMatchOrdersErrorCodes errorCode\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            BATCH_MATCH_ORDERS_ERROR_SELECTOR,\n            errorCode\n        );\n    }\n\n    function SignatureError(\n        SignatureErrorCodes errorCode,\n        bytes32 hash,\n        address signerAddress,\n        bytes memory signature\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            SIGNATURE_ERROR_SELECTOR,\n            errorCode,\n            hash,\n            signerAddress,\n            signature\n        );\n    }\n\n    function SignatureValidatorNotApprovedError(\n        address signerAddress,\n        address validatorAddress\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            SIGNATURE_VALIDATOR_NOT_APPROVED_ERROR_SELECTOR,\n            signerAddress,\n            validatorAddress\n        );\n    }\n\n    function EIP1271SignatureError(\n        address verifyingContractAddress,\n        bytes memory data,\n        bytes memory signature,\n        bytes memory errorData\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            EIP1271_SIGNATURE_ERROR_SELECTOR,\n            verifyingContractAddress,\n            data,\n            signature,\n            errorData\n        );\n    }\n\n    function SignatureWalletError(\n        bytes32 hash,\n        address walletAddress,\n        bytes memory signature,\n        bytes memory errorData\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            SIGNATURE_WALLET_ERROR_SELECTOR,\n            hash,\n            walletAddress,\n            signature,\n            errorData\n        );\n    }\n\n    function OrderStatusError(\n        bytes32 orderHash,\n        LibOrder.OrderStatus orderStatus\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ORDER_STATUS_ERROR_SELECTOR,\n            orderHash,\n            orderStatus\n        );\n    }\n\n    function ExchangeInvalidContextError(\n        ExchangeContextErrorCodes errorCode,\n        bytes32 orderHash,\n        address contextAddress\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            EXCHANGE_INVALID_CONTEXT_ERROR_SELECTOR,\n            errorCode,\n            orderHash,\n            contextAddress\n        );\n    }\n\n    function FillError(\n        FillErrorCodes errorCode,\n        bytes32 orderHash\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            FILL_ERROR_SELECTOR,\n            errorCode,\n            orderHash\n        );\n    }\n\n    function OrderEpochError(\n        address makerAddress,\n        address orderSenderAddress,\n        uint256 currentEpoch\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ORDER_EPOCH_ERROR_SELECTOR,\n            makerAddress,\n            orderSenderAddress,\n            currentEpoch\n        );\n    }\n\n    function AssetProxyExistsError(\n        bytes4 assetProxyId,\n        address assetProxyAddress\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ASSET_PROXY_EXISTS_ERROR_SELECTOR,\n            assetProxyId,\n            assetProxyAddress\n        );\n    }\n\n    function AssetProxyDispatchError(\n        AssetProxyDispatchErrorCodes errorCode,\n        bytes32 orderHash,\n        bytes memory assetData\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ASSET_PROXY_DISPATCH_ERROR_SELECTOR,\n            errorCode,\n            orderHash,\n            assetData\n        );\n    }\n\n    function AssetProxyTransferError(\n        bytes32 orderHash,\n        bytes memory assetData,\n        bytes memory errorData\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ASSET_PROXY_TRANSFER_ERROR_SELECTOR,\n            orderHash,\n            assetData,\n            errorData\n        );\n    }\n\n    function NegativeSpreadError(\n        bytes32 leftOrderHash,\n        bytes32 rightOrderHash\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            NEGATIVE_SPREAD_ERROR_SELECTOR,\n            leftOrderHash,\n            rightOrderHash\n        );\n    }\n\n    function TransactionError(\n        TransactionErrorCodes errorCode,\n        bytes32 transactionHash\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            TRANSACTION_ERROR_SELECTOR,\n            errorCode,\n            transactionHash\n        );\n    }\n\n    function TransactionExecutionError(\n        bytes32 transactionHash,\n        bytes memory errorData\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            TRANSACTION_EXECUTION_ERROR_SELECTOR,\n            transactionHash,\n            errorData\n        );\n    }\n\n    function TransactionGasPriceError(\n        bytes32 transactionHash,\n        uint256 actualGasPrice,\n        uint256 requiredGasPrice\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            TRANSACTION_GAS_PRICE_ERROR_SELECTOR,\n            transactionHash,\n            actualGasPrice,\n            requiredGasPrice\n        );\n    }\n\n    function TransactionInvalidContextError(\n        bytes32 transactionHash,\n        address currentContextAddress\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            TRANSACTION_INVALID_CONTEXT_ERROR_SELECTOR,\n            transactionHash,\n            currentContextAddress\n        );\n    }\n\n    function IncompleteFillError(\n        IncompleteFillErrorCode errorCode,\n        uint256 expectedAssetFillAmount,\n        uint256 actualAssetFillAmount\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INCOMPLETE_FILL_ERROR_SELECTOR,\n            errorCode,\n            expectedAssetFillAmount,\n            actualAssetFillAmount\n        );\n    }\n\n    function PayProtocolFeeError(\n        bytes32 orderHash,\n        uint256 protocolFee,\n        address makerAddress,\n        address takerAddress,\n        bytes memory errorData\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            PAY_PROTOCOL_FEE_ERROR_SELECTOR,\n            orderHash,\n            protocolFee,\n            makerAddress,\n            takerAddress,\n            errorData\n        );\n    }\n}\n"
    },
    "contracts/multisig/contracts/test/ContractCallReceiver.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\n\n\ncontract ContractCallReceiver {\n\n    using LibBytes for bytes;\n\n    event ContractCall(\n        bytes4 functionSelector,\n        bytes data,\n        uint256 value\n    );\n\n    bytes4 constant internal ALWAYS_REVERT_SELECTOR = 0xF1F2F3F4;\n\n    function ()\n        external\n        payable\n    {\n        bytes4 selector = msg.data.readBytes4(0);\n        if (selector == ALWAYS_REVERT_SELECTOR) {\n            revert();\n        }\n\n        emit ContractCall(\n            selector,\n            msg.data,\n            msg.value\n        );\n    }\n}"
    },
    "contracts/multisig/contracts/src/ZeroExGovernor.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"./MultiSigWalletWithTimeLock.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibSafeMath.sol\";\n\n\ncontract ZeroExGovernor is\n    MultiSigWalletWithTimeLock\n{\n    using LibBytes for bytes;\n    using LibSafeMath for uint256;\n\n    struct TimeLock {\n        bool hasCustomTimeLock;\n        uint128 secondsTimeLocked;\n    }\n\n    event FunctionCallTimeLockRegistration(\n        bytes4 functionSelector,\n        address destination,\n        bool hasCustomTimeLock,\n        uint128 newSecondsTimeLocked\n    );\n\n    // Function selector => destination => seconds timelocked\n    mapping (bytes4 => mapping (address => TimeLock)) public functionCallTimeLocks;\n\n    /// @dev Contract constructor sets initial owners, required number of confirmations, and default time lock\n    ///      It will also register unique timelocks for each passed in function selector / destination combo.\n    /// @param _functionSelectors Array of function selectors for registered functions.\n    /// @param _destinations Array of destinations for registered function calls.\n    /// @param _functionCallTimeLockSeconds Array of seconds that each registered function call will be timelocked.\n    /// @param _owners List of initial owners.\n    /// @param _required Number of required confirmations.\n    /// @param _defaultSecondsTimeLocked Default duration in seconds needed after a transaction is confirmed to become executable.\n    constructor (\n        bytes4[] memory _functionSelectors,\n        address[] memory _destinations,\n        uint128[] memory _functionCallTimeLockSeconds,\n        address[] memory _owners,\n        uint256 _required,\n        uint256 _defaultSecondsTimeLocked\n    )\n        public\n        MultiSigWalletWithTimeLock(\n            _owners,\n            _required,\n            _defaultSecondsTimeLocked\n        )\n    {\n        uint256 length = _functionSelectors.length;\n        require(\n            length == _destinations.length && length == _functionCallTimeLockSeconds.length,\n            \"EQUAL_LENGTHS_REQUIRED\"\n        );\n\n        // Register function timelocks\n        for (uint256 i = 0; i != length; i++) {\n            _registerFunctionCall(\n                true,  // all functions registered in constructor are assumed to have a custom timelock\n                _functionSelectors[i],\n                _destinations[i],\n                _functionCallTimeLockSeconds[i]\n            );\n        }\n    }\n\n    /// @dev Registers a custom timelock to a specific function selector / destination combo\n    /// @param hasCustomTimeLock True if timelock is custom.\n    /// @param functionSelector 4 byte selector of registered function.\n    /// @param destination Address of destination where function will be called.\n    /// @param newSecondsTimeLocked Duration in seconds needed after a transaction is confirmed to become executable.\n    function registerFunctionCall(\n        bool hasCustomTimeLock,\n        bytes4 functionSelector,\n        address destination,\n        uint128 newSecondsTimeLocked\n    )\n        external\n        onlyWallet\n    {\n        _registerFunctionCall(\n            hasCustomTimeLock,\n            functionSelector,\n            destination,\n            newSecondsTimeLocked\n        );\n    }\n\n    /// @dev Allows anyone to execute a confirmed transaction.\n    ///      Transactions *must* encode the values with the signature \"bytes[] data, address[] destinations, uint256[] values\"\n    ///      The `destination` and `value` fields of the transaction in storage are ignored.\n    ///      All function calls must be successful or the entire call will revert.\n    /// @param transactionId Transaction ID.\n    function executeTransaction(uint256 transactionId)\n        public\n        notExecuted(transactionId)\n        fullyConfirmed(transactionId)\n    {\n        Transaction storage transaction = transactions[transactionId];\n        transaction.executed = true;\n\n        // Decode batch transaction data from transaction.data\n        // `destination` and `value` fields of transaction are ignored\n        // Note that `destination` must be non-0, or the transaction cannot be submitted\n        // solhint-disable\n        (\n            bytes[] memory data,\n            address[] memory destinations,\n            uint256[] memory values\n        ) = abi.decode(\n            transaction.data,\n            (bytes[], address[], uint256[])\n        );\n        // solhint-enable\n\n        // Ensure lengths of array properties are equal\n        uint256 length = data.length;\n        require(\n            length == destinations.length && length == values.length,\n            \"EQUAL_LENGTHS_REQUIRED\"\n        );\n\n        uint256 transactionConfirmationTime = confirmationTimes[transactionId];\n        for (uint i = 0; i != length; i++) {\n            // Ensure that each function call is past its timelock\n            _assertValidFunctionCall(\n                transactionConfirmationTime,\n                data[i],\n                destinations[i]\n            );\n            // Call each function\n            // solhint-disable-next-line avoid-call-value\n            (bool didSucceed,) = destinations[i].call.value(values[i])(data[i]);\n            // Ensure that function call was successful\n            require(\n                didSucceed,\n                \"FAILED_EXECUTION\"\n            );\n        }\n        emit Execution(transactionId);\n    }\n\n    /// @dev Registers a custom timelock to a specific function selector / destination combo\n    /// @param hasCustomTimeLock True if timelock is custom.\n    /// @param functionSelector 4 byte selector of registered function.\n    /// @param destination Address of destination where function will be called.\n    /// @param newSecondsTimeLocked Duration in seconds needed after a transaction is confirmed to become executable.\n    function _registerFunctionCall(\n        bool hasCustomTimeLock,\n        bytes4 functionSelector,\n        address destination,\n        uint128 newSecondsTimeLocked\n    )\n        internal\n    {\n        // Clear the previous secondsTimeLocked if custom timelock not used\n        uint128 _secondsTimeLocked = hasCustomTimeLock ? newSecondsTimeLocked : 0;\n        TimeLock memory timeLock = TimeLock({\n            hasCustomTimeLock: hasCustomTimeLock,\n            secondsTimeLocked: _secondsTimeLocked\n        });\n        functionCallTimeLocks[functionSelector][destination] = timeLock;\n        emit FunctionCallTimeLockRegistration(\n            functionSelector,\n            destination,\n            hasCustomTimeLock,\n            _secondsTimeLocked\n        );\n    }\n\n    /// @dev Ensures that the function call has past its timelock.\n    /// @param transactionConfirmationTime Timestamp at which transaction was fully confirmed.\n    /// @param data Function calldata.\n    /// @param destination Address to call function on.\n    function _assertValidFunctionCall(\n        uint256 transactionConfirmationTime,\n        bytes memory data,\n        address destination\n    )\n        internal\n        view\n    {\n        bytes4 functionSelector = data.readBytes4(0);\n        TimeLock memory timeLock = functionCallTimeLocks[functionSelector][destination];\n        // solhint-disable not-rely-on-time\n        if (timeLock.hasCustomTimeLock) {\n            require(\n                block.timestamp >= transactionConfirmationTime.safeAdd(timeLock.secondsTimeLocked),\n                \"CUSTOM_TIME_LOCK_INCOMPLETE\"\n            );\n        } else {\n            require(\n                block.timestamp >= transactionConfirmationTime.safeAdd(secondsTimeLocked),\n                \"DEFAULT_TIME_LOCK_INCOMPLETE\"\n            );\n        }\n        // solhint-enable not-rely-on-time\n    }\n}\n"
    },
    "contracts/multisig/contracts/src/MultiSigWalletWithTimeLock.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-utils/contracts/src/LibSafeMath.sol\";\nimport \"./MultiSigWallet.sol\";\n\n\n/// @title Multisignature wallet with time lock- Allows multiple parties to execute a transaction after a time lock has passed.\n/// @author Amir Bandeali - <amir@0xProject.com>\n// solhint-disable not-rely-on-time\ncontract MultiSigWalletWithTimeLock is\n    MultiSigWallet\n{\n    using LibSafeMath for uint256;\n\n    event ConfirmationTimeSet(uint256 indexed transactionId, uint256 confirmationTime);\n    event TimeLockChange(uint256 secondsTimeLocked);\n\n    uint256 public secondsTimeLocked;\n\n    mapping (uint256 => uint256) public confirmationTimes;\n\n    modifier fullyConfirmed(uint256 transactionId) {\n        require(\n            isConfirmed(transactionId),\n            \"TX_NOT_FULLY_CONFIRMED\"\n        );\n        _;\n    }\n\n    modifier pastTimeLock(uint256 transactionId) {\n        require(\n            block.timestamp >= confirmationTimes[transactionId].safeAdd(secondsTimeLocked),\n            \"TIME_LOCK_INCOMPLETE\"\n        );\n        _;\n    }\n\n    /// @dev Contract constructor sets initial owners, required number of confirmations, and time lock.\n    /// @param _owners List of initial owners.\n    /// @param _required Number of required confirmations.\n    /// @param _secondsTimeLocked Duration needed after a transaction is confirmed and before it becomes executable, in seconds.\n    constructor (\n        address[] memory _owners,\n        uint256 _required,\n        uint256 _secondsTimeLocked\n    )\n        public\n        MultiSigWallet(_owners, _required)\n    {\n        secondsTimeLocked = _secondsTimeLocked;\n    }\n\n    /// @dev Changes the duration of the time lock for transactions.\n    /// @param _secondsTimeLocked Duration needed after a transaction is confirmed and before it becomes executable, in seconds.\n    function changeTimeLock(uint256 _secondsTimeLocked)\n        public\n        onlyWallet\n    {\n        secondsTimeLocked = _secondsTimeLocked;\n        emit TimeLockChange(_secondsTimeLocked);\n    }\n\n    /// @dev Allows an owner to confirm a transaction.\n    /// @param transactionId Transaction ID.\n    function confirmTransaction(uint256 transactionId)\n        public\n        ownerExists(msg.sender)\n        transactionExists(transactionId)\n        notConfirmed(transactionId, msg.sender)\n    {\n        bool isTxFullyConfirmedBeforeConfirmation = isConfirmed(transactionId);\n\n        confirmations[transactionId][msg.sender] = true;\n        emit Confirmation(msg.sender, transactionId);\n\n        if (!isTxFullyConfirmedBeforeConfirmation && isConfirmed(transactionId)) {\n            _setConfirmationTime(transactionId, block.timestamp);\n        }\n    }\n\n    /// @dev Allows anyone to execute a confirmed transaction.\n    /// @param transactionId Transaction ID.\n    function executeTransaction(uint256 transactionId)\n        public\n        notExecuted(transactionId)\n        fullyConfirmed(transactionId)\n        pastTimeLock(transactionId)\n    {\n        Transaction storage txn = transactions[transactionId];\n        txn.executed = true;\n        if (_externalCall(txn.destination, txn.value, txn.data.length, txn.data)) {\n            emit Execution(transactionId);\n        } else {\n            emit ExecutionFailure(transactionId);\n            txn.executed = false;\n        }\n    }\n\n    /// @dev Sets the time of when a submission first passed.\n    function _setConfirmationTime(uint256 transactionId, uint256 confirmationTime)\n        internal\n    {\n        confirmationTimes[transactionId] = confirmationTime;\n        emit ConfirmationTimeSet(transactionId, confirmationTime);\n    }\n}\n"
    },
    "contracts/multisig/contracts/src/MultiSigWallet.sol": {
      "content": "// solhint-disable\npragma solidity ^0.5.9;\n\n\n/// @title Multisignature wallet - Allows multiple parties to agree on transactions before execution.\n/// @author Stefan George - <stefan.george@consensys.net>\ncontract MultiSigWallet {\n\n    /*\n     *  Events\n     */\n    event Confirmation(address indexed sender, uint256 indexed transactionId);\n    event Revocation(address indexed sender, uint256 indexed transactionId);\n    event Submission(uint256 indexed transactionId);\n    event Execution(uint256 indexed transactionId);\n    event ExecutionFailure(uint256 indexed transactionId);\n    event Deposit(address indexed sender, uint256 value);\n    event OwnerAddition(address indexed owner);\n    event OwnerRemoval(address indexed owner);\n    event RequirementChange(uint256 required);\n\n    /*\n     *  Constants\n     */\n    uint256 constant public MAX_OWNER_COUNT = 50;\n\n    /*\n     *  Storage\n     */\n    mapping (uint256 => Transaction) public transactions;\n    mapping (uint256 => mapping (address => bool)) public confirmations;\n    mapping (address => bool) public isOwner;\n    address[] public owners;\n    uint256 public required;\n    uint256 public transactionCount;\n\n    struct Transaction {\n        address destination;\n        uint256 value;\n        bytes data;\n        bool executed;\n    }\n\n    /*\n     *  Modifiers\n     */\n    modifier onlyWallet() {\n        require(\n            msg.sender == address(this),\n            \"ONLY_CALLABLE_BY_WALLET\"\n        );\n        _;\n    }\n\n    modifier ownerDoesNotExist(address owner) {\n        require(\n            !isOwner[owner],\n            \"OWNER_EXISTS\"\n        );\n        _;\n    }\n\n    modifier ownerExists(address owner) {\n        require(\n            isOwner[owner],\n            \"OWNER_DOESNT_EXIST\"\n        );\n        _;\n    }\n\n    modifier transactionExists(uint256 transactionId) {\n        require(\n            transactions[transactionId].destination != address(0),\n            \"TX_DOESNT_EXIST\"\n        );\n        _;\n    }\n\n    modifier confirmed(uint256 transactionId, address owner) {\n        require(\n            confirmations[transactionId][owner],\n            \"TX_NOT_CONFIRMED\"\n        );\n        _;\n    }\n\n    modifier notConfirmed(uint256 transactionId, address owner) {\n        require(\n            !confirmations[transactionId][owner],\n            \"TX_ALREADY_CONFIRMED\"\n        );\n        _;\n    }\n\n    modifier notExecuted(uint256 transactionId) {\n        require(\n            !transactions[transactionId].executed,\n            \"TX_ALREADY_EXECUTED\"\n        );\n        _;\n    }\n\n    modifier notNull(address _address) {\n        require(\n            _address != address(0),\n            \"NULL_ADDRESS\"\n        );\n        _;\n    }\n\n    modifier validRequirement(uint256 ownerCount, uint256 _required) {\n        require(\n            ownerCount <= MAX_OWNER_COUNT\n            && _required <= ownerCount\n            && _required != 0\n            && ownerCount != 0,\n            \"INVALID_REQUIREMENTS\"\n        );\n        _;\n    }\n\n    /// @dev Fallback function allows to deposit ether.\n    function()\n        external\n        payable\n    {\n        if (msg.value > 0) {\n            emit Deposit(msg.sender, msg.value);\n        }\n    }\n\n    /*\n     * Public functions\n     */\n    /// @dev Contract constructor sets initial owners and required number of confirmations.\n    /// @param _owners List of initial owners.\n    /// @param _required Number of required confirmations.\n    constructor(\n        address[] memory _owners,\n        uint256 _required\n    )\n        public\n        validRequirement(_owners.length, _required)\n    {\n        for (uint256 i = 0; i < _owners.length; i++) {\n            require(\n                !isOwner[_owners[i]] && _owners[i] != address(0),\n                \"DUPLICATE_OR_NULL_OWNER\"\n            );\n            isOwner[_owners[i]] = true;\n        }\n        owners = _owners;\n        required = _required;\n    }\n\n    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.\n    /// @param owner Address of new owner.\n    function addOwner(address owner)\n        public\n        onlyWallet\n        ownerDoesNotExist(owner)\n        notNull(owner)\n        validRequirement(owners.length + 1, required)\n    {\n        isOwner[owner] = true;\n        owners.push(owner);\n        emit OwnerAddition(owner);\n    }\n\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\n    /// @param owner Address of owner.\n    function removeOwner(address owner)\n        public\n        onlyWallet\n        ownerExists(owner)\n    {\n        isOwner[owner] = false;\n        for (uint256 i = 0; i < owners.length - 1; i++) {\n            if (owners[i] == owner) {\n                owners[i] = owners[owners.length - 1];\n                break;\n            }\n        }\n        owners.length -= 1;\n        if (required > owners.length) {\n            changeRequirement(owners.length);\n        }\n        emit OwnerRemoval(owner);\n    }\n\n    /// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\n    /// @param owner Address of owner to be replaced.\n    /// @param newOwner Address of new owner.\n    function replaceOwner(address owner, address newOwner)\n        public\n        onlyWallet\n        ownerExists(owner)\n        ownerDoesNotExist(newOwner)\n    {\n        for (uint256 i = 0; i < owners.length; i++) {\n            if (owners[i] == owner) {\n                owners[i] = newOwner;\n                break;\n            }\n        }\n        isOwner[owner] = false;\n        isOwner[newOwner] = true;\n        emit OwnerRemoval(owner);\n        emit OwnerAddition(newOwner);\n    }\n\n    /// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\n    /// @param _required Number of required confirmations.\n    function changeRequirement(uint256 _required)\n        public\n        onlyWallet\n        validRequirement(owners.length, _required)\n    {\n        required = _required;\n        emit RequirementChange(_required);\n    }\n\n    /// @dev Allows an owner to submit and confirm a transaction.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @return Returns transaction ID.\n    function submitTransaction(address destination, uint256 value, bytes memory data)\n        public\n        returns (uint256 transactionId)\n    {\n        transactionId = _addTransaction(destination, value, data);\n        confirmTransaction(transactionId);\n    }\n\n    /// @dev Allows an owner to confirm a transaction.\n    /// @param transactionId Transaction ID.\n    function confirmTransaction(uint256 transactionId)\n        public\n        ownerExists(msg.sender)\n        transactionExists(transactionId)\n        notConfirmed(transactionId, msg.sender)\n    {\n        confirmations[transactionId][msg.sender] = true;\n        emit Confirmation(msg.sender, transactionId);\n        executeTransaction(transactionId);\n    }\n\n    /// @dev Allows an owner to revoke a confirmation for a transaction.\n    /// @param transactionId Transaction ID.\n    function revokeConfirmation(uint256 transactionId)\n        public\n        ownerExists(msg.sender)\n        confirmed(transactionId, msg.sender)\n        notExecuted(transactionId)\n    {\n        confirmations[transactionId][msg.sender] = false;\n        emit Revocation(msg.sender, transactionId);\n    }\n\n    /// @dev Allows anyone to execute a confirmed transaction.\n    /// @param transactionId Transaction ID.\n    function executeTransaction(uint256 transactionId)\n        public\n        ownerExists(msg.sender)\n        confirmed(transactionId, msg.sender)\n        notExecuted(transactionId)\n    {\n        if (isConfirmed(transactionId)) {\n            Transaction storage txn = transactions[transactionId];\n            txn.executed = true;\n            if (\n                _externalCall(\n                    txn.destination,\n                    txn.value,\n                    txn.data.length,\n                    txn.data\n                )\n            ) {\n                emit Execution(transactionId);\n            } else {\n                emit ExecutionFailure(transactionId);\n                txn.executed = false;\n            }\n        }\n    }\n\n    // call has been separated into its own function in order to take advantage\n    // of the Solidity's code generator to produce a loop that copies tx.data into memory.\n    function _externalCall(\n        address destination,\n        uint256 value,\n        uint256 dataLength,\n        bytes memory data\n    )\n        internal\n        returns (bool)\n    {\n        bool result;\n        assembly {\n            let x := mload(0x40)   // \"Allocate\" memory for output (0x40 is where \"free memory\" pointer is stored by convention)\n            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that\n            result := call(\n                sub(gas, 34710),   // 34710 is the value that solidity is currently emitting\n                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +\n                                   // callNewAccountGas (25000, in case the destination address does not exist and needs creating)\n                destination,\n                value,\n                d,\n                dataLength,        // Size of the input (in bytes) - this is what fixes the padding problem\n                x,\n                0                  // Output is ignored, therefore the output size is zero\n            )\n        }\n        return result;\n    }\n\n    /// @dev Returns the confirmation status of a transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Confirmation status.\n    function isConfirmed(uint256 transactionId)\n        public\n        view\n        returns (bool)\n    {\n        uint256 count = 0;\n        for (uint256 i = 0; i < owners.length; i++) {\n            if (confirmations[transactionId][owners[i]]) {\n                count += 1;\n            }\n            if (count == required) {\n                return true;\n            }\n        }\n    }\n\n    /*\n     * Internal functions\n     */\n    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @return Returns transaction ID.\n    function _addTransaction(\n        address destination,\n        uint256 value,\n        bytes memory data\n    )\n        internal\n        notNull(destination)\n        returns (uint256 transactionId)\n    {\n        transactionId = transactionCount;\n        transactions[transactionId] = Transaction({\n            destination: destination,\n            value: value,\n            data: data,\n            executed: false\n        });\n        transactionCount += 1;\n        emit Submission(transactionId);\n    }\n\n    /*\n     * Web3 call functions\n     */\n    /// @dev Returns number of confirmations of a transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Number of confirmations.\n    function getConfirmationCount(uint256 transactionId)\n        public\n        view\n        returns (uint256 count)\n    {\n        for (uint256 i = 0; i < owners.length; i++) {\n            if (confirmations[transactionId][owners[i]]) {\n                count += 1;\n            }\n        }\n    }\n\n    /// @dev Returns total number of transactions after filers are applied.\n    /// @param pending Include pending transactions.\n    /// @param executed Include executed transactions.\n    /// @return Total number of transactions after filters are applied.\n    function getTransactionCount(bool pending, bool executed)\n        public\n        view\n        returns (uint256 count)\n    {\n        for (uint256 i = 0; i < transactionCount; i++) {\n            if (pending && !transactions[i].executed || executed && transactions[i].executed) {\n                count += 1;\n            }\n        }\n    }\n\n    /// @dev Returns list of owners.\n    /// @return List of owner addresses.\n    function getOwners()\n        public\n        view\n        returns (address[] memory)\n    {\n        return owners;\n    }\n\n    /// @dev Returns array with owner addresses, which confirmed transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Returns array of owner addresses.\n    function getConfirmations(uint256 transactionId)\n        public\n        view\n        returns (address[] memory _confirmations)\n    {\n        address[] memory confirmationsTemp = new address[](owners.length);\n        uint256 count = 0;\n        uint256 i;\n        for (i = 0; i < owners.length; i++) {\n            if (confirmations[transactionId][owners[i]]) {\n                confirmationsTemp[count] = owners[i];\n                count += 1;\n            }\n        }\n        _confirmations = new address[](count);\n        for (i = 0; i < count; i++) {\n            _confirmations[i] = confirmationsTemp[i];\n        }\n    }\n\n    /// @dev Returns list of transaction IDs in defined range.\n    /// @param from Index start position of transaction array.\n    /// @param to Index end position of transaction array.\n    /// @param pending Include pending transactions.\n    /// @param executed Include executed transactions.\n    /// @return Returns array of transaction IDs.\n    function getTransactionIds(\n        uint256 from,\n        uint256 to,\n        bool pending,\n        bool executed\n    )\n        public\n        view\n        returns (uint256[] memory _transactionIds)\n    {\n        uint256[] memory transactionIdsTemp = new uint256[](transactionCount);\n        uint256 count = 0;\n        uint256 i;\n        for (i = 0; i < transactionCount; i++) {\n            if (pending && !transactions[i].executed || executed && transactions[i].executed) {\n                transactionIdsTemp[count] = i;\n                count += 1;\n            }\n        }\n        _transactionIds = new uint256[](to - from);\n        for (i = from; i < to; i++) {\n            _transactionIds[i - from] = transactionIdsTemp[i];\n        }\n    }\n}\n"
    },
    "contracts/multisig/contracts/test/TestZeroExGovernor.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"../src/ZeroExGovernor.sol\";\n\n\n// solhint-disable no-empty-blocks\ncontract TestZeroExGovernor is\n    ZeroExGovernor\n{\n    constructor (\n        bytes4[] memory _functionSelectors,\n        address[] memory _destinations,\n        uint128[] memory _functionCallTimeLockSeconds,\n        address[] memory _owners,\n        uint256 _required,\n        uint256 _defaultSecondsTimeLocked\n    )\n        public\n        ZeroExGovernor(\n            _functionSelectors,\n            _destinations,\n            _functionCallTimeLockSeconds,\n            _owners,\n            _required,\n            _defaultSecondsTimeLocked\n        )\n    {}\n    \n    function registerFunctionCallBypassWallet(\n        bool hasCustomTimeLock,\n        bytes4 functionSelector,\n        address destination,\n        uint128 newSecondsTimeLocked\n    )\n        external\n    {\n        _registerFunctionCall(\n            hasCustomTimeLock,\n            functionSelector,\n            destination,\n            newSecondsTimeLocked\n        );\n    }\n\n    function assertValidFunctionCall(\n        uint256 transactionConfirmationTime,\n        bytes calldata data,\n        address destination\n    )\n        external\n        view\n    {\n        _assertValidFunctionCall(\n            transactionConfirmationTime,\n            data,\n            destination\n        );\n    }\n}\n"
    },
    "contracts/extensions/contracts/src/MixinWethUtils.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations \\under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-asset-proxy/contracts/src/interfaces/IAssetData.sol\";\nimport \"@0x/contracts-erc20/contracts/src/interfaces/IEtherToken.sol\";\nimport \"@0x/contracts-exchange/contracts/src/interfaces/IExchange.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibRichErrors.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibSafeMath.sol\";\nimport \"./rich-errors/LibWethUtilsRichErrors.sol\";\n\n\ncontract MixinWethUtils {\n\n    uint256 constant internal MAX_UINT256 = uint256(-1);\n\n     // solhint-disable var-name-mixedcase\n    IEtherToken internal WETH;\n    bytes internal WETH_ASSET_DATA;\n    // solhint-enable var-name-mixedcase\n\n    using LibSafeMath for uint256;\n\n    constructor (\n        address exchange,\n        address weth\n    )\n        public\n    {\n        WETH = IEtherToken(weth);\n        WETH_ASSET_DATA = abi.encodeWithSelector(\n            IAssetData(address(0)).ERC20Token.selector,\n            weth\n        );\n\n        address proxyAddress = IExchange(exchange).getAssetProxy(IAssetData(address(0)).ERC20Token.selector);\n        if (proxyAddress == address(0)) {\n            LibRichErrors.rrevert(LibWethUtilsRichErrors.UnregisteredAssetProxyError());\n        }\n        WETH.approve(proxyAddress, MAX_UINT256);\n\n        address protocolFeeCollector = IExchange(exchange).protocolFeeCollector();\n        if (protocolFeeCollector != address(0)) {\n            WETH.approve(protocolFeeCollector, MAX_UINT256);\n        }\n    }\n\n    /// @dev Default payable function, this allows us to withdraw WETH\n    function ()\n        external\n        payable\n    {\n        if (msg.sender != address(WETH)) {\n            LibRichErrors.rrevert(LibWethUtilsRichErrors.DefaultFunctionWethContractOnlyError(\n                msg.sender\n            ));\n        }\n    }\n\n    /// @dev Transfers ETH denominated fees to all feeRecipient addresses\n    /// @param ethFeeAmounts Amounts of ETH, denominated in Wei, that are paid to corresponding feeRecipients.\n    /// @param feeRecipients Addresses that will receive ETH when orders are filled.\n    /// @return ethRemaining msg.value minus the amount of ETH spent on affiliate fees.\n    function _transferEthFeesAndWrapRemaining(\n        uint256[] memory ethFeeAmounts,\n        address payable[] memory feeRecipients\n    )\n        internal\n        returns (uint256 ethRemaining)\n    {\n        uint256 feesLen = ethFeeAmounts.length;\n        // ethFeeAmounts len must equal feeRecipients len\n        if (feesLen != feeRecipients.length) {\n            LibRichErrors.rrevert(LibWethUtilsRichErrors.EthFeeLengthMismatchError(\n                feesLen,\n                feeRecipients.length\n            ));\n        }\n\n        // This function is always called before any other function, so we assume that\n        // the ETH remaining is the entire msg.value.\n        ethRemaining = msg.value;\n\n        for (uint256 i = 0; i != feesLen; i++) {\n            uint256 ethFeeAmount = ethFeeAmounts[i];\n            // Ensure there is enough ETH to pay the fee\n            if (ethRemaining < ethFeeAmount) {\n                LibRichErrors.rrevert(LibWethUtilsRichErrors.InsufficientEthForFeeError(\n                    ethFeeAmount,\n                    ethRemaining\n                ));\n            }\n            // Decrease ethRemaining and transfer fee to corresponding feeRecipient\n            ethRemaining = ethRemaining.safeSub(ethFeeAmount);\n            feeRecipients[i].transfer(ethFeeAmount);\n        }\n\n        // Convert remaining ETH to WETH.\n        WETH.deposit.value(ethRemaining)();\n\n        return ethRemaining;\n    }\n\n    /// @dev Unwraps WETH and transfers ETH to msg.sender.\n    /// @param transferAmount Amount of WETH balance to unwrap and transfer.\n    function _unwrapAndTransferEth(\n        uint256 transferAmount\n    )\n        internal\n    {\n        // Do nothing if amount is zero\n        if (transferAmount > 0) {\n            // Convert WETH to ETH\n            WETH.withdraw(transferAmount);\n            // Transfer ETH to sender\n            msg.sender.transfer(transferAmount);\n        }\n    }\n}\n"
    },
    "contracts/extensions/contracts/src/rich-errors/LibWethUtilsRichErrors.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\nlibrary LibWethUtilsRichErrors {\n\n    // bytes4(keccak256(\"UnregisteredAssetProxyError()\"))\n    bytes4 internal constant UNREGISTERED_ASSET_PROXY_ERROR_SELECTOR =\n        0xf3b96b8d;\n\n    // bytes4(keccak256(\"InsufficientEthForFeeError(uint256,uint256)\"))\n    bytes4 internal constant INSUFFICIENT_ETH_FOR_FEE_ERROR_SELECTOR =\n        0xecf40fd9;\n\n    // bytes4(keccak256(\"DefaultFunctionWethContractOnlyError(address)\"))\n    bytes4 internal constant DEFAULT_FUNCTION_WETH_CONTRACT_ONLY_ERROR_SELECTOR =\n        0x08b18698;\n\n    // bytes4(keccak256(\"EthFeeLengthMismatchError(uint256,uint256)\"))\n    bytes4 internal constant ETH_FEE_LENGTH_MISMATCH_ERROR_SELECTOR =\n        0x3ecb6ceb;\n\n    // solhint-disable func-name-mixedcase\n    function UnregisteredAssetProxyError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(UNREGISTERED_ASSET_PROXY_ERROR_SELECTOR);\n    }\n\n    function InsufficientEthForFeeError(\n        uint256 ethFeeRequired,\n        uint256 ethAvailable\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INSUFFICIENT_ETH_FOR_FEE_ERROR_SELECTOR,\n            ethFeeRequired,\n            ethAvailable\n        );\n    }\n\n    function DefaultFunctionWethContractOnlyError(\n        address senderAddress\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            DEFAULT_FUNCTION_WETH_CONTRACT_ONLY_ERROR_SELECTOR,\n            senderAddress\n        );\n    }\n\n    function EthFeeLengthMismatchError(\n        uint256 ethFeesLength,\n        uint256 feeRecipientsLength\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ETH_FEE_LENGTH_MISMATCH_ERROR_SELECTOR,\n            ethFeesLength,\n            feeRecipientsLength\n        );\n    }\n}\n"
    },
    "contracts/extensions/contracts/src/LibAssetDataTransfer.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibRichErrors.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibSafeMath.sol\";\nimport \"@0x/contracts-erc20/contracts/src/LibERC20Token.sol\";\nimport \"@0x/contracts-erc721/contracts/src/interfaces/IERC721Token.sol\";\nimport \"@0x/contracts-erc1155/contracts/src/interfaces/IERC1155.sol\";\nimport \"@0x/contracts-asset-proxy/contracts/src/interfaces/IAssetData.sol\";\nimport \"./rich-errors/LibAssetDataTransferRichErrors.sol\";\n\n\nlibrary LibAssetDataTransfer {\n\n    using LibBytes for bytes;\n    using LibSafeMath for uint256;\n    using LibAssetDataTransfer for bytes;\n\n    /// @dev Transfers given amount of asset to sender.\n    /// @param assetData Byte array encoded for the respective asset proxy.\n    /// @param from Address to transfer asset from.\n    /// @param to Address to transfer asset to.\n    /// @param amount Amount of asset to transfer to sender.\n    function transferFrom(\n        bytes memory assetData,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        if (amount == 0) {\n            return;\n        }\n\n        bytes4 proxyId = assetData.readBytes4(0);\n\n        if (\n            proxyId == IAssetData(address(0)).ERC20Token.selector ||\n            proxyId == IAssetData(address(0)).ERC20Bridge.selector\n        ) {\n            assetData.transferERC20Token(\n                from,\n                to,\n                amount\n            );\n        } else if (proxyId == IAssetData(address(0)).ERC721Token.selector) {\n            assetData.transferERC721Token(\n                from,\n                to,\n                amount\n            );\n        } else if (proxyId == IAssetData(address(0)).ERC1155Assets.selector) {\n            assetData.transferERC1155Assets(\n                from,\n                to,\n                amount\n            );\n        } else if (proxyId == IAssetData(address(0)).MultiAsset.selector) {\n            assetData.transferMultiAsset(\n                from,\n                to,\n                amount\n            );\n        } else if (proxyId != IAssetData(address(0)).StaticCall.selector) {\n            LibRichErrors.rrevert(LibAssetDataTransferRichErrors.UnsupportedAssetProxyError(\n                proxyId\n            ));\n        }\n    }\n\n    ///@dev Transfer asset from sender to this contract.\n    /// @param assetData Byte array encoded for the respective asset proxy.\n    /// @param amount Amount of asset to transfer to sender.\n    function transferIn(\n        bytes memory assetData,\n        uint256 amount\n    )\n        internal\n    {\n        assetData.transferFrom(\n            msg.sender,\n            address(this),\n            amount\n        );\n    }\n\n    ///@dev Transfer asset from this contract to sender.\n    /// @param assetData Byte array encoded for the respective asset proxy.\n    /// @param amount Amount of asset to transfer to sender.\n    function transferOut(\n        bytes memory assetData,\n        uint256 amount\n    )\n        internal\n    {\n        assetData.transferFrom(\n            address(this),\n            msg.sender,\n            amount\n        );\n    }\n\n    /// @dev Decodes ERC20 or ERC20Bridge assetData and transfers given amount to sender.\n    /// @param assetData Byte array encoded for the respective asset proxy.\n    /// @param from Address to transfer asset from.\n    /// @param to Address to transfer asset to.\n    /// @param amount Amount of asset to transfer to sender.\n    function transferERC20Token(\n        bytes memory assetData,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        address token = assetData.readAddress(16);\n        // Transfer tokens.\n        if (from == address(this)) {\n            LibERC20Token.transfer(\n                token,\n                to,\n                amount\n            );\n        } else {\n            LibERC20Token.transferFrom(\n                token,\n                from,\n                to,\n                amount\n            );\n        }\n    }\n\n    /// @dev Decodes ERC721 assetData and transfers given amount to sender.\n    /// @param assetData Byte array encoded for the respective asset proxy.\n    /// @param from Address to transfer asset from.\n    /// @param to Address to transfer asset to.\n    /// @param amount Amount of asset to transfer to sender.\n    function transferERC721Token(\n        bytes memory assetData,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        if (amount != 1) {\n            LibRichErrors.rrevert(LibAssetDataTransferRichErrors.Erc721AmountMustEqualOneError(\n                amount\n            ));\n        }\n        // Decode asset data.\n        address token = assetData.readAddress(16);\n        uint256 tokenId = assetData.readUint256(36);\n\n        // Perform transfer.\n        IERC721Token(token).transferFrom(\n            from,\n            to,\n            tokenId\n        );\n    }\n\n    /// @dev Decodes ERC1155 assetData and transfers given amounts to sender.\n    /// @param assetData Byte array encoded for the respective asset proxy.\n    /// @param from Address to transfer asset from.\n    /// @param to Address to transfer asset to.\n    /// @param amount Amount of asset to transfer to sender.\n    function transferERC1155Assets(\n        bytes memory assetData,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        // Decode assetData\n        // solhint-disable\n        (\n            address token,\n            uint256[] memory ids,\n            uint256[] memory values,\n            bytes memory data\n        ) = abi.decode(\n            assetData.slice(4, assetData.length),\n            (address, uint256[], uint256[], bytes)\n        );\n        // solhint-enable\n\n        // Scale up values by `amount`\n        uint256 length = values.length;\n        uint256[] memory scaledValues = new uint256[](length);\n        for (uint256 i = 0; i != length; i++) {\n            scaledValues[i] = values[i].safeMul(amount);\n        }\n\n        // Execute `safeBatchTransferFrom` call\n        // Either succeeds or throws\n        IERC1155(token).safeBatchTransferFrom(\n            from,\n            to,\n            ids,\n            scaledValues,\n            data\n        );\n    }\n\n    /// @dev Decodes MultiAsset assetData and recursively transfers assets to sender.\n    /// @param assetData Byte array encoded for the respective asset proxy.\n    /// @param from Address to transfer asset from.\n    /// @param to Address to transfer asset to.\n    /// @param amount Amount of asset to transfer to sender.\n    function transferMultiAsset(\n        bytes memory assetData,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        // solhint-disable indent\n        (uint256[] memory nestedAmounts, bytes[] memory nestedAssetData) = abi.decode(\n            assetData.slice(4, assetData.length),\n            (uint256[], bytes[])\n        );\n        // solhint-enable indent\n\n        uint256 numNestedAssets = nestedAssetData.length;\n        for (uint256 i = 0; i != numNestedAssets; i++) {\n            transferFrom(\n                nestedAssetData[i],\n                from,\n                to,\n                amount.safeMul(nestedAmounts[i])\n            );\n        }\n    }\n}\n"
    },
    "@0x/contracts-erc721/contracts/src/interfaces/IERC721Token.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ncontract IERC721Token {\n\n    /// @dev This emits when ownership of any NFT changes by any mechanism.\n    ///      This event emits when NFTs are created (`from` == 0) and destroyed\n    ///      (`to` == 0). Exception: during contract creation, any number of NFTs\n    ///      may be created and assigned without emitting Transfer. At the time of\n    ///      any transfer, the approved address for that NFT (if any) is reset to none.\n    event Transfer(\n        address indexed _from,\n        address indexed _to,\n        uint256 indexed _tokenId\n    );\n\n    /// @dev This emits when the approved address for an NFT is changed or\n    ///      reaffirmed. The zero address indicates there is no approved address.\n    ///      When a Transfer event emits, this also indicates that the approved\n    ///      address for that NFT (if any) is reset to none.\n    event Approval(\n        address indexed _owner,\n        address indexed _approved,\n        uint256 indexed _tokenId\n    );\n\n    /// @dev This emits when an operator is enabled or disabled for an owner.\n    ///      The operator can manage all NFTs of the owner.\n    event ApprovalForAll(\n        address indexed _owner,\n        address indexed _operator,\n        bool _approved\n    );\n\n    /// @notice Transfers the ownership of an NFT from one address to another address\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\n    ///      perator, or the approved address for this NFT. Throws if `_from` is\n    ///      not the current owner. Throws if `_to` is the zero address. Throws if\n    ///      `_tokenId` is not a valid NFT. When transfer is complete, this function\n    ///      checks if `_to` is a smart contract (code size > 0). If so, it calls\n    ///      `onERC721Received` on `_to` and throws if the return value is not\n    ///      `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n    /// @param _data Additional data with no specified format, sent in call to `_to`\n    function safeTransferFrom(\n        address _from,\n        address _to,\n        uint256 _tokenId,\n        bytes calldata _data\n    )\n        external;\n\n    /// @notice Transfers the ownership of an NFT from one address to another address\n    /// @dev This works identically to the other function with an extra data parameter,\n    ///      except this function just sets data to \"\".\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n    function safeTransferFrom(\n        address _from,\n        address _to,\n        uint256 _tokenId\n    )\n        external;\n\n    /// @notice Change or reaffirm the approved address for an NFT\n    /// @dev The zero address indicates there is no approved address.\n    ///      Throws unless `msg.sender` is the current NFT owner, or an authorized\n    ///      operator of the current owner.\n    /// @param _approved The new approved NFT controller\n    /// @param _tokenId The NFT to approve\n    function approve(address _approved, uint256 _tokenId)\n        external;\n\n    /// @notice Enable or disable approval for a third party (\"operator\") to manage\n    ///         all of `msg.sender`'s assets\n    /// @dev Emits the ApprovalForAll event. The contract MUST allow\n    ///      multiple operators per owner.\n    /// @param _operator Address to add to the set of authorized operators\n    /// @param _approved True if the operator is approved, false to revoke approval\n    function setApprovalForAll(address _operator, bool _approved)\n        external;\n\n    /// @notice Count all NFTs assigned to an owner\n    /// @dev NFTs assigned to the zero address are considered invalid, and this\n    ///      function throws for queries about the zero address.\n    /// @param _owner An address for whom to query the balance\n    /// @return The number of NFTs owned by `_owner`, possibly zero\n    function balanceOf(address _owner)\n        external\n        view\n        returns (uint256);\n\n    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\n    ///         TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\n    ///         THEY MAY BE PERMANENTLY LOST\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\n    ///      operator, or the approved address for this NFT. Throws if `_from` is\n    ///      not the current owner. Throws if `_to` is the zero address. Throws if\n    ///      `_tokenId` is not a valid NFT.\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _tokenId\n    )\n        public;\n\n    /// @notice Find the owner of an NFT\n    /// @dev NFTs assigned to zero address are considered invalid, and queries\n    ///      about them do throw.\n    /// @param _tokenId The identifier for an NFT\n    /// @return The address of the owner of the NFT\n    function ownerOf(uint256 _tokenId)\n        public\n        view\n        returns (address);\n\n    /// @notice Get the approved address for a single NFT\n    /// @dev Throws if `_tokenId` is not a valid NFT.\n    /// @param _tokenId The NFT to find the approved address for\n    /// @return The approved address for this NFT, or the zero address if there is none\n    function getApproved(uint256 _tokenId) \n        public\n        view\n        returns (address);\n    \n    /// @notice Query if an address is an authorized operator for another address\n    /// @param _owner The address that owns the NFTs\n    /// @param _operator The address that acts on behalf of the owner\n    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\n    function isApprovedForAll(address _owner, address _operator)\n        public\n        view\n        returns (bool);\n}\n"
    },
    "contracts/extensions/contracts/src/rich-errors/LibAssetDataTransferRichErrors.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\nlibrary LibAssetDataTransferRichErrors {\n\n    // bytes4(keccak256(\"UnsupportedAssetProxyError(bytes4)\"))\n    bytes4 internal constant UNSUPPORTED_ASSET_PROXY_ERROR_SELECTOR =\n        0x7996a271;\n\n    // bytes4(keccak256(\"Erc721AmountMustEqualOneError(uint256)\"))\n    bytes4 internal constant ERC721_AMOUNT_MUST_EQUAL_ONE_ERROR_SELECTOR =\n        0xbaffa474;\n        \n    // solhint-disable func-name-mixedcase\n    function UnsupportedAssetProxyError(\n        bytes4 proxyId\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UNSUPPORTED_ASSET_PROXY_ERROR_SELECTOR,\n            proxyId\n        );\n    }\n\n    function Erc721AmountMustEqualOneError(\n        uint256 amount\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ERC721_AMOUNT_MUST_EQUAL_ONE_ERROR_SELECTOR,\n            amount\n        );\n    }\n}\n"
    },
    "contracts/exchange-forwarder/contracts/src/MixinExchangeWrapper.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-asset-proxy/contracts/src/interfaces/IAssetData.sol\";\nimport \"@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol\";\nimport \"@0x/contracts-exchange/contracts/src/interfaces/IExchange.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibMath.sol\";\nimport \"@0x/contracts-extensions/contracts/src/LibAssetDataTransfer.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibRichErrors.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibSafeMath.sol\";\nimport \"./libs/LibForwarderRichErrors.sol\";\nimport \"./interfaces/IExchangeV2.sol\";\n\n\ncontract MixinExchangeWrapper {\n\n    // The v2 order id is the first 4 bytes of the ExchangeV2 order schema hash.\n    // bytes4(keccak256(abi.encodePacked(\n    //     \"Order(\",\n    //     \"address makerAddress,\",\n    //     \"address takerAddress,\",\n    //     \"address feeRecipientAddress,\",\n    //     \"address senderAddress,\",\n    //     \"uint256 makerAssetAmount,\",\n    //     \"uint256 takerAssetAmount,\",\n    //     \"uint256 makerFee,\",\n    //     \"uint256 takerFee,\",\n    //     \"uint256 expirationTimeSeconds,\",\n    //     \"uint256 salt,\",\n    //     \"bytes makerAssetData,\",\n    //     \"bytes takerAssetData\",\n    //     \")\"\n    // )));\n    bytes4 constant public EXCHANGE_V2_ORDER_ID = 0x770501f8;\n    bytes4 constant internal ERC20_BRIDGE_PROXY_ID = 0xdc1600f3;\n\n     // solhint-disable var-name-mixedcase\n    IExchange internal EXCHANGE;\n    IExchangeV2 internal EXCHANGE_V2;\n    // solhint-enable var-name-mixedcase\n\n    using LibBytes for bytes;\n    using LibAssetDataTransfer for bytes;\n    using LibSafeMath for uint256;\n\n    constructor (\n        address _exchange,\n        address _exchangeV2\n    )\n        public\n    {\n        EXCHANGE = IExchange(_exchange);\n        EXCHANGE_V2 = IExchangeV2(_exchangeV2);\n    }\n\n    struct SellFillResults {\n        uint256 wethSpentAmount;\n        uint256 makerAssetAcquiredAmount;\n        uint256 protocolFeePaid;\n    }\n\n    /// @dev Fills the input order.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    /// @return Amounts filled and fees paid by maker and taker.\n    function _fillOrderNoThrow(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        internal\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        if (_isV2Order(order)) {\n            return _fillV2OrderNoThrow(\n                order,\n                takerAssetFillAmount,\n                signature\n            );\n        }\n\n        return _fillV3OrderNoThrow(\n            order,\n            takerAssetFillAmount,\n            signature\n        );\n    }\n\n    /// @dev Executes a single call of fillOrder according to the wethSellAmount and\n    ///      the amount already sold.\n    /// @param order A single order specification.\n    /// @param signature Signature for the given order.\n    /// @param remainingTakerAssetFillAmount Remaining amount of WETH to sell.\n    /// @return wethSpentAmount Amount of WETH spent on the given order.\n    /// @return makerAssetAcquiredAmount Amount of maker asset acquired from the given order.\n    function _marketSellSingleOrder(\n        LibOrder.Order memory order,\n        bytes memory signature,\n        uint256 remainingTakerAssetFillAmount\n    )\n        internal\n        returns (SellFillResults memory sellFillResults)\n    {\n        // If the maker asset is ERC20Bridge, take a snapshot of the Forwarder contract's balance.\n        bytes4 makerAssetProxyId = order.makerAssetData.readBytes4(0);\n        address tokenAddress;\n        uint256 balanceBefore;\n        if (makerAssetProxyId == ERC20_BRIDGE_PROXY_ID) {\n            tokenAddress = order.makerAssetData.readAddress(16);\n            balanceBefore = IERC20Token(tokenAddress).balanceOf(address(this));\n        }\n        // No taker fee or percentage fee\n        if (\n            order.takerFee == 0 ||\n            _areUnderlyingAssetsEqual(order.takerFeeAssetData, order.makerAssetData)\n        ) {\n            // Attempt to sell the remaining amount of WETH\n            LibFillResults.FillResults memory singleFillResults = _fillOrderNoThrow(\n                order,\n                remainingTakerAssetFillAmount,\n                signature\n            );\n\n            sellFillResults.wethSpentAmount = singleFillResults.takerAssetFilledAmount;\n            sellFillResults.protocolFeePaid = singleFillResults.protocolFeePaid;\n\n            // Subtract fee from makerAssetFilledAmount for the net amount acquired.\n            sellFillResults.makerAssetAcquiredAmount = singleFillResults.makerAssetFilledAmount\n                .safeSub(singleFillResults.takerFeePaid);\n\n        // WETH fee\n        } else if (_areUnderlyingAssetsEqual(order.takerFeeAssetData, order.takerAssetData)) {\n\n            // We will first sell WETH as the takerAsset, then use it to pay the takerFee.\n            // This ensures that we reserve enough to pay the taker and protocol fees.\n            uint256 takerAssetFillAmount = LibMath.getPartialAmountCeil(\n                order.takerAssetAmount,\n                order.takerAssetAmount.safeAdd(order.takerFee),\n                remainingTakerAssetFillAmount\n            );\n\n            LibFillResults.FillResults memory singleFillResults = _fillOrderNoThrow(\n                order,\n                takerAssetFillAmount,\n                signature\n            );\n\n            // WETH is also spent on the taker fee, so we add it here.\n            sellFillResults.wethSpentAmount = singleFillResults.takerAssetFilledAmount\n                .safeAdd(singleFillResults.takerFeePaid);\n            sellFillResults.makerAssetAcquiredAmount = singleFillResults.makerAssetFilledAmount;\n            sellFillResults.protocolFeePaid = singleFillResults.protocolFeePaid;\n\n        // Unsupported fee\n        } else {\n            LibRichErrors.rrevert(LibForwarderRichErrors.UnsupportedFeeError(order.takerFeeAssetData));\n        }\n\n        // Account for the ERC20Bridge transfering more of the maker asset than expected.\n        if (makerAssetProxyId == ERC20_BRIDGE_PROXY_ID) {\n            uint256 balanceAfter = IERC20Token(tokenAddress).balanceOf(address(this));\n            sellFillResults.makerAssetAcquiredAmount = LibSafeMath.max256(\n                balanceAfter.safeSub(balanceBefore),\n                sellFillResults.makerAssetAcquiredAmount\n            );\n        }\n\n        order.makerAssetData.transferOut(sellFillResults.makerAssetAcquiredAmount);\n        return sellFillResults;\n    }\n\n    /// @dev Synchronously executes multiple calls of fillOrder until total amount of WETH has been sold by taker.\n    /// @param orders Array of order specifications.\n    /// @param wethSellAmount Desired amount of WETH to sell.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return totalWethSpentAmount Total amount of WETH spent on the given orders.\n    /// @return totalMakerAssetAcquiredAmount Total amount of maker asset acquired from the given orders.\n    function _marketSellNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256 wethSellAmount,\n        bytes[] memory signatures\n    )\n        internal\n        returns (\n            uint256 totalWethSpentAmount,\n            uint256 totalMakerAssetAcquiredAmount\n        )\n    {\n        uint256 protocolFee = tx.gasprice.safeMul(EXCHANGE.protocolFeeMultiplier());\n\n        for (uint256 i = 0; i != orders.length; i++) {\n            // Preemptively skip to avoid division by zero in _marketSellSingleOrder\n            if (orders[i].makerAssetAmount == 0 || orders[i].takerAssetAmount == 0) {\n                continue;\n            }\n\n            // The remaining amount of WETH to sell\n            uint256 remainingTakerAssetFillAmount = wethSellAmount\n                .safeSub(totalWethSpentAmount);\n            uint256 currentProtocolFee = _isV2Order(orders[i]) ? 0 : protocolFee;\n            if (remainingTakerAssetFillAmount > currentProtocolFee) {\n                // Do not count the protocol fee as part of the fill amount.\n                remainingTakerAssetFillAmount = remainingTakerAssetFillAmount.safeSub(currentProtocolFee);\n            } else {\n                // Stop if we don't have at least enough ETH to pay another protocol fee.\n                break;\n            }\n\n            SellFillResults memory sellFillResults = _marketSellSingleOrder(\n                orders[i],\n                signatures[i],\n                remainingTakerAssetFillAmount\n            );\n\n            totalWethSpentAmount = totalWethSpentAmount\n                .safeAdd(sellFillResults.wethSpentAmount)\n                .safeAdd(sellFillResults.protocolFeePaid);\n            totalMakerAssetAcquiredAmount = totalMakerAssetAcquiredAmount\n                .safeAdd(sellFillResults.makerAssetAcquiredAmount);\n\n            // Stop execution if the entire amount of WETH has been sold\n            if (totalWethSpentAmount >= wethSellAmount) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Synchronously executes multiple calls of fillOrder until total amount of WETH (exclusive of protocol fee)\n    ///      has been sold by taker.\n    /// @param orders Array of order specifications.\n    /// @param wethSellAmount Desired amount of WETH to sell.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return totalWethSpentAmount Total amount of WETH spent on the given orders.\n    /// @return totalMakerAssetAcquiredAmount Total amount of maker asset acquired from the given orders.\n    function _marketSellExactAmountNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256 wethSellAmount,\n        bytes[] memory signatures\n    )\n        internal\n        returns (\n            uint256 totalWethSpentAmount,\n            uint256 totalMakerAssetAcquiredAmount\n        )\n    {\n        uint256 totalProtocolFeePaid;\n\n        for (uint256 i = 0; i != orders.length; i++) {\n            // Preemptively skip to avoid division by zero in _marketSellSingleOrder\n            if (orders[i].makerAssetAmount == 0 || orders[i].takerAssetAmount == 0) {\n                continue;\n            }\n\n            // The remaining amount of WETH to sell\n            uint256 remainingTakerAssetFillAmount = wethSellAmount\n                .safeSub(totalWethSpentAmount);\n\n            SellFillResults memory sellFillResults = _marketSellSingleOrder(\n                orders[i],\n                signatures[i],\n                remainingTakerAssetFillAmount\n            );\n\n            totalWethSpentAmount = totalWethSpentAmount\n                .safeAdd(sellFillResults.wethSpentAmount);\n            totalMakerAssetAcquiredAmount = totalMakerAssetAcquiredAmount\n                .safeAdd(sellFillResults.makerAssetAcquiredAmount);\n            totalProtocolFeePaid = totalProtocolFeePaid.safeAdd(sellFillResults.protocolFeePaid);\n\n            // Stop execution if the entire amount of WETH has been sold\n            if (totalWethSpentAmount >= wethSellAmount) {\n                break;\n            }\n        }\n        totalWethSpentAmount = totalWethSpentAmount.safeAdd(totalProtocolFeePaid);\n    }\n\n    /// @dev Executes a single call of fillOrder according to the makerAssetBuyAmount and\n    ///      the amount already bought.\n    /// @param order A single order specification.\n    /// @param signature Signature for the given order.\n    /// @param remainingMakerAssetFillAmount Remaining amount of maker asset to buy.\n    /// @return wethSpentAmount Amount of WETH spent on the given order.\n    /// @return makerAssetAcquiredAmount Amount of maker asset acquired from the given order.\n    function _marketBuySingleOrder(\n        LibOrder.Order memory order,\n        bytes memory signature,\n        uint256 remainingMakerAssetFillAmount\n    )\n        internal\n        returns (\n            uint256 wethSpentAmount,\n            uint256 makerAssetAcquiredAmount\n        )\n    {\n        // No taker fee or WETH fee\n        if (\n            order.takerFee == 0 ||\n            _areUnderlyingAssetsEqual(order.takerFeeAssetData, order.takerAssetData)\n        ) {\n            // Calculate the remaining amount of takerAsset to sell\n            uint256 remainingTakerAssetFillAmount = LibMath.getPartialAmountCeil(\n                order.takerAssetAmount,\n                order.makerAssetAmount,\n                remainingMakerAssetFillAmount\n            );\n\n            // Attempt to sell the remaining amount of takerAsset\n            LibFillResults.FillResults memory singleFillResults = _fillOrderNoThrow(\n                order,\n                remainingTakerAssetFillAmount,\n                signature\n            );\n\n            // WETH is also spent on the protocol and taker fees, so we add it here.\n            wethSpentAmount = singleFillResults.takerAssetFilledAmount\n                .safeAdd(singleFillResults.takerFeePaid)\n                .safeAdd(singleFillResults.protocolFeePaid);\n\n            makerAssetAcquiredAmount = singleFillResults.makerAssetFilledAmount;\n\n        // Percentage fee\n        } else if (_areUnderlyingAssetsEqual(order.takerFeeAssetData, order.makerAssetData)) {\n            // Calculate the remaining amount of takerAsset to sell\n            uint256 remainingTakerAssetFillAmount = LibMath.getPartialAmountCeil(\n                order.takerAssetAmount,\n                order.makerAssetAmount.safeSub(order.takerFee),\n                remainingMakerAssetFillAmount\n            );\n\n            // Attempt to sell the remaining amount of takerAsset\n            LibFillResults.FillResults memory singleFillResults = _fillOrderNoThrow(\n                order,\n                remainingTakerAssetFillAmount,\n                signature\n            );\n\n            wethSpentAmount = singleFillResults.takerAssetFilledAmount\n                .safeAdd(singleFillResults.protocolFeePaid);\n\n            // Subtract fee from makerAssetFilledAmount for the net amount acquired.\n            makerAssetAcquiredAmount = singleFillResults.makerAssetFilledAmount\n                .safeSub(singleFillResults.takerFeePaid);\n\n        // Unsupported fee\n        } else {\n            LibRichErrors.rrevert(LibForwarderRichErrors.UnsupportedFeeError(order.takerFeeAssetData));\n        }\n\n        return (wethSpentAmount, makerAssetAcquiredAmount);\n    }\n\n    /// @dev Synchronously executes multiple fill orders in a single transaction until total amount is acquired.\n    ///      Note that the Forwarder may fill more than the makerAssetBuyAmount so that, after percentage fees\n    ///      are paid, the net amount acquired after fees is equal to makerAssetBuyAmount (modulo rounding).\n    ///      The asset being sold by taker must always be WETH.\n    /// @param orders Array of order specifications.\n    /// @param makerAssetBuyAmount Desired amount of makerAsset to fill.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return totalWethSpentAmount Total amount of WETH spent on the given orders.\n    /// @return totalMakerAssetAcquiredAmount Total amount of maker asset acquired from the given orders.\n    function _marketBuyFillOrKill(\n        LibOrder.Order[] memory orders,\n        uint256 makerAssetBuyAmount,\n        bytes[] memory signatures\n    )\n        internal\n        returns (\n            uint256 totalWethSpentAmount,\n            uint256 totalMakerAssetAcquiredAmount\n        )\n    {\n        uint256 ordersLength = orders.length;\n        for (uint256 i = 0; i != ordersLength; i++) {\n            // Preemptively skip to avoid division by zero in _marketBuySingleOrder\n            if (orders[i].makerAssetAmount == 0 || orders[i].takerAssetAmount == 0) {\n                continue;\n            }\n\n            uint256 remainingMakerAssetFillAmount = makerAssetBuyAmount\n                .safeSub(totalMakerAssetAcquiredAmount);\n\n            // If the maker asset is ERC20Bridge, take a snapshot of the Forwarder contract's balance.\n            bytes4 makerAssetProxyId = orders[i].makerAssetData.readBytes4(0);\n            address tokenAddress;\n            uint256 balanceBefore;\n            if (makerAssetProxyId == ERC20_BRIDGE_PROXY_ID) {\n                tokenAddress = orders[i].makerAssetData.readAddress(16);\n                balanceBefore = IERC20Token(tokenAddress).balanceOf(address(this));\n            }\n\n            (\n                uint256 wethSpentAmount,\n                uint256 makerAssetAcquiredAmount\n            ) = _marketBuySingleOrder(\n                orders[i],\n                signatures[i],\n                remainingMakerAssetFillAmount\n            );\n\n            // Account for the ERC20Bridge transfering more of the maker asset than expected.\n            if (makerAssetProxyId == ERC20_BRIDGE_PROXY_ID) {\n                uint256 balanceAfter = IERC20Token(tokenAddress).balanceOf(address(this));\n                makerAssetAcquiredAmount = LibSafeMath.max256(\n                    balanceAfter.safeSub(balanceBefore),\n                    makerAssetAcquiredAmount\n                );\n            }\n\n            orders[i].makerAssetData.transferOut(makerAssetAcquiredAmount);\n\n            totalWethSpentAmount = totalWethSpentAmount\n                .safeAdd(wethSpentAmount);\n            totalMakerAssetAcquiredAmount = totalMakerAssetAcquiredAmount\n                .safeAdd(makerAssetAcquiredAmount);\n\n            // Stop execution if the entire amount of makerAsset has been bought\n            if (totalMakerAssetAcquiredAmount >= makerAssetBuyAmount) {\n                break;\n            }\n        }\n\n        if (totalMakerAssetAcquiredAmount < makerAssetBuyAmount) {\n            LibRichErrors.rrevert(LibForwarderRichErrors.CompleteBuyFailedError(\n                makerAssetBuyAmount,\n                totalMakerAssetAcquiredAmount\n            ));\n        }\n    }\n\n    /// @dev Fills the input ExchangeV2 order. The `makerFeeAssetData` must be\n    //       equal to EXCHANGE_V2_ORDER_ID (0x770501f8).\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    /// @return Amounts filled and fees paid by maker and taker.\n    function _fillV2OrderNoThrow(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        internal\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        // Strip v3 specific fields from order\n        IExchangeV2.Order memory v2Order = IExchangeV2.Order({\n            makerAddress: order.makerAddress,\n            takerAddress: order.takerAddress,\n            feeRecipientAddress: order.feeRecipientAddress,\n            senderAddress: order.senderAddress,\n            makerAssetAmount: order.makerAssetAmount,\n            takerAssetAmount: order.takerAssetAmount,\n            // NOTE: We assume fees are 0 for all v2 orders. Orders with non-zero fees will fail to be filled.\n            makerFee: 0,\n            takerFee: 0,\n            expirationTimeSeconds: order.expirationTimeSeconds,\n            salt: order.salt,\n            makerAssetData: order.makerAssetData,\n            takerAssetData: order.takerAssetData\n        });\n\n        // ABI encode calldata for `fillOrder`\n        bytes memory fillOrderCalldata = abi.encodeWithSelector(\n            IExchangeV2(address(0)).fillOrder.selector,\n            v2Order,\n            takerAssetFillAmount,\n            signature\n        );\n\n        address exchange = address(EXCHANGE_V2);\n        (bool didSucceed, bytes memory returnData) = exchange.call(fillOrderCalldata);\n        if (didSucceed) {\n            assert(returnData.length == 128);\n            // NOTE: makerFeePaid, takerFeePaid, and protocolFeePaid will always be 0 for v2 orders\n            (fillResults.makerAssetFilledAmount, fillResults.takerAssetFilledAmount) = abi.decode(returnData, (uint256, uint256));\n        }\n\n        // fillResults values will be 0 by default if call was unsuccessful\n        return fillResults;\n    }\n\n    /// @dev Fills the input ExchangeV3 order.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    /// @return Amounts filled and fees paid by maker and taker.\n    function _fillV3OrderNoThrow(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        internal\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        // ABI encode calldata for `fillOrder`\n        bytes memory fillOrderCalldata = abi.encodeWithSelector(\n            IExchange(address(0)).fillOrder.selector,\n            order,\n            takerAssetFillAmount,\n            signature\n        );\n\n        address exchange = address(EXCHANGE);\n        (bool didSucceed, bytes memory returnData) = exchange.call(fillOrderCalldata);\n        if (didSucceed) {\n            assert(returnData.length == 160);\n            fillResults = abi.decode(returnData, (LibFillResults.FillResults));\n        }\n\n        // fillResults values will be 0 by default if call was unsuccessful\n        return fillResults;\n    }\n\n    /// @dev Checks whether one asset is effectively equal to another asset.\n    ///      This is the case if they have the same ERC20Proxy/ERC20BridgeProxy asset data, or if\n    ///      one is the ERC20Bridge equivalent of the other.\n    /// @param assetData1 Byte array encoded for the takerFee asset proxy.\n    /// @param assetData2 Byte array encoded for the maker asset proxy.\n    /// @return areEqual Whether or not the underlying assets are equal.\n    function _areUnderlyingAssetsEqual(\n        bytes memory assetData1,\n        bytes memory assetData2\n    )\n        internal\n        pure\n        returns (bool)\n    {\n        bytes4 assetProxyId1 = assetData1.readBytes4(0);\n        bytes4 assetProxyId2 = assetData2.readBytes4(0);\n        bytes4 erc20ProxyId = IAssetData(address(0)).ERC20Token.selector;\n        bytes4 erc20BridgeProxyId = IAssetData(address(0)).ERC20Bridge.selector;\n\n        if (\n            (assetProxyId1 == erc20ProxyId || assetProxyId1 == erc20BridgeProxyId) &&\n            (assetProxyId2 == erc20ProxyId || assetProxyId2 == erc20BridgeProxyId)\n        ) {\n            // Compare the underlying token addresses.\n            address token1 = assetData1.readAddress(16);\n            address token2 = assetData2.readAddress(16);\n            return (token1 == token2);\n        } else {\n            return assetData1.equals(assetData2);\n        }\n    }\n\n    /// @dev Checks whether an order is a v2 order.\n    /// @param order Order struct containing order specifications.\n    /// @return True if the order's `makerFeeAssetData` is set to the v2 order id.\n    function _isV2Order(LibOrder.Order memory order)\n        internal\n        pure\n        returns (bool)\n    {\n        return order.makerFeeAssetData.length > 3 && order.makerFeeAssetData.readBytes4(0) == EXCHANGE_V2_ORDER_ID;\n    }\n}\n"
    },
    "@0x/contracts-extensions/contracts/src/LibAssetDataTransfer.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibRichErrors.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibSafeMath.sol\";\nimport \"@0x/contracts-erc20/contracts/src/LibERC20Token.sol\";\nimport \"@0x/contracts-erc721/contracts/src/interfaces/IERC721Token.sol\";\nimport \"@0x/contracts-erc1155/contracts/src/interfaces/IERC1155.sol\";\nimport \"@0x/contracts-asset-proxy/contracts/src/interfaces/IAssetData.sol\";\nimport \"./rich-errors/LibAssetDataTransferRichErrors.sol\";\n\n\nlibrary LibAssetDataTransfer {\n\n    using LibBytes for bytes;\n    using LibSafeMath for uint256;\n    using LibAssetDataTransfer for bytes;\n\n    /// @dev Transfers given amount of asset to sender.\n    /// @param assetData Byte array encoded for the respective asset proxy.\n    /// @param from Address to transfer asset from.\n    /// @param to Address to transfer asset to.\n    /// @param amount Amount of asset to transfer to sender.\n    function transferFrom(\n        bytes memory assetData,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        if (amount == 0) {\n            return;\n        }\n\n        bytes4 proxyId = assetData.readBytes4(0);\n\n        if (\n            proxyId == IAssetData(address(0)).ERC20Token.selector ||\n            proxyId == IAssetData(address(0)).ERC20Bridge.selector\n        ) {\n            assetData.transferERC20Token(\n                from,\n                to,\n                amount\n            );\n        } else if (proxyId == IAssetData(address(0)).ERC721Token.selector) {\n            assetData.transferERC721Token(\n                from,\n                to,\n                amount\n            );\n        } else if (proxyId == IAssetData(address(0)).ERC1155Assets.selector) {\n            assetData.transferERC1155Assets(\n                from,\n                to,\n                amount\n            );\n        } else if (proxyId == IAssetData(address(0)).MultiAsset.selector) {\n            assetData.transferMultiAsset(\n                from,\n                to,\n                amount\n            );\n        } else if (proxyId != IAssetData(address(0)).StaticCall.selector) {\n            LibRichErrors.rrevert(LibAssetDataTransferRichErrors.UnsupportedAssetProxyError(\n                proxyId\n            ));\n        }\n    }\n\n    ///@dev Transfer asset from sender to this contract.\n    /// @param assetData Byte array encoded for the respective asset proxy.\n    /// @param amount Amount of asset to transfer to sender.\n    function transferIn(\n        bytes memory assetData,\n        uint256 amount\n    )\n        internal\n    {\n        assetData.transferFrom(\n            msg.sender,\n            address(this),\n            amount\n        );\n    }\n\n    ///@dev Transfer asset from this contract to sender.\n    /// @param assetData Byte array encoded for the respective asset proxy.\n    /// @param amount Amount of asset to transfer to sender.\n    function transferOut(\n        bytes memory assetData,\n        uint256 amount\n    )\n        internal\n    {\n        assetData.transferFrom(\n            address(this),\n            msg.sender,\n            amount\n        );\n    }\n\n    /// @dev Decodes ERC20 or ERC20Bridge assetData and transfers given amount to sender.\n    /// @param assetData Byte array encoded for the respective asset proxy.\n    /// @param from Address to transfer asset from.\n    /// @param to Address to transfer asset to.\n    /// @param amount Amount of asset to transfer to sender.\n    function transferERC20Token(\n        bytes memory assetData,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        address token = assetData.readAddress(16);\n        // Transfer tokens.\n        if (from == address(this)) {\n            LibERC20Token.transfer(\n                token,\n                to,\n                amount\n            );\n        } else {\n            LibERC20Token.transferFrom(\n                token,\n                from,\n                to,\n                amount\n            );\n        }\n    }\n\n    /// @dev Decodes ERC721 assetData and transfers given amount to sender.\n    /// @param assetData Byte array encoded for the respective asset proxy.\n    /// @param from Address to transfer asset from.\n    /// @param to Address to transfer asset to.\n    /// @param amount Amount of asset to transfer to sender.\n    function transferERC721Token(\n        bytes memory assetData,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        if (amount != 1) {\n            LibRichErrors.rrevert(LibAssetDataTransferRichErrors.Erc721AmountMustEqualOneError(\n                amount\n            ));\n        }\n        // Decode asset data.\n        address token = assetData.readAddress(16);\n        uint256 tokenId = assetData.readUint256(36);\n\n        // Perform transfer.\n        IERC721Token(token).transferFrom(\n            from,\n            to,\n            tokenId\n        );\n    }\n\n    /// @dev Decodes ERC1155 assetData and transfers given amounts to sender.\n    /// @param assetData Byte array encoded for the respective asset proxy.\n    /// @param from Address to transfer asset from.\n    /// @param to Address to transfer asset to.\n    /// @param amount Amount of asset to transfer to sender.\n    function transferERC1155Assets(\n        bytes memory assetData,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        // Decode assetData\n        // solhint-disable\n        (\n            address token,\n            uint256[] memory ids,\n            uint256[] memory values,\n            bytes memory data\n        ) = abi.decode(\n            assetData.slice(4, assetData.length),\n            (address, uint256[], uint256[], bytes)\n        );\n        // solhint-enable\n\n        // Scale up values by `amount`\n        uint256 length = values.length;\n        uint256[] memory scaledValues = new uint256[](length);\n        for (uint256 i = 0; i != length; i++) {\n            scaledValues[i] = values[i].safeMul(amount);\n        }\n\n        // Execute `safeBatchTransferFrom` call\n        // Either succeeds or throws\n        IERC1155(token).safeBatchTransferFrom(\n            from,\n            to,\n            ids,\n            scaledValues,\n            data\n        );\n    }\n\n    /// @dev Decodes MultiAsset assetData and recursively transfers assets to sender.\n    /// @param assetData Byte array encoded for the respective asset proxy.\n    /// @param from Address to transfer asset from.\n    /// @param to Address to transfer asset to.\n    /// @param amount Amount of asset to transfer to sender.\n    function transferMultiAsset(\n        bytes memory assetData,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        // solhint-disable indent\n        (uint256[] memory nestedAmounts, bytes[] memory nestedAssetData) = abi.decode(\n            assetData.slice(4, assetData.length),\n            (uint256[], bytes[])\n        );\n        // solhint-enable indent\n\n        uint256 numNestedAssets = nestedAssetData.length;\n        for (uint256 i = 0; i != numNestedAssets; i++) {\n            transferFrom(\n                nestedAssetData[i],\n                from,\n                to,\n                amount.safeMul(nestedAmounts[i])\n            );\n        }\n    }\n}\n"
    },
    "contracts/exchange-forwarder/contracts/src/libs/LibForwarderRichErrors.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\nlibrary LibForwarderRichErrors {\n\n    // bytes4(keccak256(\"UnregisteredAssetProxyError()\"))\n    bytes4 internal constant UNREGISTERED_ASSET_PROXY_ERROR_SELECTOR =\n        0xf3b96b8d;\n\n    // bytes4(keccak256(\"CompleteBuyFailedError(uint256,uint256)\"))\n    bytes4 internal constant COMPLETE_BUY_FAILED_ERROR_SELECTOR =\n        0x91353a0c;\n\n    // bytes4(keccak256(\"CompleteSellFailedError(uint256,uint256)\"))\n    bytes4 internal constant COMPLETE_SELL_FAILED_ERROR_SELECTOR =\n        0x450a0219;\n\n    // bytes4(keccak256(\"UnsupportedFeeError(bytes)\"))\n    bytes4 internal constant UNSUPPORTED_FEE_ERROR_SELECTOR =\n        0x31360af1;\n\n    // bytes4(keccak256(\"OverspentWethError(uint256,uint256)\"))\n    bytes4 internal constant OVERSPENT_WETH_ERROR_SELECTOR =\n        0xcdcbed5d;\n\n    // solhint-disable func-name-mixedcase\n    function UnregisteredAssetProxyError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(UNREGISTERED_ASSET_PROXY_ERROR_SELECTOR);\n    }\n\n    function CompleteBuyFailedError(\n        uint256 expectedAssetBuyAmount,\n        uint256 actualAssetBuyAmount\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            COMPLETE_BUY_FAILED_ERROR_SELECTOR,\n            expectedAssetBuyAmount,\n            actualAssetBuyAmount\n        );\n    }\n\n    function CompleteSellFailedError(\n        uint256 expectedAssetSellAmount,\n        uint256 actualAssetSellAmount\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            COMPLETE_SELL_FAILED_ERROR_SELECTOR,\n            expectedAssetSellAmount,\n            actualAssetSellAmount\n        );\n    }\n\n    function UnsupportedFeeError(\n        bytes memory takerFeeAssetData\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UNSUPPORTED_FEE_ERROR_SELECTOR,\n            takerFeeAssetData\n        );\n    }\n\n    function OverspentWethError(\n        uint256 wethSpent,\n        uint256 msgValue\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            OVERSPENT_WETH_ERROR_SELECTOR,\n            wethSpent,\n            msgValue\n        );\n    }\n}\n"
    },
    "contracts/exchange-forwarder/contracts/src/interfaces/IExchangeV2.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\n\ncontract IExchangeV2 {\n\n    // solhint-disable max-line-length\n    struct Order {\n        address makerAddress;           // Address that created the order.      \n        address takerAddress;           // Address that is allowed to fill the order. If set to 0, any address is allowed to fill the order.          \n        address feeRecipientAddress;    // Address that will recieve fees when order is filled.      \n        address senderAddress;          // Address that is allowed to call Exchange contract methods that affect this order. If set to 0, any address is allowed to call these methods.\n        uint256 makerAssetAmount;       // Amount of makerAsset being offered by maker. Must be greater than 0.        \n        uint256 takerAssetAmount;       // Amount of takerAsset being bid on by maker. Must be greater than 0.        \n        uint256 makerFee;               // Amount of ZRX paid to feeRecipient by maker when order is filled. If set to 0, no transfer of ZRX from maker to feeRecipient will be attempted.\n        uint256 takerFee;               // Amount of ZRX paid to feeRecipient by taker when order is filled. If set to 0, no transfer of ZRX from taker to feeRecipient will be attempted.\n        uint256 expirationTimeSeconds;  // Timestamp in seconds at which order expires.          \n        uint256 salt;                   // Arbitrary number to facilitate uniqueness of the order's hash.     \n        bytes makerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring makerAsset. The last byte references the id of this proxy.\n        bytes takerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring takerAsset. The last byte references the id of this proxy.\n    }\n    // solhint-enable max-line-length\n\n    struct FillResults {\n        uint256 makerAssetFilledAmount;  // Total amount of makerAsset(s) filled.\n        uint256 takerAssetFilledAmount;  // Total amount of takerAsset(s) filled.\n        uint256 makerFeePaid;            // Total amount of ZRX paid by maker(s) to feeRecipient(s).\n        uint256 takerFeePaid;            // Total amount of ZRX paid by taker to feeRecipients(s).\n    }\n\n    struct OrderInfo {\n        uint8 orderStatus;                    // Status that describes order's validity and fillability.\n        bytes32 orderHash;                    // EIP712 typed data hash of the order (see LibOrder.getTypedDataHash).\n        uint256 orderTakerAssetFilledAmount;  // Amount of order that has already been filled.\n    }\n\n    /// @dev Fills the input order.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    /// @return Amounts filled and fees paid by maker and taker.\n    function fillOrder(\n        Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        returns (FillResults memory fillResults);\n\n    /// @dev Gets information about an order: status, hash, and amount filled.\n    /// @param order Order to gather information on.\n    /// @return OrderInfo Information about the order and its state.\n    ///         See LibOrder.OrderInfo for a complete description.\n    function getOrderInfo(Order memory order)\n        public\n        returns (OrderInfo memory orderInfo);\n}\n"
    },
    "@0x/contracts-extensions/contracts/src/rich-errors/LibAssetDataTransferRichErrors.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\nlibrary LibAssetDataTransferRichErrors {\n\n    // bytes4(keccak256(\"UnsupportedAssetProxyError(bytes4)\"))\n    bytes4 internal constant UNSUPPORTED_ASSET_PROXY_ERROR_SELECTOR =\n        0x7996a271;\n\n    // bytes4(keccak256(\"Erc721AmountMustEqualOneError(uint256)\"))\n    bytes4 internal constant ERC721_AMOUNT_MUST_EQUAL_ONE_ERROR_SELECTOR =\n        0xbaffa474;\n        \n    // solhint-disable func-name-mixedcase\n    function UnsupportedAssetProxyError(\n        bytes4 proxyId\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UNSUPPORTED_ASSET_PROXY_ERROR_SELECTOR,\n            proxyId\n        );\n    }\n\n    function Erc721AmountMustEqualOneError(\n        uint256 amount\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ERC721_AMOUNT_MUST_EQUAL_ONE_ERROR_SELECTOR,\n            amount\n        );\n    }\n}\n"
    },
    "contracts/exchange-forwarder/contracts/test/TestForwarder.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-extensions/contracts/src/LibAssetDataTransfer.sol\";\nimport \"../src/MixinExchangeWrapper.sol\";\nimport \"../src/MixinReceiver.sol\";\n\n\ncontract TestForwarder is\n    MixinExchangeWrapper,\n    MixinReceiver\n{\n    using LibAssetDataTransfer for bytes;\n\n    // solhint-disable no-empty-blocks\n    constructor ()\n        public\n        MixinExchangeWrapper(\n            address(0),\n            address(0)\n        )\n    {}\n\n    function areUnderlyingAssetsEqual(\n        bytes memory assetData1,\n        bytes memory assetData2\n    )\n        public\n        returns (bool)\n    {\n        return _areUnderlyingAssetsEqual(\n            assetData1,\n            assetData2\n        );\n    }\n\n    function transferOut(\n        bytes memory assetData,\n        uint256 amount\n    )\n        public\n    {\n        assetData.transferOut(amount);\n    }\n}\n"
    },
    "contracts/exchange-forwarder/contracts/src/MixinReceiver.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ncontract MixinReceiver {\n\n    bytes4 constant public ERC1155_RECEIVED       = 0xf23a6e61;\n    bytes4 constant public ERC1155_BATCH_RECEIVED = 0xbc197c81;\n\n    /// @notice Handle the receipt of a single ERC1155 token type\n    /// @dev The smart contract calls this function on the recipient\n    /// after a `safeTransferFrom`. This function MAY throw to revert and reject the\n    /// transfer. Return of other than the magic value MUST result in the\n    ///transaction being reverted\n    /// Note: the contract address is always the message sender\n    /// @param operator  The address which called `safeTransferFrom` function\n    /// @param from      The address which previously owned the token\n    /// @param id        An array containing the ids of the token being transferred\n    /// @param value     An array containing the amount of tokens being transferred\n    /// @param data      Additional data with no specified format\n    /// @return          `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    )\n        external\n        returns (bytes4)\n    {\n        return ERC1155_RECEIVED;\n    }\n\n    /// @notice Handle the receipt of multiple ERC1155 token types\n    /// @dev The smart contract calls this function on the recipient\n    /// after a `safeTransferFrom`. This function MAY throw to revert and reject the\n    /// transfer. Return of other than the magic value MUST result in the\n    /// transaction being reverted\n    /// Note: the contract address is always the message sender\n    /// @param operator  The address which called `safeTransferFrom` function\n    /// @param from      The address which previously owned the token\n    /// @param ids       An array containing ids of each token being transferred\n    /// @param values    An array containing amounts of each token being transferred\n    /// @param data      Additional data with no specified format\n    /// @return           `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    )\n        external\n        returns (bytes4)\n    {\n        return ERC1155_BATCH_RECEIVED;\n    }\n}"
    },
    "contracts/exchange-forwarder/contracts/src/Forwarder.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-asset-proxy/contracts/src/interfaces/IAssetData.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibMath.sol\";\nimport \"@0x/contracts-extensions/contracts/src/LibAssetDataTransfer.sol\";\nimport \"@0x/contracts-extensions/contracts/src/MixinWethUtils.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibRichErrors.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibSafeMath.sol\";\nimport \"@0x/contracts-utils/contracts/src/Ownable.sol\";\nimport \"./libs/LibForwarderRichErrors.sol\";\nimport \"./MixinExchangeWrapper.sol\";\nimport \"./MixinReceiver.sol\";\nimport \"./interfaces/IForwarder.sol\";\n\n\ncontract Forwarder is\n    IForwarder,\n    Ownable,\n    MixinWethUtils,\n    MixinExchangeWrapper,\n    MixinReceiver\n{\n    using LibBytes for bytes;\n    using LibAssetDataTransfer for bytes;\n    using LibSafeMath for uint256;\n\n    constructor (\n        address _exchange,\n        address _exchangeV2,\n        address _weth\n    )\n        public\n        Ownable()\n        MixinWethUtils(\n            _exchange,\n            _weth\n        )\n        MixinExchangeWrapper(\n            _exchange,\n            _exchangeV2\n        )\n    {} // solhint-disable-line no-empty-blocks\n\n    /// @dev Withdraws assets from this contract. It may be used by the owner to withdraw assets\n    ///      that were accidentally sent to this contract.\n    /// @param assetData Byte array encoded for the respective asset proxy.\n    /// @param amount Amount of the asset to withdraw.\n    function withdrawAsset(\n        bytes calldata assetData,\n        uint256 amount\n    )\n        external\n        onlyOwner\n    {\n        assetData.transferOut(amount);\n    }\n\n    /// @dev Approves the respective proxy for a given asset to transfer tokens on the Forwarder contract's behalf.\n    ///      This is necessary because an order fee denominated in the maker asset (i.e. a percentage fee) is sent by the\n    ///      Forwarder contract to the fee recipient.\n    ///      This method needs to be called before forwarding orders of a maker asset that hasn't\n    ///      previously been approved.\n    /// @param assetData Byte array encoded for the respective asset proxy.\n    function approveMakerAssetProxy(bytes calldata assetData)\n        external\n    {\n        bytes4 proxyId = assetData.readBytes4(0);\n        bytes4 erc20ProxyId = IAssetData(address(0)).ERC20Token.selector;\n\n        // For now we only care about ERC20, since percentage fees on ERC721 tokens are invalid.\n        if (proxyId == erc20ProxyId) {\n            address proxyAddress = EXCHANGE.getAssetProxy(erc20ProxyId);\n            if (proxyAddress == address(0)) {\n                LibRichErrors.rrevert(LibForwarderRichErrors.UnregisteredAssetProxyError());\n            }\n            address token = assetData.readAddress(16);\n            LibERC20Token.approve(token, proxyAddress, MAX_UINT256);\n        }\n    }\n\n    /// @dev Purchases as much of orders' makerAssets as possible by selling as much of the ETH value sent\n    ///      as possible, accounting for order and forwarder fees.\n    /// @param orders Array of order specifications used containing desired makerAsset and WETH as takerAsset.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @param ethFeeAmounts Amounts of ETH, denominated in Wei, that are paid to corresponding feeRecipients.\n    /// @param feeRecipients Addresses that will receive ETH when orders are filled.\n    /// @return wethSpentAmount Amount of WETH spent on the given set of orders.\n    /// @return makerAssetAcquiredAmount Amount of maker asset acquired from the given set of orders.\n    function marketSellOrdersWithEth(\n        LibOrder.Order[] memory orders,\n        bytes[] memory signatures,\n        uint256[] memory ethFeeAmounts,\n        address payable[] memory feeRecipients\n    )\n        public\n        payable\n        returns (\n            uint256 wethSpentAmount,\n            uint256 makerAssetAcquiredAmount\n        )\n    {\n        // Pay ETH affiliate fees to all feeRecipient addresses\n        uint256 wethRemaining = _transferEthFeesAndWrapRemaining(\n            ethFeeAmounts,\n            feeRecipients\n        );\n        // Spends up to wethRemaining to fill orders, transfers purchased assets to msg.sender,\n        // and pays WETH order fees.\n        (\n            wethSpentAmount,\n            makerAssetAcquiredAmount\n        ) = _marketSellNoThrow(\n            orders,\n            wethRemaining,\n            signatures\n        );\n\n        // Ensure that no extra WETH owned by this contract has been spent.\n        if (wethSpentAmount > wethRemaining) {\n            LibRichErrors.rrevert(LibForwarderRichErrors.OverspentWethError(\n                wethSpentAmount,\n                msg.value\n            ));\n        }\n\n        // Calculate amount of WETH that hasn't been spent.\n        wethRemaining = wethRemaining.safeSub(wethSpentAmount);\n\n        // Refund remaining ETH to msg.sender.\n        _unwrapAndTransferEth(wethRemaining);\n    }\n\n    /// @dev Purchases as much of orders' makerAssets as possible by selling the specified amount of ETH\n    ///      accounting for order and forwarder fees. This functions throws if ethSellAmount was not reached.\n    /// @param orders Array of order specifications used containing desired makerAsset and WETH as takerAsset.\n    /// @param ethSellAmount Desired amount of ETH to sell.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @param ethFeeAmounts Amounts of ETH, denominated in Wei, that are paid to corresponding feeRecipients.\n    /// @param feeRecipients Addresses that will receive ETH when orders are filled.\n    /// @return wethSpentAmount Amount of WETH spent on the given set of orders.\n    /// @return makerAssetAcquiredAmount Amount of maker asset acquired from the given set of orders.\n    function marketSellAmountWithEth(\n        LibOrder.Order[] memory orders,\n        uint256 ethSellAmount,\n        bytes[] memory signatures,\n        uint256[] memory ethFeeAmounts,\n        address payable[] memory feeRecipients\n    )\n        public\n        payable\n        returns (\n            uint256 wethSpentAmount,\n            uint256 makerAssetAcquiredAmount\n        )\n    {\n        if (ethSellAmount > msg.value) {\n            LibRichErrors.rrevert(LibForwarderRichErrors.CompleteSellFailedError(\n                ethSellAmount,\n                msg.value\n            ));\n        }\n        // Pay ETH affiliate fees to all feeRecipient addresses\n        uint256 wethRemaining = _transferEthFeesAndWrapRemaining(\n            ethFeeAmounts,\n            feeRecipients\n        );\n        // Need enough remaining to ensure we can sell ethSellAmount\n        if (wethRemaining < ethSellAmount) {\n            LibRichErrors.rrevert(LibForwarderRichErrors.OverspentWethError(\n                wethRemaining,\n                ethSellAmount\n            ));\n        }\n        // Spends up to ethSellAmount to fill orders, transfers purchased assets to msg.sender,\n        // and pays WETH order fees.\n        (\n            wethSpentAmount,\n            makerAssetAcquiredAmount\n        ) = _marketSellExactAmountNoThrow(\n            orders,\n            ethSellAmount,\n            signatures\n        );\n        // Ensure we sold the specified amount (note: wethSpentAmount includes fees)\n        if (wethSpentAmount < ethSellAmount) {\n            LibRichErrors.rrevert(LibForwarderRichErrors.CompleteSellFailedError(\n                ethSellAmount,\n                wethSpentAmount\n            ));\n        }\n\n        // Calculate amount of WETH that hasn't been spent.\n        wethRemaining = wethRemaining.safeSub(wethSpentAmount);\n\n        // Refund remaining ETH to msg.sender.\n        _unwrapAndTransferEth(wethRemaining);\n    }\n\n    /// @dev Attempt to buy makerAssetBuyAmount of makerAsset by selling ETH provided with transaction.\n    ///      The Forwarder may *fill* more than makerAssetBuyAmount of the makerAsset so that it can\n    ///      pay takerFees where takerFeeAssetData == makerAssetData (i.e. percentage fees).\n    ///      Any ETH not spent will be refunded to sender.\n    /// @param orders Array of order specifications used containing desired makerAsset and WETH as takerAsset.\n    /// @param makerAssetBuyAmount Desired amount of makerAsset to purchase.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @param ethFeeAmounts Amounts of ETH, denominated in Wei, that are paid to corresponding feeRecipients.\n    /// @param feeRecipients Addresses that will receive ETH when orders are filled.\n    /// @return wethSpentAmount Amount of WETH spent on the given set of orders.\n    /// @return makerAssetAcquiredAmount Amount of maker asset acquired from the given set of orders.\n    function marketBuyOrdersWithEth(\n        LibOrder.Order[] memory orders,\n        uint256 makerAssetBuyAmount,\n        bytes[] memory signatures,\n        uint256[] memory ethFeeAmounts,\n        address payable[] memory feeRecipients\n    )\n        public\n        payable\n        returns (\n            uint256 wethSpentAmount,\n            uint256 makerAssetAcquiredAmount\n        )\n    {\n        // Pay ETH affiliate fees to all feeRecipient addresses\n        uint256 wethRemaining = _transferEthFeesAndWrapRemaining(\n            ethFeeAmounts,\n            feeRecipients\n        );\n\n        // Attempts to fill the desired amount of makerAsset and trasnfer purchased assets to msg.sender.\n        (\n            wethSpentAmount,\n            makerAssetAcquiredAmount\n        ) = _marketBuyFillOrKill(\n            orders,\n            makerAssetBuyAmount,\n            signatures\n        );\n\n        // Ensure that no extra WETH owned by this contract has been spent.\n        if (wethSpentAmount > wethRemaining) {\n            LibRichErrors.rrevert(LibForwarderRichErrors.OverspentWethError(\n                wethSpentAmount,\n                msg.value\n            ));\n        }\n\n        // Calculate amount of WETH that hasn't been spent.\n        wethRemaining = wethRemaining.safeSub(wethSpentAmount);\n\n        // Refund remaining ETH to msg.sender.\n        _unwrapAndTransferEth(wethRemaining);\n    }\n}\n"
    },
    "@0x/contracts-extensions/contracts/src/MixinWethUtils.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations \\under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-asset-proxy/contracts/src/interfaces/IAssetData.sol\";\nimport \"@0x/contracts-erc20/contracts/src/interfaces/IEtherToken.sol\";\nimport \"@0x/contracts-exchange/contracts/src/interfaces/IExchange.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibRichErrors.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibSafeMath.sol\";\nimport \"./rich-errors/LibWethUtilsRichErrors.sol\";\n\n\ncontract MixinWethUtils {\n\n    uint256 constant internal MAX_UINT256 = uint256(-1);\n\n     // solhint-disable var-name-mixedcase\n    IEtherToken internal WETH;\n    bytes internal WETH_ASSET_DATA;\n    // solhint-enable var-name-mixedcase\n\n    using LibSafeMath for uint256;\n\n    constructor (\n        address exchange,\n        address weth\n    )\n        public\n    {\n        WETH = IEtherToken(weth);\n        WETH_ASSET_DATA = abi.encodeWithSelector(\n            IAssetData(address(0)).ERC20Token.selector,\n            weth\n        );\n\n        address proxyAddress = IExchange(exchange).getAssetProxy(IAssetData(address(0)).ERC20Token.selector);\n        if (proxyAddress == address(0)) {\n            LibRichErrors.rrevert(LibWethUtilsRichErrors.UnregisteredAssetProxyError());\n        }\n        WETH.approve(proxyAddress, MAX_UINT256);\n\n        address protocolFeeCollector = IExchange(exchange).protocolFeeCollector();\n        if (protocolFeeCollector != address(0)) {\n            WETH.approve(protocolFeeCollector, MAX_UINT256);\n        }\n    }\n\n    /// @dev Default payable function, this allows us to withdraw WETH\n    function ()\n        external\n        payable\n    {\n        if (msg.sender != address(WETH)) {\n            LibRichErrors.rrevert(LibWethUtilsRichErrors.DefaultFunctionWethContractOnlyError(\n                msg.sender\n            ));\n        }\n    }\n\n    /// @dev Transfers ETH denominated fees to all feeRecipient addresses\n    /// @param ethFeeAmounts Amounts of ETH, denominated in Wei, that are paid to corresponding feeRecipients.\n    /// @param feeRecipients Addresses that will receive ETH when orders are filled.\n    /// @return ethRemaining msg.value minus the amount of ETH spent on affiliate fees.\n    function _transferEthFeesAndWrapRemaining(\n        uint256[] memory ethFeeAmounts,\n        address payable[] memory feeRecipients\n    )\n        internal\n        returns (uint256 ethRemaining)\n    {\n        uint256 feesLen = ethFeeAmounts.length;\n        // ethFeeAmounts len must equal feeRecipients len\n        if (feesLen != feeRecipients.length) {\n            LibRichErrors.rrevert(LibWethUtilsRichErrors.EthFeeLengthMismatchError(\n                feesLen,\n                feeRecipients.length\n            ));\n        }\n\n        // This function is always called before any other function, so we assume that\n        // the ETH remaining is the entire msg.value.\n        ethRemaining = msg.value;\n\n        for (uint256 i = 0; i != feesLen; i++) {\n            uint256 ethFeeAmount = ethFeeAmounts[i];\n            // Ensure there is enough ETH to pay the fee\n            if (ethRemaining < ethFeeAmount) {\n                LibRichErrors.rrevert(LibWethUtilsRichErrors.InsufficientEthForFeeError(\n                    ethFeeAmount,\n                    ethRemaining\n                ));\n            }\n            // Decrease ethRemaining and transfer fee to corresponding feeRecipient\n            ethRemaining = ethRemaining.safeSub(ethFeeAmount);\n            feeRecipients[i].transfer(ethFeeAmount);\n        }\n\n        // Convert remaining ETH to WETH.\n        WETH.deposit.value(ethRemaining)();\n\n        return ethRemaining;\n    }\n\n    /// @dev Unwraps WETH and transfers ETH to msg.sender.\n    /// @param transferAmount Amount of WETH balance to unwrap and transfer.\n    function _unwrapAndTransferEth(\n        uint256 transferAmount\n    )\n        internal\n    {\n        // Do nothing if amount is zero\n        if (transferAmount > 0) {\n            // Convert WETH to ETH\n            WETH.withdraw(transferAmount);\n            // Transfer ETH to sender\n            msg.sender.transfer(transferAmount);\n        }\n    }\n}\n"
    },
    "contracts/exchange-forwarder/contracts/src/interfaces/IForwarder.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol\";\n\n\ncontract IForwarder {\n    \n    /// @dev Withdraws assets from this contract. The contract requires a ZRX balance in order to\n    ///      function optimally, and this function allows the ZRX to be withdrawn by owner. It may also be\n    ///      used to withdraw assets that were accidentally sent to this contract.\n    /// @param assetData Byte array encoded for the respective asset proxy.\n    /// @param amount Amount of ERC20 token to withdraw.\n    function withdrawAsset(\n        bytes calldata assetData,\n        uint256 amount\n    )\n        external;\n\n        /// @dev Approves the respective proxy for a given asset to transfer tokens on the Forwarder contract's behalf.\n        ///      This is necessary because an order fee denominated in the maker asset (i.e. a percentage fee) is sent by the\n        ///      Forwarder contract to the fee recipient.\n        ///      This method needs to be called before forwarding orders of a maker asset that hasn't\n        ///      previously been approved.\n        /// @param assetData Byte array encoded for the respective asset proxy.\n    function approveMakerAssetProxy(\n        bytes calldata assetData\n    )\n        external;\n\n    /// @dev Purchases as much of orders' makerAssets as possible by selling as much of the ETH value sent\n    ///      as possible, accounting for order and forwarder fees.\n    /// @param orders Array of order specifications used containing desired makerAsset and WETH as takerAsset.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @param ethFeeAmounts Amounts of ETH, denominated in Wei, that are paid to corresponding feeRecipients.\n    /// @param feeRecipients Addresses that will receive ETH when orders are filled.\n    /// @return wethSpentAmount Amount of WETH spent on the given set of orders.\n    /// @return makerAssetAcquiredAmount Amount of maker asset acquired from the given set of orders.\n    function marketSellOrdersWithEth(\n        LibOrder.Order[] memory orders,\n        bytes[] memory signatures,\n        uint256[] memory ethFeeAmounts,\n        address payable[] memory feeRecipients\n    )\n        public\n        payable\n        returns (\n            uint256 wethSpentAmount,\n            uint256 makerAssetAcquiredAmount\n        );\n\n    /// @dev Attempt to buy makerAssetBuyAmount of makerAsset by selling ETH provided with transaction.\n    ///      The Forwarder may *fill* more than makerAssetBuyAmount of the makerAsset so that it can\n    ///      pay takerFees where takerFeeAssetData == makerAssetData (i.e. percentage fees).\n    ///      Any ETH not spent will be refunded to sender.\n    /// @param orders Array of order specifications used containing desired makerAsset and WETH as takerAsset.\n    /// @param makerAssetBuyAmount Desired amount of makerAsset to purchase.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @param ethFeeAmounts Amounts of ETH, denominated in Wei, that are paid to corresponding feeRecipients.\n    /// @param feeRecipients Addresses that will receive ETH when orders are filled.\n    /// @return wethSpentAmount Amount of WETH spent on the given set of orders.\n    /// @return makerAssetAcquiredAmount Amount of maker asset acquired from the given set of orders.\n    function marketBuyOrdersWithEth(\n        LibOrder.Order[] memory orders,\n        uint256 makerAssetBuyAmount,\n        bytes[] memory signatures,\n        uint256[] memory ethFeeAmounts,\n        address payable[] memory feeRecipients\n    )\n        public\n        payable\n        returns (\n            uint256 wethSpentAmount,\n            uint256 makerAssetAcquiredAmount\n        );\n}\n"
    },
    "@0x/contracts-extensions/contracts/src/rich-errors/LibWethUtilsRichErrors.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\nlibrary LibWethUtilsRichErrors {\n\n    // bytes4(keccak256(\"UnregisteredAssetProxyError()\"))\n    bytes4 internal constant UNREGISTERED_ASSET_PROXY_ERROR_SELECTOR =\n        0xf3b96b8d;\n\n    // bytes4(keccak256(\"InsufficientEthForFeeError(uint256,uint256)\"))\n    bytes4 internal constant INSUFFICIENT_ETH_FOR_FEE_ERROR_SELECTOR =\n        0xecf40fd9;\n\n    // bytes4(keccak256(\"DefaultFunctionWethContractOnlyError(address)\"))\n    bytes4 internal constant DEFAULT_FUNCTION_WETH_CONTRACT_ONLY_ERROR_SELECTOR =\n        0x08b18698;\n\n    // bytes4(keccak256(\"EthFeeLengthMismatchError(uint256,uint256)\"))\n    bytes4 internal constant ETH_FEE_LENGTH_MISMATCH_ERROR_SELECTOR =\n        0x3ecb6ceb;\n\n    // solhint-disable func-name-mixedcase\n    function UnregisteredAssetProxyError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(UNREGISTERED_ASSET_PROXY_ERROR_SELECTOR);\n    }\n\n    function InsufficientEthForFeeError(\n        uint256 ethFeeRequired,\n        uint256 ethAvailable\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INSUFFICIENT_ETH_FOR_FEE_ERROR_SELECTOR,\n            ethFeeRequired,\n            ethAvailable\n        );\n    }\n\n    function DefaultFunctionWethContractOnlyError(\n        address senderAddress\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            DEFAULT_FUNCTION_WETH_CONTRACT_ONLY_ERROR_SELECTOR,\n            senderAddress\n        );\n    }\n\n    function EthFeeLengthMismatchError(\n        uint256 ethFeesLength,\n        uint256 feeRecipientsLength\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ETH_FEE_LENGTH_MISMATCH_ERROR_SELECTOR,\n            ethFeesLength,\n            feeRecipientsLength\n        );\n    }\n}\n"
    },
    "contracts/dev-utils/contracts/src/OrderTransferSimulationUtils.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\npragma experimental ABIEncoderV2;\n\n\nimport \"@0x/contracts-exchange/contracts/src/interfaces/IExchange.sol\";\nimport \"@0x/contracts-exchange/contracts/src/libs/LibExchangeRichErrorDecoder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibExchangeRichErrors.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\n\n\ncontract OrderTransferSimulationUtils {\n\n    using LibBytes for bytes;\n\n    enum OrderTransferResults {\n        TakerAssetDataFailed,     // Transfer of takerAsset failed\n        MakerAssetDataFailed,     // Transfer of makerAsset failed\n        TakerFeeAssetDataFailed,  // Transfer of takerFeeAsset failed\n        MakerFeeAssetDataFailed,  // Transfer of makerFeeAsset failed\n        TransfersSuccessful       // All transfers in the order were successful\n    }\n\n    // NOTE(jalextowle): This is a random address that we use to avoid issues that addresses like `address(1)`\n    // may cause later.\n    address constant internal UNUSED_ADDRESS = address(0x377f698C4c287018D09b516F415317aEC5919332);\n\n    // keccak256(abi.encodeWithSignature(\"Error(string)\", \"TRANSFERS_SUCCESSFUL\"));\n    bytes32 constant internal _TRANSFERS_SUCCESSFUL_RESULT_HASH = 0xf43f26ea5a94b478394a975e856464913dc1a8a1ca70939d974aa7c238aa0ce0;\n\n    // solhint-disable var-name-mixedcase\n    IExchange internal _EXCHANGE;\n    // solhint-enable var-name-mixedcase\n\n    constructor (address _exchange)\n        public\n    {\n        _EXCHANGE = IExchange(_exchange);\n    }\n\n    /// @dev Simulates the maker transfers within an order and returns the index of the first failed transfer.\n    /// @param order The order to simulate transfers for.\n    /// @param takerAddress The address of the taker that will fill the order.\n    /// @param takerAssetFillAmount The amount of takerAsset that the taker wished to fill.\n    /// @return The index of the first failed transfer (or 4 if all transfers are successful).\n    function getSimulatedOrderMakerTransferResults(\n        LibOrder.Order memory order,\n        address takerAddress,\n        uint256 takerAssetFillAmount\n    )\n        public\n        returns (OrderTransferResults orderTransferResults)\n    {\n        LibFillResults.FillResults memory fillResults = LibFillResults.calculateFillResults(\n            order,\n            takerAssetFillAmount,\n            _EXCHANGE.protocolFeeMultiplier(),\n            tx.gasprice\n        );\n\n        bytes[] memory assetData = new bytes[](2);\n        address[] memory fromAddresses = new address[](2);\n        address[] memory toAddresses = new address[](2);\n        uint256[] memory amounts = new uint256[](2);\n\n        // Transfer `makerAsset` from maker to taker\n        assetData[0] = order.makerAssetData;\n        fromAddresses[0] = order.makerAddress;\n        toAddresses[0] = takerAddress == address(0) ? UNUSED_ADDRESS : takerAddress;\n        amounts[0] = fillResults.makerAssetFilledAmount;\n\n        // Transfer `makerFeeAsset` from maker to feeRecipient\n        assetData[1] = order.makerFeeAssetData;\n        fromAddresses[1] = order.makerAddress;\n        toAddresses[1] = order.feeRecipientAddress == address(0) ? UNUSED_ADDRESS : order.feeRecipientAddress;\n        amounts[1] = fillResults.makerFeePaid;\n\n        return _simulateTransferFromCalls(\n            assetData,\n            fromAddresses,\n            toAddresses,\n            amounts\n        );\n    }\n\n    /// @dev Simulates all of the transfers within an order and returns the index of the first failed transfer.\n    /// @param order The order to simulate transfers for.\n    /// @param takerAddress The address of the taker that will fill the order.\n    /// @param takerAssetFillAmount The amount of takerAsset that the taker wished to fill.\n    /// @return The index of the first failed transfer (or 4 if all transfers are successful).\n    function getSimulatedOrderTransferResults(\n        LibOrder.Order memory order,\n        address takerAddress,\n        uint256 takerAssetFillAmount\n    )\n        public\n        returns (OrderTransferResults orderTransferResults)\n    {\n        LibFillResults.FillResults memory fillResults = LibFillResults.calculateFillResults(\n            order,\n            takerAssetFillAmount,\n            _EXCHANGE.protocolFeeMultiplier(),\n            tx.gasprice\n        );\n\n        // Create input arrays\n        bytes[] memory assetData = new bytes[](4);\n        address[] memory fromAddresses = new address[](4);\n        address[] memory toAddresses = new address[](4);\n        uint256[] memory amounts = new uint256[](4);\n\n        // Transfer `takerAsset` from taker to maker\n        assetData[0] = order.takerAssetData;\n        fromAddresses[0] = takerAddress;\n        toAddresses[0] = order.makerAddress;\n        amounts[0] = takerAssetFillAmount;\n\n        // Transfer `makerAsset` from maker to taker\n        assetData[1] = order.makerAssetData;\n        fromAddresses[1] = order.makerAddress;\n        toAddresses[1] = takerAddress == address(0) ? UNUSED_ADDRESS : takerAddress;\n        amounts[1] = fillResults.makerAssetFilledAmount;\n\n        // Transfer `takerFeeAsset` from taker to feeRecipient\n        assetData[2] = order.takerFeeAssetData;\n        fromAddresses[2] = takerAddress;\n        toAddresses[2] = order.feeRecipientAddress == address(0) ? UNUSED_ADDRESS : order.feeRecipientAddress;\n        amounts[2] = fillResults.takerFeePaid;\n\n        // Transfer `makerFeeAsset` from maker to feeRecipient\n        assetData[3] = order.makerFeeAssetData;\n        fromAddresses[3] = order.makerAddress;\n        toAddresses[3] = order.feeRecipientAddress == address(0) ? UNUSED_ADDRESS : order.feeRecipientAddress;\n        amounts[3] = fillResults.makerFeePaid;\n\n        return _simulateTransferFromCalls(\n            assetData,\n            fromAddresses,\n            toAddresses,\n            amounts\n        );\n    }\n\n    /// @dev Simulates all of the transfers for each given order and returns the indices of each first failed transfer.\n    /// @param orders Array of orders to individually simulate transfers for.\n    /// @param takerAddresses Array of addresses of takers that will fill each order.\n    /// @param takerAssetFillAmounts Array of amounts of takerAsset that will be filled for each order.\n    /// @return The indices of the first failed transfer (or 4 if all transfers are successful) for each order.\n    function getSimulatedOrdersTransferResults(\n        LibOrder.Order[] memory orders,\n        address[] memory takerAddresses,\n        uint256[] memory takerAssetFillAmounts\n    )\n        public\n        returns (OrderTransferResults[] memory orderTransferResults)\n    {\n        uint256 length = orders.length;\n        orderTransferResults = new OrderTransferResults[](length);\n        for (uint256 i = 0; i != length; i++) {\n            orderTransferResults[i] = getSimulatedOrderTransferResults(\n                orders[i],\n                takerAddresses[i],\n                takerAssetFillAmounts[i]\n            );\n        }\n        return orderTransferResults;\n    }\n\n    /// @dev Makes the simulation call with information about the transfers and processes\n    ///      the returndata.\n    /// @param assetData The assetdata to use to make transfers.\n    /// @param fromAddresses The addresses to transfer funds.\n    /// @param toAddresses The addresses that will receive funds\n    /// @param amounts The amounts involved in the transfer.\n    function _simulateTransferFromCalls(\n        bytes[] memory assetData,\n        address[] memory fromAddresses,\n        address[] memory toAddresses,\n        uint256[] memory amounts\n    )\n        internal\n        returns (OrderTransferResults orderTransferResults)\n    {\n        // Encode data for `simulateDispatchTransferFromCalls(assetData, fromAddresses, toAddresses, amounts)`\n        bytes memory simulateDispatchTransferFromCallsData = abi.encodeWithSelector(\n            IExchange(address(0)).simulateDispatchTransferFromCalls.selector,\n            assetData,\n            fromAddresses,\n            toAddresses,\n            amounts\n        );\n\n        // Perform call and catch revert\n        (, bytes memory returnData) = address(_EXCHANGE).call(simulateDispatchTransferFromCallsData);\n\n        bytes4 selector = returnData.readBytes4(0);\n        if (selector == LibExchangeRichErrors.AssetProxyDispatchErrorSelector()) {\n            // Decode AssetProxyDispatchError and return index of failed transfer\n            (, bytes32 failedTransferIndex,) = LibExchangeRichErrorDecoder\n                .decodeAssetProxyDispatchError(returnData);\n            return OrderTransferResults(uint8(uint256(failedTransferIndex)));\n        } else if (selector == LibExchangeRichErrors.AssetProxyTransferErrorSelector()) {\n            // Decode AssetProxyTransferError and return index of failed transfer\n            (bytes32 failedTransferIndex, ,) = LibExchangeRichErrorDecoder\n                .decodeAssetProxyTransferError(returnData);\n            return OrderTransferResults(uint8(uint256(failedTransferIndex)));\n        } else if (keccak256(returnData) == _TRANSFERS_SUCCESSFUL_RESULT_HASH) {\n            // All transfers were successful\n            return OrderTransferResults.TransfersSuccessful;\n        } else {\n            revert(\"UNKNOWN_RETURN_DATA\");\n        }\n    }\n}\n"
    },
    "contracts/asset-proxy/contracts/src/bridges/UniswapBridge.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol\";\nimport \"@0x/contracts-erc20/contracts/src/interfaces/IEtherToken.sol\";\nimport \"@0x/contracts-erc20/contracts/src/LibERC20Token.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/IWallet.sol\";\nimport \"@0x/contracts-utils/contracts/src/DeploymentConstants.sol\";\nimport \"../interfaces/IUniswapExchangeFactory.sol\";\nimport \"../interfaces/IUniswapExchange.sol\";\nimport \"../interfaces/IERC20Bridge.sol\";\n\n\n// solhint-disable space-after-comma\n// solhint-disable not-rely-on-time\ncontract UniswapBridge is\n    IERC20Bridge,\n    IWallet,\n    DeploymentConstants\n{\n    // Struct to hold `bridgeTransferFrom()` local variables in memory and to avoid\n    // stack overflows.\n    struct TransferState {\n        IUniswapExchange exchange;\n        uint256 fromTokenBalance;\n        IEtherToken weth;\n        uint256 boughtAmount;\n    }\n\n    // solhint-disable no-empty-blocks\n    /// @dev Payable fallback to receive ETH from uniswap.\n    function ()\n        external\n        payable\n    {}\n\n    /// @dev Callback for `IERC20Bridge`. Tries to buy `amount` of\n    ///      `toTokenAddress` tokens by selling the entirety of the `fromTokenAddress`\n    ///      token encoded in the bridge data.\n    /// @param toTokenAddress The token to buy and transfer to `to`.\n    /// @param from The maker (this contract).\n    /// @param to The recipient of the bought tokens.\n    /// @param amount Minimum amount of `toTokenAddress` tokens to buy.\n    /// @param bridgeData The abi-encoded \"from\" token address.\n    /// @return success The magic bytes if successful.\n    function bridgeTransferFrom(\n        address toTokenAddress,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata bridgeData\n    )\n        external\n        returns (bytes4 success)\n    {\n        // State memory object to avoid stack overflows.\n        TransferState memory state;\n        // Decode the bridge data to get the `fromTokenAddress`.\n        (address fromTokenAddress) = abi.decode(bridgeData, (address));\n\n        // Just transfer the tokens if they're the same.\n        if (fromTokenAddress == toTokenAddress) {\n            LibERC20Token.transfer(fromTokenAddress, to, amount);\n            return BRIDGE_SUCCESS;\n        }\n\n        // Get the exchange for the token pair.\n        state.exchange = _getUniswapExchangeForTokenPair(\n            fromTokenAddress,\n            toTokenAddress\n        );\n        // Get our balance of `fromTokenAddress` token.\n        state.fromTokenBalance = IERC20Token(fromTokenAddress).balanceOf(address(this));\n        // Get the weth contract.\n        state.weth = IEtherToken(_getWethAddress());\n\n        // Convert from WETH to a token.\n        if (fromTokenAddress == address(state.weth)) {\n            // Unwrap the WETH.\n            state.weth.withdraw(state.fromTokenBalance);\n            // Buy as much of `toTokenAddress` token with ETH as possible and\n            // transfer it to `to`.\n            state.boughtAmount = state.exchange.ethToTokenTransferInput.value(state.fromTokenBalance)(\n                // Minimum buy amount.\n                amount,\n                // Expires after this block.\n                block.timestamp,\n                // Recipient is `to`.\n                to\n            );\n\n        // Convert from a token to WETH.\n        } else if (toTokenAddress == address(state.weth)) {\n            // Grant the exchange an allowance.\n            _grantExchangeAllowance(state.exchange, fromTokenAddress, state.fromTokenBalance);\n            // Buy as much ETH with `fromTokenAddress` token as possible.\n            state.boughtAmount = state.exchange.tokenToEthSwapInput(\n                // Sell all tokens we hold.\n                state.fromTokenBalance,\n                // Minimum buy amount.\n                amount,\n                // Expires after this block.\n                block.timestamp\n            );\n            // Wrap the ETH.\n            state.weth.deposit.value(state.boughtAmount)();\n            // Transfer the WETH to `to`.\n            IEtherToken(toTokenAddress).transfer(to, state.boughtAmount);\n\n        // Convert from one token to another.\n        } else {\n            // Grant the exchange an allowance.\n            _grantExchangeAllowance(state.exchange, fromTokenAddress, state.fromTokenBalance);\n            // Buy as much `toTokenAddress` token with `fromTokenAddress` token\n            // and transfer it to `to`.\n            state.boughtAmount = state.exchange.tokenToTokenTransferInput(\n                // Sell all tokens we hold.\n                state.fromTokenBalance,\n                // Minimum buy amount.\n                amount,\n                // Must buy at least 1 intermediate ETH.\n                1,\n                // Expires after this block.\n                block.timestamp,\n                // Recipient is `to`.\n                to,\n                // Convert to `toTokenAddress`.\n                toTokenAddress\n            );\n        }\n\n        emit ERC20BridgeTransfer(\n            fromTokenAddress,\n            toTokenAddress,\n            state.fromTokenBalance,\n            state.boughtAmount,\n            from,\n            to\n        );\n        return BRIDGE_SUCCESS;\n    }\n\n    /// @dev `SignatureType.Wallet` callback, so that this bridge can be the maker\n    ///      and sign for itself in orders. Always succeeds.\n    /// @return magicValue Success bytes, always.\n    function isValidSignature(\n        bytes32,\n        bytes calldata\n    )\n        external\n        view\n        returns (bytes4 magicValue)\n    {\n        return LEGACY_WALLET_MAGIC_VALUE;\n    }\n\n    /// @dev Grants an unlimited allowance to the exchange for its token\n    ///      on behalf of this contract.\n    /// @param exchange The Uniswap token exchange.\n    /// @param tokenAddress The token address for the exchange.\n    /// @param minimumAllowance The minimum necessary allowance.\n    function _grantExchangeAllowance(\n        IUniswapExchange exchange,\n        address tokenAddress,\n        uint256 minimumAllowance\n    )\n        private\n    {\n        LibERC20Token.approveIfBelow(\n            tokenAddress,\n            address(exchange),\n            minimumAllowance\n        );\n    }\n\n    /// @dev Retrieves the uniswap exchange for a given token pair.\n    ///      In the case of a WETH-token exchange, this will be the non-WETH token.\n    ///      In th ecase of a token-token exchange, this will be the first token.\n    /// @param fromTokenAddress The address of the token we are converting from.\n    /// @param toTokenAddress The address of the token we are converting to.\n    /// @return exchange The uniswap exchange.\n    function _getUniswapExchangeForTokenPair(\n        address fromTokenAddress,\n        address toTokenAddress\n    )\n        private\n        view\n        returns (IUniswapExchange exchange)\n    {\n        address exchangeTokenAddress = fromTokenAddress;\n        // Whichever isn't WETH is the exchange token.\n        if (fromTokenAddress == _getWethAddress()) {\n            exchangeTokenAddress = toTokenAddress;\n        }\n        exchange = IUniswapExchange(\n            IUniswapExchangeFactory(_getUniswapExchangeFactoryAddress())\n            .getExchange(exchangeTokenAddress)\n        );\n        require(address(exchange) != address(0), \"NO_UNISWAP_EXCHANGE_FOR_TOKEN\");\n        return exchange;\n    }\n}\n"
    },
    "contracts/asset-proxy/contracts/src/interfaces/IUniswapExchangeFactory.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"./IUniswapExchange.sol\";\n\n\ninterface IUniswapExchangeFactory {\n\n    /// @dev Get the exchange for a token.\n    /// @param tokenAddress The address of the token contract.\n    function getExchange(address tokenAddress)\n        external\n        view\n        returns (address);\n}\n"
    },
    "contracts/asset-proxy/contracts/src/interfaces/IUniswapExchange.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ninterface IUniswapExchange {\n\n    /// @dev Buys at least `minTokensBought` tokens with ETH and transfer them\n    ///      to `recipient`.\n    /// @param minTokensBought The minimum number of tokens to buy.\n    /// @param deadline Time when this order expires.\n    /// @param recipient Who to transfer the tokens to.\n    /// @return tokensBought Amount of tokens bought.\n    function ethToTokenTransferInput(\n        uint256 minTokensBought,\n        uint256 deadline,\n        address recipient\n    )\n        external\n        payable\n        returns (uint256 tokensBought);\n\n    /// @dev Buys at least `minEthBought` ETH with tokens.\n    /// @param tokensSold Amount of tokens to sell.\n    /// @param minEthBought The minimum amount of ETH to buy.\n    /// @param deadline Time when this order expires.\n    /// @return ethBought Amount of tokens bought.\n    function tokenToEthSwapInput(\n        uint256 tokensSold,\n        uint256 minEthBought,\n        uint256 deadline\n    )\n        external\n        returns (uint256 ethBought);\n\n    /// @dev Buys at least `minTokensBought` tokens with the exchange token\n    ///      and transfer them to `recipient`.\n    /// @param minTokensBought The minimum number of tokens to buy.\n    /// @param minEthBought The minimum amount of intermediate ETH to buy.\n    /// @param deadline Time when this order expires.\n    /// @param recipient Who to transfer the tokens to.\n    /// @param toTokenAddress The token being bought.\n    /// @return tokensBought Amount of tokens bought.\n    function tokenToTokenTransferInput(\n        uint256 tokensSold,\n        uint256 minTokensBought,\n        uint256 minEthBought,\n        uint256 deadline,\n        address recipient,\n        address toTokenAddress\n    )\n        external\n        returns (uint256 tokensBought);\n}\n"
    },
    "contracts/asset-proxy/contracts/test/TestUniswapBridge.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibSafeMath.sol\";\nimport \"../src/bridges/UniswapBridge.sol\";\nimport \"../src/interfaces/IUniswapExchangeFactory.sol\";\nimport \"../src/interfaces/IUniswapExchange.sol\";\n\n\n// solhint-disable no-simple-event-func-name\ncontract TestEventsRaiser {\n\n    event TokenTransfer(\n        address token,\n        address from,\n        address to,\n        uint256 amount\n    );\n\n    event TokenApprove(\n        address spender,\n        uint256 allowance\n    );\n\n    event WethDeposit(\n        uint256 amount\n    );\n\n    event WethWithdraw(\n        uint256 amount\n    );\n\n    event EthToTokenTransferInput(\n        address exchange,\n        uint256 minTokensBought,\n        uint256 deadline,\n        address recipient\n    );\n\n    event TokenToEthSwapInput(\n        address exchange,\n        uint256 tokensSold,\n        uint256 minEthBought,\n        uint256 deadline\n    );\n\n    event TokenToTokenTransferInput(\n        address exchange,\n        uint256 tokensSold,\n        uint256 minTokensBought,\n        uint256 minEthBought,\n        uint256 deadline,\n        address recipient,\n        address toTokenAddress\n    );\n\n    function raiseEthToTokenTransferInput(\n        uint256 minTokensBought,\n        uint256 deadline,\n        address recipient\n    )\n        external\n    {\n        emit EthToTokenTransferInput(\n            msg.sender,\n            minTokensBought,\n            deadline,\n            recipient\n        );\n    }\n\n    function raiseTokenToEthSwapInput(\n        uint256 tokensSold,\n        uint256 minEthBought,\n        uint256 deadline\n    )\n        external\n    {\n        emit TokenToEthSwapInput(\n            msg.sender,\n            tokensSold,\n            minEthBought,\n            deadline\n        );\n    }\n\n    function raiseTokenToTokenTransferInput(\n        uint256 tokensSold,\n        uint256 minTokensBought,\n        uint256 minEthBought,\n        uint256 deadline,\n        address recipient,\n        address toTokenAddress\n    )\n        external\n    {\n        emit TokenToTokenTransferInput(\n            msg.sender,\n            tokensSold,\n            minTokensBought,\n            minEthBought,\n            deadline,\n            recipient,\n            toTokenAddress\n        );\n    }\n\n    function raiseTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    )\n        external\n    {\n        emit TokenTransfer(\n            msg.sender,\n            from,\n            to,\n            amount\n        );\n    }\n\n    function raiseTokenApprove(address spender, uint256 allowance)\n        external\n    {\n        emit TokenApprove(spender, allowance);\n    }\n\n    function raiseWethDeposit(uint256 amount)\n        external\n    {\n        emit WethDeposit(amount);\n    }\n\n    function raiseWethWithdraw(uint256 amount)\n        external\n    {\n        emit WethWithdraw(amount);\n    }\n}\n\n\n/// @dev A minimalist ERC20/WETH token.\ncontract TestToken {\n\n    using LibSafeMath for uint256;\n\n    mapping (address => uint256) public balances;\n    string private _nextRevertReason;\n\n    /// @dev Set the balance for `owner`.\n    function setBalance(address owner)\n        external\n        payable\n    {\n        balances[owner] = msg.value;\n    }\n\n    /// @dev Set the revert reason for `transfer()`,\n    ///      `deposit()`, and `withdraw()`.\n    function setRevertReason(string calldata reason)\n        external\n    {\n        _nextRevertReason = reason;\n    }\n\n    /// @dev Just calls `raiseTokenTransfer()` on the caller.\n    function transfer(address to, uint256 amount)\n        external\n        returns (bool)\n    {\n        _revertIfReasonExists();\n        TestEventsRaiser(msg.sender).raiseTokenTransfer(msg.sender, to, amount);\n        return true;\n    }\n\n    /// @dev Just calls `raiseTokenApprove()` on the caller.\n    function approve(address spender, uint256 allowance)\n        external\n        returns (bool)\n    {\n        TestEventsRaiser(msg.sender).raiseTokenApprove(spender, allowance);\n        return true;\n    }\n\n    /// @dev `IWETH.deposit()` that increases balances and calls\n    ///     `raiseWethDeposit()` on the caller.\n    function deposit()\n        external\n        payable\n    {\n        _revertIfReasonExists();\n        balances[msg.sender] += balances[msg.sender].safeAdd(msg.value);\n        TestEventsRaiser(msg.sender).raiseWethDeposit(msg.value);\n    }\n\n    /// @dev `IWETH.withdraw()` that just reduces balances and calls\n    ///       `raiseWethWithdraw()` on the caller.\n    function withdraw(uint256 amount)\n        external\n    {\n        _revertIfReasonExists();\n        balances[msg.sender] = balances[msg.sender].safeSub(amount);\n        msg.sender.transfer(amount);\n        TestEventsRaiser(msg.sender).raiseWethWithdraw(amount);\n    }\n\n    function allowance(address, address) external view returns (uint256) {\n        return 0;\n    }\n\n    /// @dev Retrieve the balance for `owner`.\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256)\n    {\n        return balances[owner];\n    }\n\n    function _revertIfReasonExists()\n        private\n        view\n    {\n        if (bytes(_nextRevertReason).length != 0) {\n            revert(_nextRevertReason);\n        }\n    }\n}\n\n\ncontract TestExchange is\n    IUniswapExchange\n{\n    address public tokenAddress;\n    string private _nextRevertReason;\n\n    constructor(address _tokenAddress) public {\n        tokenAddress = _tokenAddress;\n    }\n\n    function setFillBehavior(\n        string calldata revertReason\n    )\n        external\n        payable\n    {\n        _nextRevertReason = revertReason;\n    }\n\n    function ethToTokenTransferInput(\n        uint256 minTokensBought,\n        uint256 deadline,\n        address recipient\n    )\n        external\n        payable\n        returns (uint256 tokensBought)\n    {\n        TestEventsRaiser(msg.sender).raiseEthToTokenTransferInput(\n            minTokensBought,\n            deadline,\n            recipient\n        );\n        _revertIfReasonExists();\n        return address(this).balance;\n    }\n\n    function tokenToEthSwapInput(\n        uint256 tokensSold,\n        uint256 minEthBought,\n        uint256 deadline\n    )\n        external\n        returns (uint256 ethBought)\n    {\n        TestEventsRaiser(msg.sender).raiseTokenToEthSwapInput(\n            tokensSold,\n            minEthBought,\n            deadline\n        );\n        _revertIfReasonExists();\n        uint256 fillAmount = address(this).balance;\n        msg.sender.transfer(fillAmount);\n        return fillAmount;\n    }\n\n    function tokenToTokenTransferInput(\n        uint256 tokensSold,\n        uint256 minTokensBought,\n        uint256 minEthBought,\n        uint256 deadline,\n        address recipient,\n        address toTokenAddress\n    )\n        external\n        returns (uint256 tokensBought)\n    {\n        TestEventsRaiser(msg.sender).raiseTokenToTokenTransferInput(\n            tokensSold,\n            minTokensBought,\n            minEthBought,\n            deadline,\n            recipient,\n            toTokenAddress\n        );\n        _revertIfReasonExists();\n        return address(this).balance;\n    }\n\n    function toTokenAddress()\n        external\n        view\n        returns (address _tokenAddress)\n    {\n        return tokenAddress;\n    }\n\n    function _revertIfReasonExists()\n        private\n        view\n    {\n        if (bytes(_nextRevertReason).length != 0) {\n            revert(_nextRevertReason);\n        }\n    }\n}\n\n\n/// @dev UniswapBridge overridden to mock tokens and implement IUniswapExchangeFactory.\ncontract TestUniswapBridge is\n    IUniswapExchangeFactory,\n    TestEventsRaiser,\n    UniswapBridge\n{\n    TestToken public wethToken;\n    // Token address to TestToken instance.\n    mapping (address => TestToken) private _testTokens;\n    // Token address to TestExchange instance.\n    mapping (address => TestExchange) private _testExchanges;\n\n    constructor() public {\n        wethToken = new TestToken();\n        _testTokens[address(wethToken)] = wethToken;\n    }\n\n    /// @dev Sets the balance of this contract for an existing token.\n    ///      The wei attached will be the balance.\n    function setTokenBalance(address tokenAddress)\n        external\n        payable\n    {\n        TestToken token = _testTokens[tokenAddress];\n        token.deposit.value(msg.value)();\n    }\n\n    /// @dev Sets the revert reason for an existing token.\n    function setTokenRevertReason(address tokenAddress, string calldata revertReason)\n        external\n    {\n        TestToken token = _testTokens[tokenAddress];\n        token.setRevertReason(revertReason);\n    }\n\n    /// @dev Create a token and exchange (if they don't exist) for a new token\n    ///      and sets the exchange revert and fill behavior. The wei attached\n    ///      will be the fill amount for the exchange.\n    /// @param tokenAddress The token address. If zero, one will be created.\n    /// @param revertReason The revert reason for exchange operations.\n    function createTokenAndExchange(\n        address tokenAddress,\n        string calldata revertReason\n    )\n        external\n        payable\n        returns (TestToken token, TestExchange exchange)\n    {\n        token = TestToken(tokenAddress);\n        if (tokenAddress == address(0)) {\n            token = new TestToken();\n        }\n        _testTokens[address(token)] = token;\n        exchange = _testExchanges[address(token)];\n        if (address(exchange) == address(0)) {\n            _testExchanges[address(token)] = exchange = new TestExchange(address(token));\n        }\n        exchange.setFillBehavior.value(msg.value)(revertReason);\n        return (token, exchange);\n    }\n\n    /// @dev `IUniswapExchangeFactory.getExchange`\n    function getExchange(address tokenAddress)\n        external\n        view\n        returns (address)\n    {\n        return address(_testExchanges[tokenAddress]);\n    }\n\n    // @dev Use `wethToken`.\n    function _getWethAddress()\n        internal\n        view\n        returns (address)\n    {\n        return address(wethToken);\n    }\n\n    // @dev This contract will double as the Uniswap contract.\n    function _getUniswapExchangeFactoryAddress()\n        internal\n        view\n        returns (address)\n    {\n        return address(this);\n    }\n}\n"
    },
    "@0x/contracts-asset-proxy/contracts/src/interfaces/IChai.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol\";\n\n\ncontract PotLike {\n    function chi() external returns (uint256);\n    function rho() external returns (uint256);\n    function drip() external returns (uint256);\n    function join(uint256) external;\n    function exit(uint256) external;\n}\n\n\n// The actual Chai contract can be found here: https://github.com/dapphub/chai\ncontract IChai is\n    IERC20Token\n{\n    /// @dev Withdraws Dai owned by `src`\n    /// @param src Address that owns Dai.\n    /// @param wad Amount of Dai to withdraw.\n    function draw(\n        address src,\n        uint256 wad\n    )\n        external;\n\n    /// @dev Queries Dai balance of Chai holder.\n    /// @param usr Address of Chai holder.\n    /// @return Dai balance.\n    function dai(address usr)\n        external\n        returns (uint256);\n\n    /// @dev Queries the Pot contract used by the Chai contract.\n    function pot()\n        external\n        returns (PotLike);\n\n    /// @dev Deposits Dai in exchange for Chai\n    /// @param dst Address to receive Chai.\n    /// @param wad Amount of Dai to deposit.\n    function join(\n        address dst,\n        uint256 wad\n    )\n        external;\n}\n"
    },
    "contracts/dev-utils/contracts/src/AssetBalance.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.16;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\nimport \"@0x/contracts-asset-proxy/contracts/src/interfaces/IAssetData.sol\";\nimport \"@0x/contracts-asset-proxy/contracts/src/interfaces/IAssetProxy.sol\";\nimport \"@0x/contracts-erc20/contracts/src/LibERC20Token.sol\";\nimport \"@0x/contracts-erc721/contracts/src/interfaces/IERC721Token.sol\";\nimport \"@0x/contracts-erc1155/contracts/src/interfaces/IERC1155.sol\";\nimport \"@0x/contracts-asset-proxy/contracts/src/interfaces/IChai.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibMath.sol\";\nimport \"./Addresses.sol\";\nimport \"./LibDydxBalance.sol\";\n\n\ncontract AssetBalance is\n    Addresses\n{\n    // 2^256 - 1\n    uint256 constant internal _MAX_UINT256 = uint256(-1);\n\n    using LibBytes for bytes;\n\n    /// @dev Returns the owner's balance of the assets(s) specified in\n    /// assetData.  When the asset data contains multiple assets (eg in\n    /// ERC1155 or Multi-Asset), the return value indicates how many\n    /// complete \"baskets\" of those assets are owned by owner.\n    /// @param ownerAddress Owner of the assets specified by assetData.\n    /// @param assetData Details of asset, encoded per the AssetProxy contract specification.\n    /// @return Number of assets (or asset baskets) held by owner.\n    function getBalance(address ownerAddress, bytes memory assetData)\n        public\n        returns (uint256 balance)\n    {\n        // Get id of AssetProxy contract\n        bytes4 assetProxyId = assetData.readBytes4(0);\n\n        if (assetProxyId == IAssetData(address(0)).ERC20Token.selector) {\n            // Get ERC20 token address\n            address tokenAddress = assetData.readAddress(16);\n            balance = LibERC20Token.balanceOf(tokenAddress, ownerAddress);\n\n        } else if (assetProxyId == IAssetData(address(0)).ERC721Token.selector) {\n            // Get ERC721 token address and id\n            (, address tokenAddress, uint256 tokenId) = LibAssetData.decodeERC721AssetData(assetData);\n\n            // Check if id is owned by ownerAddress\n            bytes memory ownerOfCalldata = abi.encodeWithSelector(\n                IERC721Token(address(0)).ownerOf.selector,\n                tokenId\n            );\n\n            (bool success, bytes memory returnData) = tokenAddress.staticcall(ownerOfCalldata);\n            address currentOwnerAddress = (success && returnData.length == 32) ? returnData.readAddress(12) : address(0);\n            balance = currentOwnerAddress == ownerAddress ? 1 : 0;\n\n        } else if (assetProxyId == IAssetData(address(0)).ERC1155Assets.selector) {\n            // Get ERC1155 token address, array of ids, and array of values\n            (, address tokenAddress, uint256[] memory tokenIds, uint256[] memory tokenValues,) = LibAssetData.decodeERC1155AssetData(assetData);\n\n            uint256 length = tokenIds.length;\n            for (uint256 i = 0; i != length; i++) {\n                // Skip over the token if the corresponding value is 0.\n                if (tokenValues[i] == 0) {\n                    continue;\n                }\n\n                // Encode data for `balanceOf(ownerAddress, tokenIds[i])\n                bytes memory balanceOfData = abi.encodeWithSelector(\n                    IERC1155(address(0)).balanceOf.selector,\n                    ownerAddress,\n                    tokenIds[i]\n                );\n\n                // Query balance\n                (bool success, bytes memory returnData) = tokenAddress.staticcall(balanceOfData);\n                uint256 totalBalance = success && returnData.length == 32 ? returnData.readUint256(0) : 0;\n\n                // Scale total balance down by corresponding value in assetData\n                uint256 scaledBalance = totalBalance / tokenValues[i];\n                if (scaledBalance == 0) {\n                    return 0;\n                }\n                if (scaledBalance < balance || balance == 0) {\n                    balance = scaledBalance;\n                }\n            }\n\n        } else if (assetProxyId == IAssetData(address(0)).StaticCall.selector) {\n            // Encode data for `staticCallProxy.transferFrom(assetData,...)`\n            bytes memory transferFromData = abi.encodeWithSelector(\n                IAssetProxy(address(0)).transferFrom.selector,\n                assetData,\n                address(0),  // `from` address is not used\n                address(0),  // `to` address is not used\n                0            // `amount` is not used\n            );\n\n            // Check if staticcall would be successful\n            (bool success,) = staticCallProxyAddress.staticcall(transferFromData);\n\n            // Success means that the staticcall can be made an unlimited amount of times\n            balance = success ? _MAX_UINT256 : 0;\n\n        } else if (assetProxyId == IAssetData(address(0)).ERC20Bridge.selector) {\n            // Get address of ERC20 token and bridge contract\n            (, address tokenAddress, address bridgeAddress, ) = LibAssetData.decodeERC20BridgeAssetData(assetData);\n            if (tokenAddress == _getDaiAddress() && bridgeAddress == chaiBridgeAddress) {\n                uint256 chaiBalance = LibERC20Token.balanceOf(_getChaiAddress(), ownerAddress);\n                // Calculate Dai balance\n                balance = _convertChaiToDaiAmount(chaiBalance);\n            }\n            // Balance will be 0 if bridge is not supported\n\n        } else if (assetProxyId == IAssetData(address(0)).MultiAsset.selector) {\n            // Get array of values and array of assetDatas\n            (, uint256[] memory assetAmounts, bytes[] memory nestedAssetData) = LibAssetData.decodeMultiAssetData(assetData);\n\n            uint256 length = nestedAssetData.length;\n            for (uint256 i = 0; i != length; i++) {\n                // Skip over the asset if the corresponding amount is 0.\n                if (assetAmounts[i] == 0) {\n                    continue;\n                }\n\n                // Query balance of individual assetData\n                uint256 totalBalance = getBalance(ownerAddress, nestedAssetData[i]);\n\n                // Scale total balance down by corresponding value in assetData\n                uint256 scaledBalance = totalBalance / assetAmounts[i];\n                if (scaledBalance == 0) {\n                    return 0;\n                }\n                if (scaledBalance < balance || balance == 0) {\n                    balance = scaledBalance;\n                }\n            }\n        }\n\n        // Balance will be 0 if assetProxyId is unknown\n        return balance;\n    }\n\n    /// @dev Calls getBalance() for each element of assetData.\n    /// @param ownerAddress Owner of the assets specified by assetData.\n    /// @param assetData Array of asset details, each encoded per the AssetProxy contract specification.\n    /// @return Array of asset balances from getBalance(), with each element\n    /// corresponding to the same-indexed element in the assetData input.\n    function getBatchBalances(address ownerAddress, bytes[] memory assetData)\n        public\n        returns (uint256[] memory balances)\n    {\n        uint256 length = assetData.length;\n        balances = new uint256[](length);\n        for (uint256 i = 0; i != length; i++) {\n            balances[i] = getBalance(ownerAddress, assetData[i]);\n        }\n        return balances;\n    }\n\n    /// @dev Returns the number of asset(s) (described by assetData) that\n    /// the corresponding AssetProxy contract is authorized to spend.  When the asset data contains\n    /// multiple assets (eg for Multi-Asset), the return value indicates\n    /// how many complete \"baskets\" of those assets may be spent by all of the corresponding\n    /// AssetProxy contracts.\n    /// @param ownerAddress Owner of the assets specified by assetData.\n    /// @param assetData Details of asset, encoded per the AssetProxy contract specification.\n    /// @return Number of assets (or asset baskets) that the corresponding AssetProxy is authorized to spend.\n    function getAssetProxyAllowance(address ownerAddress, bytes memory assetData)\n        public\n        returns (uint256 allowance)\n    {\n        // Get id of AssetProxy contract\n        bytes4 assetProxyId = assetData.readBytes4(0);\n\n        if (assetProxyId == IAssetData(address(0)).MultiAsset.selector) {\n            // Get array of values and array of assetDatas\n            (, uint256[] memory amounts, bytes[] memory nestedAssetData) = LibAssetData.decodeMultiAssetData(assetData);\n\n            uint256 length = nestedAssetData.length;\n            for (uint256 i = 0; i != length; i++) {\n                // Skip over the asset if the corresponding amount is 0.\n                if (amounts[i] == 0) {\n                    continue;\n                }\n\n                // Query allowance of individual assetData\n                uint256 totalAllowance = getAssetProxyAllowance(ownerAddress, nestedAssetData[i]);\n\n                // Scale total allowance down by corresponding value in assetData\n                uint256 scaledAllowance = totalAllowance / amounts[i];\n                if (scaledAllowance == 0) {\n                    return 0;\n                }\n                if (scaledAllowance < allowance || allowance == 0) {\n                    allowance = scaledAllowance;\n                }\n            }\n            return allowance;\n        }\n\n        if (assetProxyId == IAssetData(address(0)).ERC20Token.selector) {\n            // Get ERC20 token address\n            address tokenAddress = assetData.readAddress(16);\n            allowance = LibERC20Token.allowance(tokenAddress, ownerAddress, erc20ProxyAddress);\n\n        } else if (assetProxyId == IAssetData(address(0)).ERC721Token.selector) {\n            // Get ERC721 token address and id\n            (, address tokenAddress, uint256 tokenId) = LibAssetData.decodeERC721AssetData(assetData);\n\n            // Encode data for `isApprovedForAll(ownerAddress, erc721ProxyAddress)`\n            bytes memory isApprovedForAllData = abi.encodeWithSelector(\n                IERC721Token(address(0)).isApprovedForAll.selector,\n                ownerAddress,\n                erc721ProxyAddress\n            );\n\n            (bool success, bytes memory returnData) = tokenAddress.staticcall(isApprovedForAllData);\n\n            // If not approved for all, call `getApproved(tokenId)`\n            if (!success || returnData.length != 32 || returnData.readUint256(0) != 1) {\n                // Encode data for `getApproved(tokenId)`\n                bytes memory getApprovedData = abi.encodeWithSelector(IERC721Token(address(0)).getApproved.selector, tokenId);\n                (success, returnData) = tokenAddress.staticcall(getApprovedData);\n\n                // Allowance is 1 if successful and the approved address is the ERC721Proxy\n                allowance = success && returnData.length == 32 && returnData.readAddress(12) == erc721ProxyAddress ? 1 : 0;\n            } else {\n                // Allowance is 2^256 - 1 if `isApprovedForAll` returned true\n                allowance = _MAX_UINT256;\n            }\n\n        } else if (assetProxyId == IAssetData(address(0)).ERC1155Assets.selector) {\n            // Get ERC1155 token address\n            (, address tokenAddress, , , ) = LibAssetData.decodeERC1155AssetData(assetData);\n\n            // Encode data for `isApprovedForAll(ownerAddress, erc1155ProxyAddress)`\n            bytes memory isApprovedForAllData = abi.encodeWithSelector(\n                IERC1155(address(0)).isApprovedForAll.selector,\n                ownerAddress,\n                erc1155ProxyAddress\n            );\n\n            // Query allowance\n            (bool success, bytes memory returnData) = tokenAddress.staticcall(isApprovedForAllData);\n            allowance = success && returnData.length == 32 && returnData.readUint256(0) == 1 ? _MAX_UINT256 : 0;\n\n        } else if (assetProxyId == IAssetData(address(0)).StaticCall.selector) {\n            // The StaticCallProxy does not require any approvals\n            allowance = _MAX_UINT256;\n\n        } else if (assetProxyId == IAssetData(address(0)).ERC20Bridge.selector) {\n            // Get address of ERC20 token and bridge contract\n            (, address tokenAddress, address bridgeAddress,) =\n                LibAssetData.decodeERC20BridgeAssetData(assetData);\n            if (tokenAddress == _getDaiAddress() && bridgeAddress == chaiBridgeAddress) {\n                uint256 chaiAllowance = LibERC20Token.allowance(_getChaiAddress(), ownerAddress, chaiBridgeAddress);\n                // Dai allowance is unlimited if Chai allowance is unlimited\n                allowance = chaiAllowance == _MAX_UINT256 ? _MAX_UINT256 : _convertChaiToDaiAmount(chaiAllowance);\n            } else if (bridgeAddress == dydxBridgeAddress) {\n                allowance = LibDydxBalance.getDydxMakerAllowance(ownerAddress, bridgeAddress, _getDydxAddress());\n            }\n            // Allowance will be 0 if bridge is not supported\n        }\n\n        // Allowance will be 0 if the assetProxyId is unknown\n        return allowance;\n    }\n\n    /// @dev Calls getAssetProxyAllowance() for each element of assetData.\n    /// @param ownerAddress Owner of the assets specified by assetData.\n    /// @param assetData Array of asset details, each encoded per the AssetProxy contract specification.\n    /// @return An array of asset allowances from getAllowance(), with each\n    /// element corresponding to the same-indexed element in the assetData input.\n    function getBatchAssetProxyAllowances(address ownerAddress, bytes[] memory assetData)\n        public\n        returns (uint256[] memory allowances)\n    {\n        uint256 length = assetData.length;\n        allowances = new uint256[](length);\n        for (uint256 i = 0; i != length; i++) {\n            allowances[i] = getAssetProxyAllowance(ownerAddress, assetData[i]);\n        }\n        return allowances;\n    }\n\n    /// @dev Calls getBalance() and getAllowance() for assetData.\n    /// @param ownerAddress Owner of the assets specified by assetData.\n    /// @param assetData Details of asset, encoded per the AssetProxy contract specification.\n    /// @return Number of assets (or asset baskets) held by owner, and number\n    /// of assets (or asset baskets) that the corresponding AssetProxy is authorized to spend.\n    function getBalanceAndAssetProxyAllowance(\n        address ownerAddress,\n        bytes memory assetData\n    )\n        public\n        returns (uint256 balance, uint256 allowance)\n    {\n        balance = getBalance(ownerAddress, assetData);\n        allowance = getAssetProxyAllowance(ownerAddress, assetData);\n        return (balance, allowance);\n    }\n\n    /// @dev Calls getBatchBalances() and getBatchAllowances() for each element of assetData.\n    /// @param ownerAddress Owner of the assets specified by assetData.\n    /// @param assetData Array of asset details, each encoded per the AssetProxy contract specification.\n    /// @return An array of asset balances from getBalance(), and an array of\n    /// asset allowances from getAllowance(), with each element\n    /// corresponding to the same-indexed element in the assetData input.\n    function getBatchBalancesAndAssetProxyAllowances(\n        address ownerAddress,\n        bytes[] memory assetData\n    )\n        public\n        returns (uint256[] memory balances, uint256[] memory allowances)\n    {\n        balances = getBatchBalances(ownerAddress, assetData);\n        allowances = getBatchAssetProxyAllowances(ownerAddress, assetData);\n        return (balances, allowances);\n    }\n\n    /// @dev Converts an amount of Chai into its equivalent Dai amount.\n    ///      Also accumulates Dai from DSR if called after the last time it was collected.\n    /// @param chaiAmount Amount of Chai to converts.\n    function _convertChaiToDaiAmount(uint256 chaiAmount)\n        internal\n        returns (uint256 daiAmount)\n    {\n        PotLike pot = IChai(_getChaiAddress()).pot();\n        // Accumulate savings if called after last time savings were collected\n        // solhint-disable-next-line not-rely-on-time\n        uint256 chiMultiplier = (now > pot.rho())\n            ? pot.drip()\n            : pot.chi();\n        daiAmount = LibMath.getPartialAmountFloor(chiMultiplier, 10**27, chaiAmount);\n        return daiAmount;\n    }\n\n    /// @dev Returns an order MAKER's balance of the assets(s) specified in\n    ///      makerAssetData. Unlike `getBalanceAndAssetProxyAllowance()`, this\n    ///      can handle maker asset types that depend on taker tokens being\n    ///      transferred to the maker first.\n    /// @param order The order.\n    /// @return balance Quantity of assets transferrable from maker to taker.\n    function _getConvertibleMakerBalanceAndAssetProxyAllowance(\n        LibOrder.Order memory order\n    )\n        internal\n        returns (uint256 balance, uint256 allowance)\n    {\n        if (order.makerAssetData.length < 4) {\n            return (0, 0);\n        }\n        bytes4 assetProxyId = order.makerAssetData.readBytes4(0);\n        // Handle dydx bridge assets.\n        if (assetProxyId == IAssetData(address(0)).ERC20Bridge.selector) {\n            (, , address bridgeAddress, ) = LibAssetData.decodeERC20BridgeAssetData(order.makerAssetData);\n            if (bridgeAddress == dydxBridgeAddress) {\n                return (\n                    LibDydxBalance.getDydxMakerBalance(order, _getDydxAddress()),\n                    getAssetProxyAllowance(order.makerAddress, order.makerAssetData)\n                );\n            }\n        }\n        return (\n            getBalance(order.makerAddress, order.makerAssetData),\n            getAssetProxyAllowance(order.makerAddress, order.makerAssetData)\n        );\n    }\n}\n"
    },
    "@0x/contracts-asset-proxy/contracts/src/interfaces/IAssetProxy.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ncontract IAssetProxy {\n\n    /// @dev Transfers assets. Either succeeds or throws.\n    /// @param assetData Byte array encoded for the respective asset proxy.\n    /// @param from Address to transfer asset from.\n    /// @param to Address to transfer asset to.\n    /// @param amount Amount of asset to transfer.\n    function transferFrom(\n        bytes calldata assetData,\n        address from,\n        address to,\n        uint256 amount\n    )\n        external;\n    \n    /// @dev Gets the proxy id associated with the proxy address.\n    /// @return Proxy id.\n    function getProxyId()\n        external\n        pure\n        returns (bytes4);\n}\n"
    },
    "contracts/dev-utils/contracts/src/LibDydxBalance.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.16;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-asset-proxy/contracts/src/interfaces/IAssetData.sol\";\nimport \"@0x/contracts-asset-proxy/contracts/src/interfaces/IDydxBridge.sol\";\nimport \"@0x/contracts-asset-proxy/contracts/src/interfaces/IDydx.sol\";\nimport \"@0x/contracts-erc20/contracts/src/LibERC20Token.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibSafeMath.sol\";\nimport \"@0x/contracts-utils/contracts/src/D18.sol\";\nimport \"./LibAssetData.sol\";\n\n\nlibrary LibDydxBalance {\n\n    using LibBytes for bytes;\n    using LibSafeMath for uint256;\n\n    /// @dev Padding % added to the minimum collateralization ratio to\n    ///      prevent withdrawing exactly the amount that would make an account\n    ///      insolvent. 1 bps.\n    int256 private constant MARGIN_RATIO_PADDING = 0.0001e18;\n\n    /// @dev Structure that holds all pertinent info needed to perform a balance\n    ///      check.\n    struct BalanceCheckInfo {\n        IDydx dydx;\n        address bridgeAddress;\n        address makerAddress;\n        address makerTokenAddress;\n        address takerTokenAddress;\n        int256 orderMakerToTakerRate;\n        uint256[] accounts;\n        IDydxBridge.BridgeAction[] actions;\n    }\n\n    /// @dev Gets the maker asset allowance for a Dydx bridge order.\n    /// @param makerAddress The maker of the order.\n    /// @param bridgeAddress The address of the Dydx bridge.\n    /// @param dydx The Dydx contract address.\n    /// @return allowance The maker asset allowance.\n    function getDydxMakerAllowance(address makerAddress, address bridgeAddress, address dydx)\n        public\n        view\n        returns (uint256 allowance)\n    {\n        // Allowance is infinite if the dydx bridge is an operator for the maker.\n        return IDydx(dydx).getIsLocalOperator(makerAddress, bridgeAddress)\n            ? uint256(-1) : 0;\n    }\n\n    /// @dev Gets the maker allowance for a\n    /// @dev Get the maker asset balance of an order with a `DydxBridge` maker asset.\n    /// @param order An order with a dydx maker asset.\n    /// @param dydx The address of the dydx contract.\n    /// @return balance The maker asset balance.\n    function getDydxMakerBalance(LibOrder.Order memory order, address dydx)\n        public\n        view\n        returns (uint256 balance)\n    {\n        BalanceCheckInfo memory info = _getBalanceCheckInfo(order, dydx);\n        // Actions must be well-formed.\n        if (!_areActionsWellFormed(info)) {\n            return 0;\n        }\n        // If the rate we withdraw maker tokens is less than one, the asset\n        // proxy will throw because we will always transfer less maker tokens\n        // than asked.\n        if (_getMakerTokenWithdrawRate(info) < D18.one()) {\n            return 0;\n        }\n        // The maker balance is the smaller of:\n        return LibSafeMath.min256(\n            // How many times we can execute all the deposit actions.\n            _getDepositableMakerAmount(info),\n            // How many times we can execute all the actions before the an\n            // account becomes undercollateralized.\n            _getSolventMakerAmount(info)\n        );\n    }\n\n    /// @dev Checks that:\n    ///      1. Actions are arranged as [...deposits, withdraw].\n    ///      2. There is only one deposit for each market ID.\n    ///      3. Every action has a valid account index.\n    ///      4. There is exactly one withdraw at the end and it is for the\n    ///         maker token.\n    /// @param info State from `_getBalanceCheckInfo()`.\n    /// @return areWellFormed Whether the actions are well-formed.\n    function _areActionsWellFormed(BalanceCheckInfo memory info)\n        internal\n        view\n        returns (bool areWellFormed)\n    {\n        if (info.actions.length == 0) {\n            return false;\n        }\n        uint256 depositCount = 0;\n        // Count the number of deposits.\n        for (; depositCount < info.actions.length; ++depositCount) {\n            IDydxBridge.BridgeAction memory action = info.actions[depositCount];\n            if (action.actionType != IDydxBridge.BridgeActionType.Deposit) {\n                break;\n            }\n            // Search all prior actions for the same market ID.\n            uint256 marketId = action.marketId;\n            for (uint256 j = 0; j < depositCount; ++j) {\n                if (info.actions[j].marketId == marketId) {\n                    // Market ID is not unique.\n                    return false;\n                }\n            }\n            // Check that the account index is within the valid range.\n            if (action.accountIdx >= info.accounts.length) {\n                return false;\n            }\n        }\n        // There must be exactly one withdraw action at the end.\n        if (depositCount + 1 != info.actions.length) {\n            return false;\n        }\n        IDydxBridge.BridgeAction memory withdraw = info.actions[depositCount];\n        if (withdraw.actionType != IDydxBridge.BridgeActionType.Withdraw) {\n            return false;\n        }\n        // And it must be for the maker token.\n        if (info.dydx.getMarketTokenAddress(withdraw.marketId) != info.makerTokenAddress) {\n            return false;\n        }\n        // Check the account index.\n        return withdraw.accountIdx < info.accounts.length;\n    }\n\n    /// @dev Returns the rate at which we withdraw maker tokens.\n    /// @param info State from `_getBalanceCheckInfo()`.\n    /// @return makerTokenWithdrawRate Maker token withdraw rate.\n    function _getMakerTokenWithdrawRate(BalanceCheckInfo memory info)\n        internal\n        pure\n        returns (int256 makerTokenWithdrawRate)\n    {\n        // The last action is always a withdraw for the maker token.\n        IDydxBridge.BridgeAction memory withdraw = info.actions[info.actions.length - 1];\n        return _getActionRate(withdraw);\n    }\n\n    /// @dev Get how much maker asset we can transfer before a deposit fails.\n    /// @param info State from `_getBalanceCheckInfo()`.\n    function _getDepositableMakerAmount(BalanceCheckInfo memory info)\n        internal\n        view\n        returns (uint256 depositableMakerAmount)\n    {\n        depositableMakerAmount = uint256(-1);\n        // Take the minimum maker amount from all deposits.\n        for (uint256 i = 0; i < info.actions.length; ++i) {\n            IDydxBridge.BridgeAction memory action = info.actions[i];\n            // Only looking at deposit actions.\n            if (action.actionType != IDydxBridge.BridgeActionType.Deposit) {\n                continue;\n            }\n            // `depositRate` is the rate at which we convert a maker token into\n            // a taker token for deposit.\n            int256 depositRate = _getActionRate(action);\n            // Taker tokens will be transferred to the maker for every fill, so\n            // we reduce the effective deposit rate if we're depositing the taker\n            // token.\n            address depositToken = info.dydx.getMarketTokenAddress(action.marketId);\n            if (info.takerTokenAddress != address(0) && depositToken == info.takerTokenAddress) {\n                depositRate = D18.sub(depositRate, info.orderMakerToTakerRate);\n            }\n            // If the deposit rate is > 0, we are limited by the transferrable\n            // token balance of the maker.\n            if (depositRate > 0) {\n                uint256 supply = _getTransferabeTokenAmount(\n                    depositToken,\n                    info.makerAddress,\n                    address(info.dydx)\n                );\n                depositableMakerAmount = LibSafeMath.min256(\n                    depositableMakerAmount,\n                    uint256(D18.div(supply, depositRate))\n                );\n            }\n        }\n    }\n\n    /// @dev Get how much maker asset we can transfer before an account\n    ///      becomes insolvent.\n    /// @param info State from `_getBalanceCheckInfo()`.\n    function _getSolventMakerAmount(BalanceCheckInfo memory info)\n        internal\n        view\n        returns (uint256 solventMakerAmount)\n    {\n        solventMakerAmount = uint256(-1);\n        assert(info.actions.length >= 1);\n        IDydxBridge.BridgeAction memory withdraw = info.actions[info.actions.length - 1];\n        assert(withdraw.actionType == IDydxBridge.BridgeActionType.Withdraw);\n        int256 minCr = D18.add(_getMinimumCollateralizationRatio(info.dydx), MARGIN_RATIO_PADDING);\n        // Loop through the accounts.\n        for (uint256 accountIdx = 0; accountIdx < info.accounts.length; ++accountIdx) {\n            (uint256 supplyValue, uint256 borrowValue) =\n                _getAccountMarketValues(info, info.accounts[accountIdx]);\n            // All accounts must currently be solvent.\n            if (borrowValue != 0 && D18.div(supplyValue, borrowValue) < minCr) {\n                return 0;\n            }\n            // If this is the same account used to in the withdraw/borrow action,\n            // compute the maker amount at which it will become insolvent.\n            if (accountIdx != withdraw.accountIdx) {\n                continue;\n            }\n            // Compute the deposit/collateralization rate, which is the rate at\n            // which (USD) value is added to the account across all markets.\n            int256 dd = 0;\n            for (uint256 i = 0; i < info.actions.length - 1; ++i) {\n                IDydxBridge.BridgeAction memory deposit = info.actions[i];\n                assert(deposit.actionType == IDydxBridge.BridgeActionType.Deposit);\n                if (deposit.accountIdx == accountIdx) {\n                    dd = D18.add(\n                        dd,\n                        _getActionRateValue(\n                            info,\n                            deposit\n                        )\n                    );\n                }\n            }\n            // Compute the borrow/withdraw rate, which is the rate at which\n            // (USD) value is deducted from the account.\n            int256 db = _getActionRateValue(\n                info,\n                withdraw\n            );\n            // If the deposit to withdraw ratio is >= the minimum collateralization\n            // ratio, then we will never become insolvent at these prices.\n            if (D18.div(dd, db) >= minCr) {\n                continue;\n            }\n            // If the adjusted deposit rates are equal, the account will remain\n            // at the same level of collateralization.\n            if (D18.mul(minCr, db) == dd) {\n                continue;\n            }\n            // The collateralization ratio for this account, parameterized by\n            // `t` (maker amount), is given by:\n            //      `cr = (supplyValue + t * dd) / (borrowValue + t * db)`\n            // Solving for `t` gives us:\n            //      `t = (supplyValue - cr * borrowValue) / (cr * db - dd)`\n            int256 t = D18.div(\n                D18.sub(supplyValue, D18.mul(minCr, borrowValue)),\n                D18.sub(D18.mul(minCr, db), dd)\n            );\n            solventMakerAmount = LibSafeMath.min256(\n                solventMakerAmount,\n                // `t` is in maker token units, so convert it to maker wei.\n                _toWei(info.makerTokenAddress, uint256(D18.clip(t)))\n            );\n        }\n    }\n\n    /// @dev Create a `BalanceCheckInfo` struct.\n    /// @param order An order with a `DydxBridge` maker asset.\n    /// @param dydx The address of the Dydx contract.\n    /// @return info The `BalanceCheckInfo` struct.\n    function _getBalanceCheckInfo(LibOrder.Order memory order, address dydx)\n        private\n        pure\n        returns (BalanceCheckInfo memory info)\n    {\n        bytes memory rawBridgeData;\n        (, info.makerTokenAddress, info.bridgeAddress, rawBridgeData) =\n            LibAssetData.decodeERC20BridgeAssetData(order.makerAssetData);\n        info.dydx = IDydx(dydx);\n        info.makerAddress = order.makerAddress;\n        if (order.takerAssetData.length == 36) {\n            if (order.takerAssetData.readBytes4(0) == IAssetData(0).ERC20Token.selector) {\n                (, info.takerTokenAddress) =\n                    LibAssetData.decodeERC20AssetData(order.takerAssetData);\n            }\n        }\n        info.orderMakerToTakerRate = D18.div(order.takerAssetAmount, order.makerAssetAmount);\n        (IDydxBridge.BridgeData memory bridgeData) =\n            abi.decode(rawBridgeData, (IDydxBridge.BridgeData));\n        info.accounts = bridgeData.accountNumbers;\n        info.actions = bridgeData.actions;\n    }\n\n    /// @dev Returns the conversion rate for an action.\n    /// @param action A `BridgeAction`.\n    function _getActionRate(IDydxBridge.BridgeAction memory action)\n        private\n        pure\n        returns (int256 rate)\n    {\n        rate = action.conversionRateDenominator == 0\n            ? D18.one()\n            : D18.div(\n                action.conversionRateNumerator,\n                action.conversionRateDenominator\n            );\n    }\n\n    /// @dev Returns the USD value of an action based on its conversion rate\n    ///      and market prices.\n    /// @param info State from `_getBalanceCheckInfo()`.\n    /// @param action A `BridgeAction`.\n    function _getActionRateValue(\n        BalanceCheckInfo memory info,\n        IDydxBridge.BridgeAction memory action\n    )\n        private\n        view\n        returns (int256 value)\n    {\n        address toToken = info.dydx.getMarketTokenAddress(action.marketId);\n        uint256 fromTokenDecimals = LibERC20Token.decimals(info.makerTokenAddress);\n        uint256 toTokenDecimals = LibERC20Token.decimals(toToken);\n        // First express the rate as 18-decimal units.\n        value = toTokenDecimals > fromTokenDecimals\n            ? int256(\n                uint256(_getActionRate(action))\n                    .safeDiv(10 ** (toTokenDecimals - fromTokenDecimals))\n            )\n            : int256(\n                uint256(_getActionRate(action))\n                    .safeMul(10 ** (fromTokenDecimals - toTokenDecimals))\n            );\n        // Prices have 18 + (18 - TOKEN_DECIMALS) decimal places because\n        // consistency is stupid.\n        uint256 price = info.dydx.getMarketPrice(action.marketId).value;\n        // Make prices have 18 decimals.\n        if (toTokenDecimals > 18) {\n            price = price.safeMul(10 ** (toTokenDecimals - 18));\n        } else {\n            price = price.safeDiv(10 ** (18 - toTokenDecimals));\n        }\n        // The action value is the action rate times the price.\n        value = D18.mul(price, value);\n        // Scale by the market premium.\n        int256 marketPremium = D18.add(\n            D18.one(),\n            info.dydx.getMarketMarginPremium(action.marketId).value\n        );\n        if (action.actionType == IDydxBridge.BridgeActionType.Deposit) {\n            value = D18.div(value, marketPremium);\n        } else {\n            value = D18.mul(value, marketPremium);\n        }\n    }\n\n    /// @dev Convert a `D18` fraction of 1 token to the equivalent integer wei.\n    /// @param token Address the of the token.\n    /// @param units Token units expressed with 18 digit precision.\n    function _toWei(address token, uint256 units)\n        private\n        view\n        returns (uint256 rate)\n    {\n        uint256 decimals = LibERC20Token.decimals(token);\n        rate = decimals > 18\n            ? units.safeMul(10 ** (decimals - 18))\n            : units.safeDiv(10 ** (18 - decimals));\n    }\n\n    /// @dev Get the global minimum collateralization ratio required for\n    ///      an account to be considered solvent.\n    /// @param dydx The Dydx interface.\n    function _getMinimumCollateralizationRatio(IDydx dydx)\n        private\n        view\n        returns (int256 ratio)\n    {\n        IDydx.RiskParams memory riskParams = dydx.getRiskParams();\n        return D18.add(D18.one(), D18.toSigned(riskParams.marginRatio.value));\n    }\n\n    /// @dev Get the total supply and borrow values for an account across all markets.\n    /// @param info State from `_getBalanceCheckInfo()`.\n    /// @param account The Dydx account identifier.\n    function _getAccountMarketValues(BalanceCheckInfo memory info, uint256 account)\n        private\n        view\n        returns (uint256 supplyValue, uint256 borrowValue)\n    {\n        (IDydx.Value memory supplyValue_, IDydx.Value memory borrowValue_) =\n            info.dydx.getAdjustedAccountValues(IDydx.AccountInfo(\n                info.makerAddress,\n                account\n            ));\n        // Account values have 36 decimal places because dydx likes to make sure\n        // you're paying attention.\n        return (supplyValue_.value / 1e18, borrowValue_.value / 1e18);\n    }\n\n    /// @dev Get the amount of an ERC20 token held by `owner` that can be transferred\n    ///      by `spender`.\n    /// @param tokenAddress The address of the ERC20 token.\n    /// @param owner The address of the token holder.\n    /// @param spender The address of the token spender.\n    function _getTransferabeTokenAmount(\n        address tokenAddress,\n        address owner,\n        address spender\n    )\n        private\n        view\n        returns (uint256 transferableAmount)\n    {\n        return LibSafeMath.min256(\n            LibERC20Token.allowance(tokenAddress, owner, spender),\n            LibERC20Token.balanceOf(tokenAddress, owner)\n        );\n    }\n}\n"
    },
    "@0x/contracts-asset-proxy/contracts/src/interfaces/IDydxBridge.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ninterface IDydxBridge {\n\n    /// @dev This is the subset of `IDydx.ActionType` that are supported by the bridge.\n    enum BridgeActionType {\n        Deposit,                    // Deposit tokens into dydx account.\n        Withdraw                    // Withdraw tokens from dydx account.\n    }\n\n    struct BridgeAction {\n        BridgeActionType actionType;            // Action to run on dydx account.\n        uint256 accountIdx;                     // Index in `BridgeData.accountNumbers` for this action.\n        uint256 marketId;                       // Market to operate on.\n        uint256 conversionRateNumerator;        // Optional. If set, transfer amount is scaled by (conversionRateNumerator/conversionRateDenominator).\n        uint256 conversionRateDenominator;      // Optional. If set, transfer amount is scaled by (conversionRateNumerator/conversionRateDenominator).\n    }\n\n    struct BridgeData {\n        uint256[] accountNumbers;               // Account number used to identify the owner's specific account.\n        BridgeAction[] actions;                 // Actions to carry out on the owner's accounts.\n    }\n}\n"
    },
    "@0x/contracts-asset-proxy/contracts/src/interfaces/IDydx.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\n\ninterface IDydx {\n\n    /// @dev Represents the unique key that specifies an account\n    struct AccountInfo {\n        address owner;  // The address that owns the account\n        uint256 number; // A nonce that allows a single address to control many accounts\n    }\n\n    enum ActionType {\n        Deposit,   // supply tokens\n        Withdraw,  // borrow tokens\n        Transfer,  // transfer balance between accounts\n        Buy,       // buy an amount of some token (externally)\n        Sell,      // sell an amount of some token (externally)\n        Trade,     // trade tokens against another account\n        Liquidate, // liquidate an undercollateralized or expiring account\n        Vaporize,  // use excess tokens to zero-out a completely negative account\n        Call       // send arbitrary data to an address\n    }\n\n    /// @dev Arguments that are passed to Solo in an ordered list as part of a single operation.\n    /// Each ActionArgs has an actionType which specifies which action struct that this data will be\n    /// parsed into before being processed.\n    struct ActionArgs {\n        ActionType actionType;\n        uint256 accountIdx;\n        AssetAmount amount;\n        uint256 primaryMarketId;\n        uint256 secondaryMarketId;\n        address otherAddress;\n        uint256 otherAccountIdx;\n        bytes data;\n    }\n\n    enum AssetDenomination {\n        Wei, // the amount is denominated in wei\n        Par  // the amount is denominated in par\n    }\n\n    enum AssetReference {\n        Delta, // the amount is given as a delta from the current value\n        Target // the amount is given as an exact number to end up at\n    }\n\n    struct AssetAmount {\n        bool sign; // true if positive\n        AssetDenomination denomination;\n        AssetReference ref;\n        uint256 value;\n    }\n\n    struct D256 {\n        uint256 value;\n    }\n\n    struct Value {\n        uint256 value;\n    }\n\n    struct Price {\n        uint256 value;\n    }\n\n    struct OperatorArg {\n        address operator;\n        bool trusted;\n    }\n\n    /// @dev The global risk parameters that govern the health and security of the system\n    struct RiskParams {\n        // Required ratio of over-collateralization\n        D256 marginRatio;\n        // Percentage penalty incurred by liquidated accounts\n        D256 liquidationSpread;\n        // Percentage of the borrower's interest fee that gets passed to the suppliers\n        D256 earningsRate;\n        // The minimum absolute borrow value of an account\n        // There must be sufficient incentivize to liquidate undercollateralized accounts\n        Value minBorrowedValue;\n    }\n\n    /// @dev The main entry-point to Solo that allows users and contracts to manage accounts.\n    ///      Take one or more actions on one or more accounts. The msg.sender must be the owner or\n    ///      operator of all accounts except for those being liquidated, vaporized, or traded with.\n    ///      One call to operate() is considered a singular \"operation\". Account collateralization is\n    ///      ensured only after the completion of the entire operation.\n    /// @param  accounts  A list of all accounts that will be used in this operation. Cannot contain\n    ///                   duplicates. In each action, the relevant account will be referred-to by its\n    ///                   index in the list.\n    /// @param  actions   An ordered list of all actions that will be taken in this operation. The\n    ///                   actions will be processed in order.\n    function operate(\n        AccountInfo[] calldata accounts,\n        ActionArgs[] calldata actions\n    )\n        external;\n\n    // @dev Approves/disapproves any number of operators. An operator is an external address that has the\n    //      same permissions to manipulate an account as the owner of the account. Operators are simply\n    //      addresses and therefore may either be externally-owned Ethereum accounts OR smart contracts.\n    //      Operators are also able to act as AutoTrader contracts on behalf of the account owner if the\n    //      operator is a smart contract and implements the IAutoTrader interface.\n    // @param args A list of OperatorArgs which have an address and a boolean. The boolean value\n    //        denotes whether to approve (true) or revoke approval (false) for that address.\n    function setOperators(OperatorArg[] calldata args) external;\n\n    /// @dev Return true if a particular address is approved as an operator for an owner's accounts.\n    ///      Approved operators can act on the accounts of the owner as if it were the operator's own.\n    /// @param owner The owner of the accounts\n    /// @param operator The possible operator\n    /// @return isLocalOperator True if operator is approved for owner's accounts\n    function getIsLocalOperator(\n        address owner,\n        address operator\n    )\n        external\n        view\n        returns (bool isLocalOperator);\n\n    /// @dev Get the ERC20 token address for a market.\n    /// @param marketId The market to query\n    /// @return tokenAddress The token address\n    function getMarketTokenAddress(\n        uint256 marketId\n    )\n        external\n        view\n        returns (address tokenAddress);\n\n    /// @dev Get all risk parameters in a single struct.\n    /// @return riskParams All global risk parameters\n    function getRiskParams()\n        external\n        view\n        returns (RiskParams memory riskParams);\n\n    /// @dev Get the price of the token for a market.\n    /// @param marketId The market to query\n    /// @return price The price of each atomic unit of the token\n    function getMarketPrice(\n        uint256 marketId\n    )\n        external\n        view\n        returns (Price memory price);\n\n    /// @dev Get the margin premium for a market. A margin premium makes it so that any positions that\n    ///      include the market require a higher collateralization to avoid being liquidated.\n    /// @param  marketId  The market to query\n    /// @return premium The market's margin premium\n    function getMarketMarginPremium(uint256 marketId)\n        external\n        view\n        returns (D256 memory premium);\n\n    /// @dev Get the total supplied and total borrowed values of an account adjusted by the marginPremium\n    ///      of each market. Supplied values are divided by (1 + marginPremium) for each market and\n    ///      borrowed values are multiplied by (1 + marginPremium) for each market. Comparing these\n    ///      adjusted values gives the margin-ratio of the account which will be compared to the global\n    ///      margin-ratio when determining if the account can be liquidated.\n    /// @param account The account to query\n    /// @return supplyValue The supplied value of the account (adjusted for marginPremium)\n    /// @return borrowValue The borrowed value of the account (adjusted for marginPremium)\n    function getAdjustedAccountValues(\n        AccountInfo calldata account\n    )\n        external\n        view\n        returns (Value memory supplyValue, Value memory borrowValue);\n}\n"
    },
    "@0x/contracts-utils/contracts/src/D18.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.16;\n\n\n/// @dev A library for working with 18 digit, base 10 decimals.\nlibrary D18 {\n\n    /// @dev Decimal places for dydx value quantities.\n    uint256 private constant PRECISION = 18;\n    /// @dev 1.0 in base-18 decimal.\n    int256 private constant DECIMAL_ONE = int256(10 ** PRECISION);\n    /// @dev Minimum signed integer value.\n    int256 private constant MIN_INT256_VALUE = int256(0x8000000000000000000000000000000000000000000000000000000000000000);\n\n    /// @dev Return `1.0`\n    function one()\n        internal\n        pure\n        returns (int256 r)\n    {\n        r = DECIMAL_ONE;\n    }\n\n    /// @dev Add two decimals.\n    function add(int256 a, int256 b)\n        internal\n        pure\n        returns (int256 r)\n    {\n        r = _add(a, b);\n    }\n\n    /// @dev Add two decimals.\n    function add(uint256 a, int256 b)\n        internal\n        pure\n        returns (int256 r)\n    {\n        require(int256(a) >= 0, \"D18/DECIMAL_VALUE_TOO_BIG\");\n        r = _add(int256(a), b);\n    }\n\n    /// @dev Add two decimals.\n    function add(int256 a, uint256 b)\n        internal\n        pure\n        returns (int256 r)\n    {\n        require(int256(b) >= 0, \"D18/DECIMAL_VALUE_TOO_BIG\");\n        r = _add(a, int256(b));\n    }\n\n    /// @dev Add two decimals.\n    function add(uint256 a, uint256 b)\n        internal\n        pure\n        returns (int256 r)\n    {\n        require(int256(a) >= 0, \"D18/DECIMAL_VALUE_TOO_BIG\");\n        require(int256(b) >= 0, \"D18/DECIMAL_VALUE_TOO_BIG\");\n        r = _add(int256(a), int256(b));\n    }\n\n    /// @dev Subract two decimals.\n    function sub(int256 a, int256 b)\n        internal\n        pure\n        returns (int256 r)\n    {\n        r = _add(a, -b);\n    }\n\n    /// @dev Subract two decimals.\n    function sub(uint256 a, int256 b)\n        internal\n        pure\n        returns (int256 r)\n    {\n        require(int256(a) >= 0, \"D18/DECIMAL_VALUE_TOO_BIG\");\n        r = _add(int256(a), -b);\n    }\n\n    /// @dev Subract two decimals.\n    function sub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (int256 r)\n    {\n        require(int256(a) >= 0, \"D18/DECIMAL_VALUE_TOO_BIG\");\n        require(int256(b) >= 0, \"D18/DECIMAL_VALUE_TOO_BIG\");\n        r = _add(int256(a), -int256(b));\n    }\n\n    /// @dev Multiply two decimals.\n    function mul(int256 a, int256 b)\n        internal\n        pure\n        returns (int256 r)\n    {\n        r = _div(_mul(a, b), DECIMAL_ONE);\n    }\n\n    /// @dev Multiply two decimals.\n    function mul(uint256 a, int256 b)\n        internal\n        pure\n        returns (int256 r)\n    {\n        require(int256(a) >= 0, \"D18/DECIMAL_VALUE_TOO_BIG\");\n        r = _div(_mul(int256(a), b), DECIMAL_ONE);\n    }\n\n    /// @dev Multiply two decimals.\n    function mul(int256 a, uint256 b)\n        internal\n        pure\n        returns (int256 r)\n    {\n        require(int256(b) >= 0, \"D18/DECIMAL_VALUE_TOO_BIG\");\n        r = _div(_mul(a, int256(b)), DECIMAL_ONE);\n    }\n\n    /// @dev Multiply two decimals.\n    function mul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (int256 r)\n    {\n        require(int256(a) >= 0, \"D18/DECIMAL_VALUE_TOO_BIG\");\n        require(int256(b) >= 0, \"D18/DECIMAL_VALUE_TOO_BIG\");\n        r = _div(_mul(int256(a), int256(b)), DECIMAL_ONE);\n    }\n\n    /// @dev Divide two decimals.\n    function div(int256 a, int256 b)\n        internal\n        pure\n        returns (int256 r)\n    {\n        r = _div(_mul(a, DECIMAL_ONE), b);\n    }\n\n    /// @dev Divide two decimals.\n    function div(uint256 a, int256 b)\n        internal\n        pure\n        returns (int256 r)\n    {\n        require(int256(a) >= 0, \"D18/DECIMAL_VALUE_TOO_BIG\");\n        r = _div(_mul(int256(a), DECIMAL_ONE), b);\n    }\n\n    /// @dev Divide two decimals.\n    function div(int256 a, uint256 b)\n        internal\n        pure\n        returns (int256 r)\n    {\n        require(int256(b) >= 0, \"D18/DECIMAL_VALUE_TOO_BIG\");\n        r = _div(_mul(a, DECIMAL_ONE), int256(b));\n    }\n\n    /// @dev Divide two decimals.\n    function div(uint256 a, uint256 b)\n        internal\n        pure\n        returns (int256 r)\n    {\n        require(int256(a) >= 0, \"D18/DECIMAL_VALUE_TOO_BIG\");\n        require(int256(b) >= 0, \"D18/DECIMAL_VALUE_TOO_BIG\");\n        r = _div(_mul(int256(a), DECIMAL_ONE), int256(b));\n    }\n\n    /// @dev Safely convert an unsigned integer into a signed integer.\n    function toSigned(uint256 a)\n        internal\n        pure\n        returns (int256 r)\n    {\n        require(int256(a) >= 0, \"D18/DECIMAL_VALUE_TOO_BIG\");\n        r = int256(a);\n    }\n\n    /// @dev Clip a signed value to be positive.\n    function clip(int256 a)\n        internal\n        pure\n        returns (int256 r)\n    {\n        r = a < 0 ? 0 : a;\n    }\n\n    /// @dev Safely multiply two signed integers.\n    function _mul(int256 a, int256 b)\n        private\n        pure\n        returns (int256 r)\n    {\n        if (a == 0 || b == 0) {\n            return 0;\n        }\n        r = a * b;\n        require(r / a == b && r / b == a, \"D18/DECIMAL_MUL_OVERFLOW\");\n        return r;\n    }\n\n    /// @dev Safely divide two signed integers.\n    function _div(int256 a, int256 b)\n        private\n        pure\n        returns (int256 r)\n    {\n        require(b != 0, \"D18/DECIMAL_DIV_BY_ZERO\");\n        require(a != MIN_INT256_VALUE || b != -1, \"D18/DECIMAL_DIV_OVERFLOW\");\n        r = a / b;\n    }\n\n    /// @dev Safely add two signed integers.\n    function _add(int256 a, int256 b)\n        private\n        pure\n        returns (int256 r)\n    {\n        r = a + b;\n        require(\n            !((a < 0 && b < 0 && r > a) || (a > 0 && b > 0 && r < a)),\n            \"D18/DECIMAL_ADD_OVERFLOW\"\n        );\n    }\n\n}\n"
    },
    "contracts/dev-utils/contracts/src/OrderValidationUtils.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.16;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibMath.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibSafeMath.sol\";\nimport \"./Addresses.sol\";\nimport \"./AssetBalance.sol\";\nimport \"./LibAssetData.sol\";\nimport \"./LibOrderTransferSimulation.sol\";\n\n\ncontract OrderValidationUtils is\n    Addresses,\n    AssetBalance\n{\n    using LibBytes for bytes;\n    using LibSafeMath for uint256;\n\n    /// @dev Fetches all order-relevant information needed to validate if the supplied order is fillable.\n    /// @param order The order structure.\n    /// @param signature Signature provided by maker that proves the order's authenticity.\n    /// `0x01` can always be provided if the signature does not need to be validated.\n    /// @return The orderInfo (hash, status, and `takerAssetAmount` already filled for the given order),\n    /// fillableTakerAssetAmount (amount of the order's `takerAssetAmount` that is fillable given all on-chain state),\n    /// and isValidSignature (validity of the provided signature).\n    /// NOTE: If the `takerAssetData` encodes data for multiple assets, `fillableTakerAssetAmount` will represent a \"scaled\"\n    /// amount, meaning it must be multiplied by all the individual asset amounts within the `takerAssetData` to get the final\n    /// amount of each asset that can be filled.\n    function getOrderRelevantState(LibOrder.Order memory order, bytes memory signature)\n        public\n        returns (\n            LibOrder.OrderInfo memory orderInfo,\n            uint256 fillableTakerAssetAmount,\n            bool isValidSignature\n        )\n    {\n        // Get info specific to order\n        orderInfo = IExchange(exchangeAddress).getOrderInfo(order);\n\n        // Validate the maker's signature\n        address makerAddress = order.makerAddress;\n        isValidSignature = IExchange(exchangeAddress).isValidOrderSignature(\n            order,\n            signature\n        );\n\n        // Get the transferable amount of the `makerAsset`\n        uint256 transferableMakerAssetAmount = _getTransferableConvertedMakerAssetAmount(\n            order\n        );\n\n        // Get the amount of `takerAsset` that is transferable to maker given the\n        // transferability of `makerAsset`, `makerFeeAsset`,\n        // and the total amounts specified in the order\n        uint256 transferableTakerAssetAmount;\n        if (order.makerAssetData.equals(order.makerFeeAssetData)) {\n            // If `makerAsset` equals `makerFeeAsset`, the % that can be filled is\n            // transferableMakerAssetAmount / (makerAssetAmount + makerFee)\n            transferableTakerAssetAmount = LibMath.getPartialAmountFloor(\n                transferableMakerAssetAmount,\n                order.makerAssetAmount.safeAdd(order.makerFee),\n                order.takerAssetAmount\n            );\n        } else {\n            // If `makerFee` is 0, the % that can be filled is (transferableMakerAssetAmount / makerAssetAmount)\n            if (order.makerFee == 0) {\n                transferableTakerAssetAmount = LibMath.getPartialAmountFloor(\n                    transferableMakerAssetAmount,\n                    order.makerAssetAmount,\n                    order.takerAssetAmount\n                );\n\n            // If `makerAsset` does not equal `makerFeeAsset`, the % that can be filled is the lower of\n            // (transferableMakerAssetAmount / makerAssetAmount) and (transferableMakerAssetFeeAmount / makerFee)\n            } else {\n                // Get the transferable amount of the `makerFeeAsset`\n                uint256 transferableMakerFeeAssetAmount = getTransferableAssetAmount(\n                    makerAddress,\n                    order.makerFeeAssetData\n                );\n                uint256 transferableMakerToTakerAmount = LibMath.getPartialAmountFloor(\n                    transferableMakerAssetAmount,\n                    order.makerAssetAmount,\n                    order.takerAssetAmount\n                );\n                uint256 transferableMakerFeeToTakerAmount = LibMath.getPartialAmountFloor(\n                    transferableMakerFeeAssetAmount,\n                    order.makerFee,\n                    order.takerAssetAmount\n                );\n                transferableTakerAssetAmount = LibSafeMath.min256(transferableMakerToTakerAmount, transferableMakerFeeToTakerAmount);\n            }\n        }\n\n        // `fillableTakerAssetAmount` is the lower of the order's remaining `takerAssetAmount` and the `transferableTakerAssetAmount`\n        fillableTakerAssetAmount = LibSafeMath.min256(\n            order.takerAssetAmount.safeSub(orderInfo.orderTakerAssetFilledAmount),\n            transferableTakerAssetAmount\n        );\n\n        // Ensure that all of the asset data is valid. Fee asset data only needs\n        // to be valid if the fees are nonzero.\n        if (!_areOrderAssetDatasValid(order)) {\n            fillableTakerAssetAmount = 0;\n        }\n\n        // If the order is not fillable, then the fillable taker asset amount is\n        // zero by definition.\n        if (orderInfo.orderStatus != LibOrder.OrderStatus.FILLABLE) {\n            fillableTakerAssetAmount = 0;\n        }\n\n        return (orderInfo, fillableTakerAssetAmount, isValidSignature);\n    }\n\n    /// @dev Fetches all order-relevant information needed to validate if the supplied orders are fillable.\n    /// @param orders Array of order structures.\n    /// @param signatures Array of signatures provided by makers that prove the authenticity of the orders.\n    /// `0x01` can always be provided if a signature does not need to be validated.\n    /// @return The ordersInfo (array of the hash, status, and `takerAssetAmount` already filled for each order),\n    /// fillableTakerAssetAmounts (array of amounts for each order's `takerAssetAmount` that is fillable given all on-chain state),\n    /// and isValidSignature (array containing the validity of each provided signature).\n    /// NOTE: If the `takerAssetData` encodes data for multiple assets, each element of `fillableTakerAssetAmounts`\n    /// will represent a \"scaled\" amount, meaning it must be multiplied by all the individual asset amounts within\n    /// the `takerAssetData` to get the final amount of each asset that can be filled.\n    function getOrderRelevantStates(LibOrder.Order[] memory orders, bytes[] memory signatures)\n        public\n        returns (\n            LibOrder.OrderInfo[] memory ordersInfo,\n            uint256[] memory fillableTakerAssetAmounts,\n            bool[] memory isValidSignature\n        )\n    {\n        uint256 length = orders.length;\n        ordersInfo = new LibOrder.OrderInfo[](length);\n        fillableTakerAssetAmounts = new uint256[](length);\n        isValidSignature = new bool[](length);\n\n        for (uint256 i = 0; i != length; i++) {\n            (ordersInfo[i], fillableTakerAssetAmounts[i], isValidSignature[i]) = getOrderRelevantState(\n                orders[i],\n                signatures[i]\n            );\n        }\n\n        return (ordersInfo, fillableTakerAssetAmounts, isValidSignature);\n    }\n\n    /// @dev Gets the amount of an asset transferable by the maker of an order.\n    /// @param ownerAddress Address of the owner of the asset.\n    /// @param assetData Description of tokens, per the AssetProxy contract specification.\n    /// @return The amount of the asset tranferable by the owner.\n    /// NOTE: If the `assetData` encodes data for multiple assets, the `transferableAssetAmount`\n    /// will represent the amount of times the entire `assetData` can be transferred. To calculate\n    /// the total individual transferable amounts, this scaled `transferableAmount` must be multiplied by\n    /// the individual asset amounts located within the `assetData`.\n    function getTransferableAssetAmount(address ownerAddress, bytes memory assetData)\n        public\n        returns (uint256 transferableAssetAmount)\n    {\n        (uint256 balance, uint256 allowance) = getBalanceAndAssetProxyAllowance(\n            ownerAddress,\n            assetData\n        );\n        transferableAssetAmount = LibSafeMath.min256(balance, allowance);\n        return transferableAssetAmount;\n    }\n\n    /// @dev Gets the amount of an asset transferable by the maker of an order.\n    ///      Similar to `getTransferableAssetAmount()`, but can handle maker asset\n    ///      types that depend on taker assets being transferred first (e.g., Dydx bridge).\n    /// @param order The order.\n    /// @return transferableAssetAmount Amount of maker asset that can be transferred.\n    function _getTransferableConvertedMakerAssetAmount(\n        LibOrder.Order memory order\n    )\n        internal\n        returns (uint256 transferableAssetAmount)\n    {\n        (uint256 balance, uint256 allowance) = _getConvertibleMakerBalanceAndAssetProxyAllowance(order);\n        transferableAssetAmount = LibSafeMath.min256(balance, allowance);\n        return LibSafeMath.min256(transferableAssetAmount, order.makerAssetAmount);\n    }\n\n    /// @dev Checks that the asset data contained in a ZeroEx is valid and returns\n    /// a boolean that indicates whether or not the asset data was found to be valid.\n    /// @param order A ZeroEx order to validate.\n    /// @return The validatity of the asset data.\n    function _areOrderAssetDatasValid(LibOrder.Order memory order)\n        internal\n        pure\n        returns (bool)\n    {\n        return _isAssetDataValid(order.makerAssetData) &&\n            (order.makerFee == 0 || _isAssetDataValid(order.makerFeeAssetData)) &&\n            _isAssetDataValid(order.takerAssetData) &&\n            (order.takerFee == 0 || _isAssetDataValid(order.takerFeeAssetData));\n    }\n\n    /// @dev This function handles the edge cases around taker validation. This function\n    ///      currently attempts to find duplicate ERC721 token's in the taker\n    ///      multiAssetData.\n    /// @param assetData The asset data that should be validated.\n    /// @return Whether or not the order should be considered valid.\n    function _isAssetDataValid(bytes memory assetData)\n        internal\n        pure\n        returns (bool)\n    {\n        // Asset data must be composed of an asset proxy Id and a bytes segment with\n        // a length divisible by 32.\n        if (assetData.length % 32 != 4) {\n            return false;\n        }\n\n        // Only process the taker asset data if it is multiAssetData.\n        bytes4 assetProxyId = assetData.readBytes4(0);\n        if (assetProxyId != IAssetData(address(0)).MultiAsset.selector) {\n            return true;\n        }\n\n        // Get array of values and array of assetDatas\n        (, , bytes[] memory nestedAssetData) =\n            LibAssetData.decodeMultiAssetData(assetData);\n\n        uint256 length = nestedAssetData.length;\n        for (uint256 i = 0; i != length; i++) {\n            // TODO(jalextowle): Implement similar validation for non-fungible ERC1155 asset data.\n            bytes4 nestedAssetProxyId = nestedAssetData[i].readBytes4(0);\n            if (nestedAssetProxyId == IAssetData(address(0)).ERC721Token.selector) {\n                if (_isAssetDataDuplicated(nestedAssetData, i)) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    /// Determines whether or not asset data is duplicated later in the nested asset data.\n    /// @param nestedAssetData The asset data to scan for duplication.\n    /// @param startIdx The index where the scan should begin.\n    /// @return A boolean reflecting whether or not the starting asset data was duplicated.\n    function _isAssetDataDuplicated(\n        bytes[] memory nestedAssetData,\n        uint256 startIdx\n    )\n        internal\n        pure\n        returns (bool)\n    {\n        uint256 length = nestedAssetData.length;\n        for (uint256 i = startIdx + 1; i < length; i++) {\n            if (nestedAssetData[startIdx].equals(nestedAssetData[i])) {\n                return true;\n            }\n        }\n    }\n}\n"
    },
    "contracts/dev-utils/contracts/test/TestLibDydxBalance.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.16;\npragma experimental ABIEncoderV2;\n\nimport \"../src/LibDydxBalance.sol\";\n\n\ncontract TestLibDydxBalanceToken {\n\n    uint8 public decimals;\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    constructor(uint8 decimals_) public {\n        decimals = decimals_;\n    }\n\n    function setBalance(address owner, uint256 balance) external {\n        balanceOf[owner] = balance;\n    }\n\n    function setApproval(\n        address owner,\n        address spender,\n        uint256 allowance_\n    )\n        external\n    {\n        allowance[owner][spender] = allowance_;\n    }\n}\n\n\ncontract TestLibDydxBalance {\n\n    mapping (address => TestLibDydxBalanceToken) private tokens;\n\n    function createToken(uint8 decimals) external returns (address) {\n        TestLibDydxBalanceToken token = new TestLibDydxBalanceToken(decimals);\n        return address(tokens[address(token)] = token);\n    }\n\n    function setTokenBalance(\n        address tokenAddress,\n        address owner,\n        uint256 balance\n    )\n        external\n    {\n        tokens[tokenAddress].setBalance(owner, balance);\n    }\n\n    function setTokenApproval(\n        address tokenAddress,\n        address owner,\n        address spender,\n        uint256 allowance\n    )\n        external\n    {\n        tokens[tokenAddress].setApproval(owner, spender, allowance);\n    }\n\n    function getDydxMakerBalance(LibOrder.Order memory order, address dydx)\n        public\n        view\n        returns (uint256 balance)\n    {\n        return LibDydxBalance.getDydxMakerBalance(order, dydx);\n    }\n\n    function getSolventMakerAmount(\n        LibDydxBalance.BalanceCheckInfo memory info\n    )\n        public\n        view\n        returns (uint256 solventMakerAmount)\n    {\n        return LibDydxBalance._getSolventMakerAmount(info);\n    }\n\n    function getDepositableMakerAmount(\n        LibDydxBalance.BalanceCheckInfo memory info\n    )\n        public\n        view\n        returns (uint256 depositableMakerAmount)\n    {\n        return LibDydxBalance._getDepositableMakerAmount(info);\n    }\n\n    function areActionsWellFormed(LibDydxBalance.BalanceCheckInfo memory info)\n        public\n        view\n        returns (bool areWellFormed)\n    {\n        return LibDydxBalance._areActionsWellFormed(info);\n    }\n}\n"
    },
    "contracts/dev-utils/contracts/test/TestDydx.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.16;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-asset-proxy/contracts/src/interfaces/IDydx.sol\";\nimport \"@0x/contracts-erc20/contracts/src/LibERC20Token.sol\";\n\n\n// solhint-disable separate-by-one-line-in-contract\ncontract TestDydx {\n\n    struct OperatorConfig {\n        address owner;\n        address operator;\n    }\n\n    struct AccountConfig {\n        address owner;\n        uint256 accountId;\n        int256[] balances;\n    }\n\n    struct MarketInfo {\n        address token;\n        uint256 price;\n    }\n\n    struct TestConfig {\n        uint256 marginRatio;\n        OperatorConfig[] operators;\n        AccountConfig[] accounts;\n        MarketInfo[] markets;\n    }\n\n    mapping (bytes32 => bool) private _operators;\n    mapping (bytes32 => int256) private _balance;\n    MarketInfo[] private _markets;\n    uint256 private _marginRatio;\n\n    constructor(TestConfig memory config) public {\n        _marginRatio = config.marginRatio;\n        for (uint256 marketId = 0; marketId < config.markets.length; ++marketId) {\n            _markets.push(config.markets[marketId]);\n        }\n        for (uint256 i = 0; i < config.operators.length; ++i) {\n            OperatorConfig memory op = config.operators[i];\n            _operators[_getOperatorHash(op.owner, op.operator)] = true;\n        }\n        for (uint256 i = 0; i < config.accounts.length; ++i) {\n            AccountConfig memory acct = config.accounts[i];\n            for (uint256 marketId = 0; marketId < acct.balances.length; ++marketId) {\n                _balance[_getBalanceHash(acct.owner, acct.accountId, marketId)] =\n                    acct.balances[marketId];\n            }\n        }\n    }\n\n    function getIsLocalOperator(\n        address owner,\n        address operator\n    )\n        external\n        view\n        returns (bool isLocalOperator)\n    {\n        return _operators[_getOperatorHash(owner, operator)];\n    }\n\n    function getMarketTokenAddress(\n        uint256 marketId\n    )\n        external\n        view\n        returns (address tokenAddress)\n    {\n        return _markets[marketId].token;\n    }\n\n    function getRiskParams()\n        external\n        view\n        returns (IDydx.RiskParams memory riskParams)\n    {\n        return IDydx.RiskParams({\n            marginRatio: IDydx.D256(_marginRatio),\n            liquidationSpread: IDydx.D256(0),\n            earningsRate: IDydx.D256(0),\n            minBorrowedValue: IDydx.Value(0)\n        });\n    }\n\n    function getAdjustedAccountValues(\n        IDydx.AccountInfo calldata account\n    )\n        external\n        view\n        returns (IDydx.Value memory supplyValue, IDydx.Value memory borrowValue)\n    {\n        for (uint256 marketId = 0; marketId < _markets.length; ++marketId) {\n            int256 balance =\n                _balance[_getBalanceHash(account.owner, account.number, marketId)];\n            // Account values have 36 decimal places.\n            // `getMarketPrice()` returns a unit with\n            // 18 + (18 - TOKEN_DECIMALS) decimal places so multiplying the price\n            // with the wei balance will result in a 36 decimal value.\n            balance = balance * int256(getMarketPrice(marketId).value);\n            if (balance >= 0) {\n                supplyValue.value += uint256(balance);\n            } else {\n                borrowValue.value += uint256(-balance);\n            }\n        }\n    }\n\n    function getMarketMarginPremium(uint256)\n        external\n        view\n        returns (IDydx.D256 memory premium)\n    {\n        // Return 0.\n        return premium;\n    }\n\n    function getMarketPrice(\n        uint256 marketId\n    )\n        public\n        view\n        returns (IDydx.Price memory price)\n    {\n        MarketInfo memory market = _markets[marketId];\n        uint256 decimals = LibERC20Token.decimals(market.token);\n        price.value = _markets[marketId].price;\n        // Market prices have 18 + (18 - TOKEN_DECIMALS)\n        if (decimals > 18) {\n            price.value /= 10 ** (decimals - 18);\n        } else {\n            price.value *= 10 ** (18 - decimals);\n        }\n    }\n\n    function _getOperatorHash(address owner, address operator)\n        private\n        pure\n        returns (bytes32 operatorHash)\n    {\n        return keccak256(abi.encode(\n            owner,\n            operator\n        ));\n    }\n\n    function _getBalanceHash(address owner, uint256 accountId, uint256 marketId)\n        private\n        pure\n        returns (bytes32 balanceHash)\n    {\n        return keccak256(abi.encode(\n            owner,\n            accountId,\n            marketId\n        ));\n    }\n}\n"
    },
    "contracts/asset-proxy/contracts/src/bridges/SwerveBridge.sol": {
      "content": "\n/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol\";\nimport \"@0x/contracts-erc20/contracts/src/LibERC20Token.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/IWallet.sol\";\nimport \"@0x/contracts-utils/contracts/src/DeploymentConstants.sol\";\nimport \"../interfaces/IERC20Bridge.sol\";\nimport \"../interfaces/ICurve.sol\";\n\n\n// solhint-disable not-rely-on-time\n// solhint-disable space-after-comma\ncontract SwerveBridge is\n    IERC20Bridge,\n    IWallet,\n    DeploymentConstants\n{\n    struct SwerveBridgeData {\n        address curveAddress;\n        bytes4 exchangeFunctionSelector;\n        address fromTokenAddress;\n        int128 fromCoinIdx;\n        int128 toCoinIdx;\n    }\n\n    /// @dev Callback for `ICurve`. Tries to buy `amount` of\n    ///      `toTokenAddress` tokens by selling the entirety of the opposing asset\n    ///      (DAI, USDC) to the Curve contract, then transfers the bought\n    ///      tokens to `to`.\n    /// @param toTokenAddress The token to give to `to` (i.e DAI, USDC, USDT).\n    /// @param from The maker (this contract).\n    /// @param to The recipient of the bought tokens.\n    /// @param amount Minimum amount of `toTokenAddress` tokens to buy.\n    /// @param bridgeData The abi-encoeded \"from\" token address.\n    /// @return success The magic bytes if successful.\n    function bridgeTransferFrom(\n        address toTokenAddress,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata bridgeData\n    )\n        external\n        returns (bytes4 success)\n    {\n        // Decode the bridge data to get the SwerveBridgeData metadata.\n        SwerveBridgeData memory data = abi.decode(bridgeData, (SwerveBridgeData));\n\n        require(toTokenAddress != data.fromTokenAddress, \"SwerveBridge/INVALID_PAIR\");\n        uint256 fromTokenBalance = IERC20Token(data.fromTokenAddress).balanceOf(address(this));\n        // Grant an allowance to the exchange to spend `fromTokenAddress` token.\n        LibERC20Token.approveIfBelow(data.fromTokenAddress, data.curveAddress, fromTokenBalance);\n\n        // Try to sell all of this contract's `fromTokenAddress` token balance.\n        {\n            (bool didSucceed, bytes memory resultData) =\n                data.curveAddress.call(abi.encodeWithSelector(\n                    data.exchangeFunctionSelector,\n                    data.fromCoinIdx,\n                    data.toCoinIdx,\n                    // dx\n                    fromTokenBalance,\n                    // min dy\n                    amount\n                ));\n            if (!didSucceed) {\n                assembly { revert(add(resultData, 32), mload(resultData)) }\n            }\n        }\n\n        uint256 toTokenBalance = IERC20Token(toTokenAddress).balanceOf(address(this));\n        // Transfer the converted `toToken`s to `to`.\n        LibERC20Token.transfer(toTokenAddress, to, toTokenBalance);\n\n        emit ERC20BridgeTransfer(\n            data.fromTokenAddress,\n            toTokenAddress,\n            fromTokenBalance,\n            toTokenBalance,\n            from,\n            to\n        );\n        return BRIDGE_SUCCESS;\n    }\n\n    /// @dev `SignatureType.Wallet` callback, so that this bridge can be the maker\n    ///      and sign for itself in orders. Always succeeds.\n    /// @return magicValue Magic success bytes, always.\n    function isValidSignature(\n        bytes32,\n        bytes calldata\n    )\n        external\n        view\n        returns (bytes4 magicValue)\n    {\n        return LEGACY_WALLET_MAGIC_VALUE;\n    }\n}\n"
    },
    "contracts/asset-proxy/contracts/src/interfaces/ICurve.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\n// solhint-disable func-name-mixedcase\ninterface ICurve {\n\n    /// @dev Sell `sellAmount` of `fromToken` token and receive `toToken` token.\n    ///      This function exists on later versions of Curve (USDC/DAI/USDT)\n    /// @param i The token index being sold.\n    /// @param j The token index being bought.\n    /// @param sellAmount The amount of token being bought.\n    /// @param minBuyAmount The minimum buy amount of the token being bought.\n    function exchange_underlying(\n        int128 i,\n        int128 j,\n        uint256 sellAmount,\n        uint256 minBuyAmount\n    )\n        external;\n\n    /// @dev Get the amount of `toToken` by selling `sellAmount` of `fromToken`\n    /// @param i The token index being sold.\n    /// @param j The token index being bought.\n    /// @param sellAmount The amount of token being bought.\n    function get_dy_underlying(\n        int128 i,\n        int128 j,\n        uint256 sellAmount\n    )\n        external\n        returns (uint256 dy);\n\n    /// @dev Get the amount of `fromToken` by buying `buyAmount` of `toToken`\n    /// @param i The token index being sold.\n    /// @param j The token index being bought.\n    /// @param buyAmount The amount of token being bought.\n    function get_dx_underlying(\n        int128 i,\n        int128 j,\n        uint256 buyAmount\n    )\n        external\n        returns (uint256 dx);\n\n    /// @dev Get the underlying token address from the token index\n    /// @param i The token index.\n    function underlying_coins(\n        int128 i\n    )\n        external\n        returns (address tokenAddress);\n}\n"
    },
    "contracts/asset-proxy/contracts/src/bridges/SnowSwapBridge.sol": {
      "content": "\n/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol\";\nimport \"@0x/contracts-erc20/contracts/src/LibERC20Token.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/IWallet.sol\";\nimport \"@0x/contracts-utils/contracts/src/DeploymentConstants.sol\";\nimport \"../interfaces/IERC20Bridge.sol\";\nimport \"../interfaces/ICurve.sol\";\n\n\n// solhint-disable not-rely-on-time\n// solhint-disable space-after-comma\ncontract SnowSwapBridge is\n    IERC20Bridge,\n    IWallet,\n    DeploymentConstants\n{\n    struct SnowSwapBridgeData {\n        address curveAddress;\n        bytes4 exchangeFunctionSelector;\n        address fromTokenAddress;\n        int128 fromCoinIdx;\n        int128 toCoinIdx;\n    }\n\n    /// @dev Callback for `ICurve`. Tries to buy `amount` of\n    ///      `toTokenAddress` tokens by selling the entirety of the opposing asset\n    ///      (DAI, USDC) to the Curve contract, then transfers the bought\n    ///      tokens to `to`.\n    /// @param toTokenAddress The token to give to `to` (i.e DAI, USDC, USDT).\n    /// @param from The maker (this contract).\n    /// @param to The recipient of the bought tokens.\n    /// @param amount Minimum amount of `toTokenAddress` tokens to buy.\n    /// @param bridgeData The abi-encoeded \"from\" token address.\n    /// @return success The magic bytes if successful.\n    function bridgeTransferFrom(\n        address toTokenAddress,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata bridgeData\n    )\n        external\n        returns (bytes4 success)\n    {\n        // Decode the bridge data to get the SnowSwap metadata.\n        SnowSwapBridgeData memory data = abi.decode(bridgeData, (SnowSwapBridgeData));\n\n        require(toTokenAddress != data.fromTokenAddress, \"SnowSwapBridge/INVALID_PAIR\");\n        uint256 fromTokenBalance = IERC20Token(data.fromTokenAddress).balanceOf(address(this));\n        // Grant an allowance to the exchange to spend `fromTokenAddress` token.\n        LibERC20Token.approveIfBelow(data.fromTokenAddress, data.curveAddress, fromTokenBalance);\n\n        // Try to sell all of this contract's `fromTokenAddress` token balance.\n        {\n            (bool didSucceed, bytes memory resultData) =\n                data.curveAddress.call(abi.encodeWithSelector(\n                    data.exchangeFunctionSelector,\n                    data.fromCoinIdx,\n                    data.toCoinIdx,\n                    // dx\n                    fromTokenBalance,\n                    // min dy\n                    amount\n                ));\n            if (!didSucceed) {\n                assembly { revert(add(resultData, 32), mload(resultData)) }\n            }\n        }\n\n        uint256 toTokenBalance = IERC20Token(toTokenAddress).balanceOf(address(this));\n        // Transfer the converted `toToken`s to `to`.\n        LibERC20Token.transfer(toTokenAddress, to, toTokenBalance);\n\n        emit ERC20BridgeTransfer(\n            data.fromTokenAddress,\n            toTokenAddress,\n            fromTokenBalance,\n            toTokenBalance,\n            from,\n            to\n        );\n        return BRIDGE_SUCCESS;\n    }\n\n    /// @dev `SignatureType.Wallet` callback, so that this bridge can be the maker\n    ///      and sign for itself in orders. Always succeeds.\n    /// @return magicValue Magic success bytes, always.\n    function isValidSignature(\n        bytes32,\n        bytes calldata\n    )\n        external\n        view\n        returns (bytes4 magicValue)\n    {\n        return LEGACY_WALLET_MAGIC_VALUE;\n    }\n}\n"
    },
    "contracts/asset-proxy/contracts/src/bridges/ShellBridge.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol\";\nimport \"@0x/contracts-erc20/contracts/src/LibERC20Token.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/IWallet.sol\";\nimport \"@0x/contracts-utils/contracts/src/DeploymentConstants.sol\";\nimport \"../interfaces/IERC20Bridge.sol\";\nimport \"../interfaces/IShell.sol\";\n\n\ncontract ShellBridge is\n    IERC20Bridge,\n    IWallet,\n    DeploymentConstants\n{\n\n    /// @dev Swaps specified tokens against the Shell contract\n    /// @param toTokenAddress The token to give to `to`.\n    /// @param from The maker (this contract).\n    /// @param to The recipient of the bought tokens.\n    /// @param amount Minimum amount of `toTokenAddress` tokens to buy.\n    /// @param bridgeData The abi-encoded \"from\" token address.\n    /// @return success The magic bytes if successful.\n    // solhint-disable no-unused-vars\n    function bridgeTransferFrom(\n        address toTokenAddress,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata bridgeData\n    )\n        external\n        returns (bytes4 success)\n    {\n        // Decode the bridge data to get the `fromTokenAddress` and `pool`.\n        (address fromTokenAddress, address pool) = abi.decode(bridgeData, (address, address));\n\n        uint256 fromTokenBalance = IERC20Token(fromTokenAddress).balanceOf(address(this));\n        // Grant an allowance to the exchange to spend `fromTokenAddress` token.\n        LibERC20Token.approveIfBelow(fromTokenAddress, pool, fromTokenBalance);\n\n        // Try to sell all of this contract's `fromTokenAddress` token balance.\n        uint256 boughtAmount = IShell(pool).originSwap(\n            fromTokenAddress,\n            toTokenAddress,\n            fromTokenBalance,\n            amount, // min amount\n            block.timestamp + 1\n        );\n        LibERC20Token.transfer(toTokenAddress, to, boughtAmount);\n\n        emit ERC20BridgeTransfer(\n            fromTokenAddress,\n            toTokenAddress,\n            fromTokenBalance,\n            boughtAmount,\n            from,\n            to\n        );\n        return BRIDGE_SUCCESS;\n    }\n\n    /// @dev `SignatureType.Wallet` callback, so that this bridge can be the maker\n    ///      and sign for itself in orders. Always succeeds.\n    /// @return magicValue Magic success bytes, always.\n    function isValidSignature(\n        bytes32,\n        bytes calldata\n    )\n        external\n        view\n        returns (bytes4 magicValue)\n    {\n        return LEGACY_WALLET_MAGIC_VALUE;\n    }\n}\n"
    },
    "contracts/asset-proxy/contracts/src/interfaces/IShell.sol": {
      "content": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ninterface IShell {\n\n    function originSwap(\n        address from,\n        address to,\n        uint256 fromAmount,\n        uint256 minTargetAmount,\n        uint256 deadline\n    )\n        external\n        returns (uint256 toAmount);\n}\n\n"
    },
    "contracts/asset-proxy/contracts/src/bridges/MStableBridge.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol\";\nimport \"@0x/contracts-erc20/contracts/src/LibERC20Token.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/IWallet.sol\";\nimport \"@0x/contracts-utils/contracts/src/DeploymentConstants.sol\";\nimport \"../interfaces/IERC20Bridge.sol\";\nimport \"../interfaces/IMStable.sol\";\n\n\ncontract MStableBridge is\n    IERC20Bridge,\n    IWallet,\n    DeploymentConstants\n{\n\n    /// @dev Swaps specified tokens against the mStable mUSD contract\n    /// @param toTokenAddress The token to give to `to` (i.e DAI, USDC, USDT).\n    /// @param from The maker (this contract).\n    /// @param to The recipient of the bought tokens.\n    /// @param amount Minimum amount of `toTokenAddress` tokens to buy.\n    /// @param bridgeData The abi-encoded \"from\" token address.\n    /// @return success The magic bytes if successful.\n    // solhint-disable no-unused-vars\n    function bridgeTransferFrom(\n        address toTokenAddress,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata bridgeData\n    )\n        external\n        returns (bytes4 success)\n    {\n        // Decode the bridge data to get the `fromTokenAddress`.\n        (address fromTokenAddress) = abi.decode(bridgeData, (address));\n\n        IMStable exchange = IMStable(_getMUsdAddress());\n        uint256 fromTokenBalance = IERC20Token(fromTokenAddress).balanceOf(address(this));\n        // Grant an allowance to the exchange to spend `fromTokenAddress` token.\n        LibERC20Token.approveIfBelow(fromTokenAddress, address(exchange), fromTokenBalance);\n\n        // Try to sell all of this contract's `fromTokenAddress` token balance.\n        uint256 boughtAmount = exchange.swap(\n            fromTokenAddress,\n            toTokenAddress,\n            fromTokenBalance,\n            to\n        );\n\n        emit ERC20BridgeTransfer(\n            fromTokenAddress,\n            toTokenAddress,\n            fromTokenBalance,\n            boughtAmount,\n            from,\n            to\n        );\n        return BRIDGE_SUCCESS;\n    }\n\n    /// @dev `SignatureType.Wallet` callback, so that this bridge can be the maker\n    ///      and sign for itself in orders. Always succeeds.\n    /// @return magicValue Magic success bytes, always.\n    function isValidSignature(\n        bytes32,\n        bytes calldata\n    )\n        external\n        view\n        returns (bytes4 magicValue)\n    {\n        return LEGACY_WALLET_MAGIC_VALUE;\n    }\n}\n"
    },
    "contracts/asset-proxy/contracts/src/interfaces/IMStable.sol": {
      "content": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ninterface IMStable {\n\n    function swap(\n        address _input,\n        address _output,\n        uint256 _quantity,\n        address _recipient\n    )\n        external\n        returns (uint256 output);\n}\n"
    },
    "contracts/asset-proxy/contracts/src/bridges/MooniswapBridge.sol": {
      "content": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol\";\nimport \"@0x/contracts-erc20/contracts/src/interfaces/IEtherToken.sol\";\nimport \"@0x/contracts-erc20/contracts/src/LibERC20Token.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/IWallet.sol\";\nimport \"@0x/contracts-utils/contracts/src/DeploymentConstants.sol\";\nimport \"../interfaces/IERC20Bridge.sol\";\nimport \"../interfaces/IMooniswap.sol\";\n\n\n// solhint-disable space-after-comma\n// solhint-disable not-rely-on-time\ncontract MooniswapBridge is\n    IERC20Bridge,\n    IWallet,\n    DeploymentConstants\n{\n\n    struct TransferState {\n        IMooniswap pool;\n        uint256 fromTokenBalance;\n        IEtherToken weth;\n        uint256 boughtAmount;\n        address fromTokenAddress;\n        address toTokenAddress;\n    }\n\n    // solhint-disable no-empty-blocks\n    /// @dev Payable fallback to receive ETH from uniswap.\n    function ()\n        external\n        payable\n    {}\n\n    /// @dev Callback for `IERC20Bridge`. Tries to buy `amount` of\n    ///      `toTokenAddress` tokens by selling the entirety of the `fromTokenAddress`\n    ///      token encoded in the bridge data.\n    /// @param toTokenAddress The token to buy and transfer to `to`.\n    /// @param from The maker (this contract).\n    /// @param to The recipient of the bought tokens.\n    /// @param amount Minimum amount of `toTokenAddress` tokens to buy.\n    /// @param bridgeData The abi-encoded path of token addresses. Last element must be toTokenAddress\n    /// @return success The magic bytes if successful.\n    function bridgeTransferFrom(\n        address toTokenAddress,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata bridgeData\n    )\n        external\n        returns (bytes4 success)\n    {\n        // State memory object to avoid stack overflows.\n        TransferState memory state;\n        // Decode the bridge data to get the `fromTokenAddress`.\n        address fromTokenAddress = abi.decode(bridgeData, (address));\n        // Get the weth contract.\n        state.weth = IEtherToken(_getWethAddress());\n        // Get our balance of `fromTokenAddress` token.\n        state.fromTokenBalance = IERC20Token(fromTokenAddress).balanceOf(address(this));\n\n        state.fromTokenAddress = fromTokenAddress == address(state.weth) ? address(0) : fromTokenAddress;\n        state.toTokenAddress = toTokenAddress == address(state.weth) ? address(0) : toTokenAddress;\n        state.pool = IMooniswap(\n            IMooniswapRegistry(_getMooniswapAddress()).pools(\n                state.fromTokenAddress,\n                state.toTokenAddress\n            )\n        );\n\n        // withdraw WETH to ETH\n        if (state.fromTokenAddress == address(0)) {\n            state.weth.withdraw(state.fromTokenBalance);\n        } else {\n            // Grant the pool an allowance.\n            LibERC20Token.approveIfBelow(\n                state.fromTokenAddress,\n                address(state.pool),\n                state.fromTokenBalance\n            );\n        }\n        uint256 ethValue = state.fromTokenAddress == address(0) ? state.fromTokenBalance : 0;\n        state.boughtAmount = state.pool.swap.value(ethValue)(\n            state.fromTokenAddress,\n            state.toTokenAddress,\n            state.fromTokenBalance,\n            amount,\n            address(0)\n        );\n        // Deposit to WETH\n        if (state.toTokenAddress == address(0)) {\n            state.weth.deposit.value(state.boughtAmount)();\n        }\n\n        // Transfer funds to `to`\n        LibERC20Token.transfer(toTokenAddress, to, state.boughtAmount);\n\n        emit ERC20BridgeTransfer(\n            // input token\n            fromTokenAddress,\n            // output token\n            toTokenAddress,\n            // input token amount\n            state.fromTokenBalance,\n            // output token amount\n            state.boughtAmount,\n            from,\n            to\n        );\n\n        return BRIDGE_SUCCESS;\n    }\n\n    /// @dev `SignatureType.Wallet` callback, so that this bridge can be the maker\n    ///      and sign for itself in orders. Always succeeds.\n    /// @return magicValue Success bytes, always.\n    function isValidSignature(\n        bytes32,\n        bytes calldata\n    )\n        external\n        view\n        returns (bytes4 magicValue)\n    {\n        return LEGACY_WALLET_MAGIC_VALUE;\n    }\n}\n"
    },
    "contracts/asset-proxy/contracts/src/interfaces/IMooniswap.sol": {
      "content": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ninterface IMooniswapRegistry {\n\n    function pools(address token1, address token2) external view returns(address);\n}\n\n\ninterface IMooniswap {\n\n    function swap(\n        address fromToken,\n        address destToken,\n        uint256 amount,\n        uint256 minReturn,\n        address referral\n    )\n        external\n        payable\n        returns(uint256 returnAmount);\n}\n"
    },
    "contracts/asset-proxy/contracts/src/bridges/KyberBridge.sol": {
      "content": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol\";\nimport \"@0x/contracts-erc20/contracts/src/interfaces/IEtherToken.sol\";\nimport \"@0x/contracts-erc20/contracts/src/LibERC20Token.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/IWallet.sol\";\nimport \"@0x/contracts-utils/contracts/src/DeploymentConstants.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibSafeMath.sol\";\nimport \"../interfaces/IERC20Bridge.sol\";\nimport \"../interfaces/IKyberNetworkProxy.sol\";\n\n\n// solhint-disable space-after-comma\ncontract KyberBridge is\n    IERC20Bridge,\n    IWallet,\n    DeploymentConstants\n{\n    using LibSafeMath for uint256;\n\n    // @dev Structure used internally to get around stack limits.\n    struct TradeState {\n        IKyberNetworkProxy kyber;\n        IEtherToken weth;\n        address fromTokenAddress;\n        uint256 fromTokenBalance;\n        uint256 payableAmount;\n        uint256 conversionRate;\n        bytes hint;\n    }\n\n    /// @dev Kyber ETH pseudo-address.\n    address constant public KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    /// @dev `bridgeTransferFrom()` failure result.\n    bytes4 constant private BRIDGE_FAILED = 0x0;\n    /// @dev Precision of Kyber rates.\n    uint256 constant private KYBER_RATE_BASE = 10 ** 18;\n\n    // solhint-disable no-empty-blocks\n    /// @dev Payable fallback to receive ETH from Kyber/WETH.\n    function ()\n        external\n        payable\n    {\n        // Poor man's receive in 0.5.9\n        require(msg.data.length == 0);\n    }\n\n    /// @dev Callback for `IKyberBridge`. Tries to buy `amount` of\n    ///      `toTokenAddress` tokens by selling the entirety of the opposing asset\n    ///      to the `KyberNetworkProxy` contract, then transfers the bought\n    ///      tokens to `to`.\n    /// @param toTokenAddress The token to give to `to`.\n    /// @param from The maker (this contract).\n    /// @param to The recipient of the bought tokens.\n    /// @param amount Minimum amount of `toTokenAddress` tokens to buy.\n    /// @param bridgeData The abi-encoeded \"from\" token address.\n    /// @return success The magic bytes if successful.\n    function bridgeTransferFrom(\n        address toTokenAddress,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata bridgeData\n    )\n        external\n        returns (bytes4 success)\n    {\n        TradeState memory state;\n        state.kyber = IKyberNetworkProxy(_getKyberNetworkProxyAddress());\n        state.weth = IEtherToken(_getWethAddress());\n        // Decode the bridge data to get the `fromTokenAddress`.\n        (state.fromTokenAddress, state.hint) = abi.decode(bridgeData, (address, bytes));\n        // Query the balance of \"from\" tokens.\n        state.fromTokenBalance = IERC20Token(state.fromTokenAddress).balanceOf(address(this));\n        if (state.fromTokenBalance == 0) {\n            // Return failure if no input tokens.\n            return BRIDGE_FAILED;\n        }\n        if (state.fromTokenAddress == toTokenAddress) {\n            // Just transfer the tokens if they're the same.\n            LibERC20Token.transfer(state.fromTokenAddress, to, state.fromTokenBalance);\n            return BRIDGE_SUCCESS;\n        }\n        if (state.fromTokenAddress == address(state.weth)) {\n            // From WETH\n            state.fromTokenAddress = KYBER_ETH_ADDRESS;\n            state.payableAmount = state.fromTokenBalance;\n            state.weth.withdraw(state.fromTokenBalance);\n        } else {\n            LibERC20Token.approveIfBelow(\n                state.fromTokenAddress,\n                address(state.kyber),\n                state.fromTokenBalance\n            );\n        }\n        bool isToTokenWeth = toTokenAddress == address(state.weth);\n\n        // Try to sell all of this contract's input token balance through\n        // `KyberNetworkProxy.trade()`.\n        uint256 boughtAmount = state.kyber.tradeWithHint.value(state.payableAmount)(\n            // Input token.\n            state.fromTokenAddress,\n            // Sell amount.\n            state.fromTokenBalance,\n            // Output token.\n            isToTokenWeth ? KYBER_ETH_ADDRESS : toTokenAddress,\n            // Transfer to this contract if converting to ETH, otherwise\n            // transfer directly to the recipient.\n            isToTokenWeth ? address(uint160(address(this))) : address(uint160(to)),\n            // Buy as much as possible.\n            uint256(-1),\n            // The minimum conversion rate\n            1,\n            // No affiliate address.\n            address(0),\n            state.hint\n        );\n        // Wrap ETH output and transfer to recipient.\n        if (isToTokenWeth) {\n            state.weth.deposit.value(boughtAmount)();\n            state.weth.transfer(to, boughtAmount);\n        }\n\n        emit ERC20BridgeTransfer(\n            state.fromTokenAddress == KYBER_ETH_ADDRESS ? address(state.weth) : state.fromTokenAddress,\n            toTokenAddress,\n            state.fromTokenBalance,\n            boughtAmount,\n            from,\n            to\n        );\n        return BRIDGE_SUCCESS;\n    }\n\n    /// @dev `SignatureType.Wallet` callback, so that this bridge can be the maker\n    ///      and sign for itself in orders. Always succeeds.\n    /// @return magicValue Magic success bytes, always.\n    function isValidSignature(\n        bytes32,\n        bytes calldata\n    )\n        external\n        view\n        returns (bytes4 magicValue)\n    {\n        return LEGACY_WALLET_MAGIC_VALUE;\n    }\n\n}\n"
    },
    "contracts/asset-proxy/contracts/src/interfaces/IKyberNetworkProxy.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ninterface IKyberNetworkProxy {\n\n    /// @dev Sells `sellTokenAddress` tokens for `buyTokenAddress` tokens.\n    /// @param sellTokenAddress Token to sell.\n    /// @param sellAmount Amount of tokens to sell.\n    /// @param buyTokenAddress Token to buy.\n    /// @param recipientAddress Address to send bought tokens to.\n    /// @param maxBuyTokenAmount A limit on the amount of tokens to buy.\n    /// @param minConversionRate The minimal conversion rate. If actual rate\n    ///        is lower, trade is canceled.\n    /// @param walletId The wallet ID to send part of the fees\n    /// @return boughtAmount Amount of tokens bought.\n    function trade(\n        address sellTokenAddress,\n        uint256 sellAmount,\n        address buyTokenAddress,\n        address payable recipientAddress,\n        uint256 maxBuyTokenAmount,\n        uint256 minConversionRate,\n        address walletId\n    )\n        external\n        payable\n        returns (uint256 boughtAmount);\n\n    /// @dev Sells `sellTokenAddress` tokens for `buyTokenAddress` tokens\n    /// using a hint for the reserve.\n    /// @param sellTokenAddress Token to sell.\n    /// @param sellAmount Amount of tokens to sell.\n    /// @param buyTokenAddress Token to buy.\n    /// @param recipientAddress Address to send bought tokens to.\n    /// @param maxBuyTokenAmount A limit on the amount of tokens to buy.\n    /// @param minConversionRate The minimal conversion rate. If actual rate\n    ///        is lower, trade is canceled.\n    /// @param walletId The wallet ID to send part of the fees\n    /// @param hint The hint for the selective inclusion (or exclusion) of reserves\n    /// @return boughtAmount Amount of tokens bought.\n    function tradeWithHint(\n        address sellTokenAddress,\n        uint256 sellAmount,\n        address buyTokenAddress,\n        address payable recipientAddress,\n        uint256 maxBuyTokenAmount,\n        uint256 minConversionRate,\n        address payable walletId,\n        bytes calldata hint\n    )\n        external\n        payable\n        returns (uint256 boughtAmount);\n}\n"
    },
    "contracts/asset-proxy/contracts/test/TestKyberBridge.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol\";\nimport \"../src/bridges/KyberBridge.sol\";\nimport \"../src/interfaces/IKyberNetworkProxy.sol\";\n\n\n// solhint-disable no-simple-event-func-name\ninterface ITestContract {\n\n    function wethWithdraw(\n        address payable ownerAddress,\n        uint256 amount\n    )\n        external;\n\n    function wethDeposit(\n        address ownerAddress\n    )\n        external\n        payable;\n\n    function tokenTransfer(\n        address ownerAddress,\n        address recipientAddress,\n        uint256 amount\n    )\n        external\n        returns (bool success);\n\n    function tokenApprove(\n        address ownerAddress,\n        address spenderAddress,\n        uint256 allowance\n    )\n        external\n        returns (bool success);\n\n    function tokenBalanceOf(\n        address ownerAddress\n    )\n        external\n        view\n        returns (uint256 balance);\n}\n\n\n/// @dev A minimalist ERC20/WETH token.\ncontract TestToken {\n\n    uint8 public decimals;\n    ITestContract private _testContract;\n\n    constructor(uint8 decimals_) public {\n        decimals = decimals_;\n        _testContract = ITestContract(msg.sender);\n    }\n\n    function approve(address spender, uint256 allowance)\n        external\n        returns (bool)\n    {\n        return _testContract.tokenApprove(\n            msg.sender,\n            spender,\n            allowance\n        );\n    }\n\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool)\n    {\n        return _testContract.tokenTransfer(\n            msg.sender,\n            recipient,\n            amount\n        );\n    }\n\n    function withdraw(uint256 amount)\n        external\n    {\n        return _testContract.wethWithdraw(msg.sender, amount);\n    }\n\n    function deposit()\n        external\n        payable\n    {\n        return _testContract.wethDeposit.value(msg.value)(msg.sender);\n    }\n\n    function allowance(address, address) external view returns (uint256) {\n        return 0;\n    }\n\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256)\n    {\n        return _testContract.tokenBalanceOf(owner);\n    }\n}\n\n\n/// @dev KyberBridge overridden to mock tokens and implement IKyberBridge.\ncontract TestKyberBridge is\n    KyberBridge,\n    ITestContract,\n    IKyberNetworkProxy\n{\n    event KyberBridgeTrade(\n        uint256 msgValue,\n        address sellTokenAddress,\n        uint256 sellAmount,\n        address buyTokenAddress,\n        address payable recipientAddress,\n        uint256 maxBuyTokenAmount,\n        uint256 minConversionRate,\n        address walletId\n    );\n\n    event KyberBridgeWethWithdraw(\n        address ownerAddress,\n        uint256 amount\n    );\n\n    event KyberBridgeWethDeposit(\n        uint256 msgValue,\n        address ownerAddress,\n        uint256 amount\n    );\n\n    event KyberBridgeTokenApprove(\n        address tokenAddress,\n        address ownerAddress,\n        address spenderAddress,\n        uint256 allowance\n    );\n\n    event KyberBridgeTokenTransfer(\n        address tokenAddress,\n        address ownerAddress,\n        address recipientAddress,\n        uint256 amount\n    );\n\n    IEtherToken public weth;\n    mapping (address => mapping (address => uint256)) private _tokenBalances;\n    uint256 private _nextFillAmount;\n\n    constructor() public {\n        weth = IEtherToken(address(new TestToken(18)));\n    }\n\n    /// @dev Implementation of `IKyberNetworkProxy.trade()`\n    function trade(\n        address sellTokenAddress,\n        uint256 sellAmount,\n        address buyTokenAddress,\n        address payable recipientAddress,\n        uint256 maxBuyTokenAmount,\n        uint256 minConversionRate,\n        address walletId\n    )\n        external\n        payable\n        returns(uint256 boughtAmount)\n    {\n        emit KyberBridgeTrade(\n            msg.value,\n            sellTokenAddress,\n            sellAmount,\n            buyTokenAddress,\n            recipientAddress,\n            maxBuyTokenAmount,\n            minConversionRate,\n            walletId\n        );\n        return _nextFillAmount;\n    }\n\n    function tradeWithHint(\n        address sellTokenAddress,\n        uint256 sellAmount,\n        address buyTokenAddress,\n        address payable recipientAddress,\n        uint256 maxBuyTokenAmount,\n        uint256 minConversionRate,\n        address payable walletId,\n        bytes calldata hint\n    )\n        external\n        payable\n        returns (uint256 boughtAmount)\n    {\n        emit KyberBridgeTrade(\n            msg.value,\n            sellTokenAddress,\n            sellAmount,\n            buyTokenAddress,\n            recipientAddress,\n            maxBuyTokenAmount,\n            minConversionRate,\n            walletId\n        );\n        return _nextFillAmount;\n    }\n\n    function createToken(uint8 decimals)\n        external\n        returns (address tokenAddress)\n    {\n        return address(new TestToken(decimals));\n    }\n\n    function setNextFillAmount(uint256 amount)\n        external\n        payable\n    {\n        if (msg.value != 0) {\n            require(amount == msg.value, \"VALUE_AMOUNT_MISMATCH\");\n            grantTokensTo(address(weth), address(this), msg.value);\n        }\n        _nextFillAmount = amount;\n    }\n\n    function wethDeposit(\n        address ownerAddress\n    )\n        external\n        payable\n    {\n        require(msg.sender == address(weth), \"ONLY_WETH\");\n        grantTokensTo(address(weth), ownerAddress, msg.value);\n        emit KyberBridgeWethDeposit(\n            msg.value,\n            ownerAddress,\n            msg.value\n        );\n    }\n\n    function wethWithdraw(\n        address payable ownerAddress,\n        uint256 amount\n    )\n        external\n    {\n        require(msg.sender == address(weth), \"ONLY_WETH\");\n        _tokenBalances[address(weth)][ownerAddress] -= amount;\n        ownerAddress.transfer(amount);\n        emit KyberBridgeWethWithdraw(\n            ownerAddress,\n            amount\n        );\n    }\n\n    function tokenApprove(\n        address ownerAddress,\n        address spenderAddress,\n        uint256 allowance\n    )\n        external\n        returns (bool success)\n    {\n        emit KyberBridgeTokenApprove(\n            msg.sender,\n            ownerAddress,\n            spenderAddress,\n            allowance\n        );\n        return true;\n    }\n\n    function tokenTransfer(\n        address ownerAddress,\n        address recipientAddress,\n        uint256 amount\n    )\n        external\n        returns (bool success)\n    {\n        _tokenBalances[msg.sender][ownerAddress] -= amount;\n        _tokenBalances[msg.sender][recipientAddress] += amount;\n        emit KyberBridgeTokenTransfer(\n            msg.sender,\n            ownerAddress,\n            recipientAddress,\n            amount\n        );\n        return true;\n    }\n\n    function tokenBalanceOf(\n        address ownerAddress\n    )\n        external\n        view\n        returns (uint256 balance)\n    {\n        return _tokenBalances[msg.sender][ownerAddress];\n    }\n\n    function grantTokensTo(address tokenAddress, address ownerAddress, uint256 amount)\n        public\n        payable\n    {\n        _tokenBalances[tokenAddress][ownerAddress] += amount;\n        if (tokenAddress != address(weth)) {\n            // Send back ether if not WETH.\n            msg.sender.transfer(msg.value);\n        } else {\n            require(msg.value == amount, \"VALUE_AMOUNT_MISMATCH\");\n        }\n    }\n\n    // @dev overridden to point to this contract.\n    function _getKyberNetworkProxyAddress()\n        internal\n        view\n        returns (address)\n    {\n        return address(this);\n    }\n\n    // @dev overridden to point to test WETH.\n    function _getWethAddress()\n        internal\n        view\n        returns (address)\n    {\n        return address(weth);\n    }\n}\n"
    },
    "contracts/asset-proxy/contracts/src/bridges/Eth2DaiBridge.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol\";\nimport \"@0x/contracts-erc20/contracts/src/LibERC20Token.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/IWallet.sol\";\nimport \"@0x/contracts-utils/contracts/src/DeploymentConstants.sol\";\nimport \"../interfaces/IERC20Bridge.sol\";\nimport \"../interfaces/IEth2Dai.sol\";\n\n\n// solhint-disable space-after-comma\ncontract Eth2DaiBridge is\n    IERC20Bridge,\n    IWallet,\n    DeploymentConstants\n{\n    /// @dev Callback for `IERC20Bridge`. Tries to buy `amount` of\n    ///      `toTokenAddress` tokens by selling the entirety of the opposing asset\n    ///      (DAI or WETH) to the Eth2Dai contract, then transfers the bought\n    ///      tokens to `to`.\n    /// @param toTokenAddress The token to give to `to` (either DAI or WETH).\n    /// @param from The maker (this contract).\n    /// @param to The recipient of the bought tokens.\n    /// @param amount Minimum amount of `toTokenAddress` tokens to buy.\n    /// @param bridgeData The abi-encoeded \"from\" token address.\n    /// @return success The magic bytes if successful.\n    function bridgeTransferFrom(\n        address toTokenAddress,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata bridgeData\n    )\n        external\n        returns (bytes4 success)\n    {\n        // Decode the bridge data to get the `fromTokenAddress`.\n        (address fromTokenAddress) = abi.decode(bridgeData, (address));\n\n        IEth2Dai exchange = IEth2Dai(_getEth2DaiAddress());\n        uint256 fromTokenBalance = IERC20Token(fromTokenAddress).balanceOf(address(this));\n        // Grant an allowance to the exchange to spend `fromTokenAddress` token.\n        LibERC20Token.approveIfBelow(fromTokenAddress, address(exchange), fromTokenBalance);\n\n        // Try to sell all of this contract's `fromTokenAddress` token balance.\n        uint256 boughtAmount = exchange.sellAllAmount(\n            fromTokenAddress,\n            fromTokenBalance,\n            toTokenAddress,\n            amount\n        );\n        // Transfer the converted `toToken`s to `to`.\n        LibERC20Token.transfer(toTokenAddress, to, boughtAmount);\n\n        emit ERC20BridgeTransfer(\n            fromTokenAddress,\n            toTokenAddress,\n            fromTokenBalance,\n            boughtAmount,\n            from,\n            to\n        );\n        return BRIDGE_SUCCESS;\n    }\n\n    /// @dev `SignatureType.Wallet` callback, so that this bridge can be the maker\n    ///      and sign for itself in orders. Always succeeds.\n    /// @return magicValue Magic success bytes, always.\n    function isValidSignature(\n        bytes32,\n        bytes calldata\n    )\n        external\n        view\n        returns (bytes4 magicValue)\n    {\n        return LEGACY_WALLET_MAGIC_VALUE;\n    }\n}\n"
    },
    "contracts/asset-proxy/contracts/src/interfaces/IEth2Dai.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ninterface IEth2Dai {\n\n    /// @dev Sell `sellAmount` of `fromToken` token and receive `toToken` token.\n    /// @param fromToken The token being sold.\n    /// @param sellAmount The amount of `fromToken` token being sold.\n    /// @param toToken The token being bought.\n    /// @param minFillAmount Minimum amount of `toToken` token to buy.\n    /// @return fillAmount Amount of `toToken` bought.\n    function sellAllAmount(\n        address fromToken,\n        uint256 sellAmount,\n        address toToken,\n        uint256 minFillAmount\n    )\n        external\n        returns (uint256 fillAmount);\n}\n"
    },
    "contracts/asset-proxy/contracts/test/TestEth2DaiBridge.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol\";\nimport \"../src/bridges/Eth2DaiBridge.sol\";\nimport \"../src/interfaces/IEth2Dai.sol\";\n\n\n// solhint-disable no-simple-event-func-name\ncontract TestEvents {\n\n    event TokenTransfer(\n        address token,\n        address from,\n        address to,\n        uint256 amount\n    );\n\n    event TokenApprove(\n        address token,\n        address spender,\n        uint256 allowance\n    );\n\n    function raiseTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    )\n        external\n    {\n        emit TokenTransfer(\n            msg.sender,\n            from,\n            to,\n            amount\n        );\n    }\n\n    function raiseTokenApprove(address spender, uint256 allowance)\n        external\n    {\n        emit TokenApprove(msg.sender, spender, allowance);\n    }\n}\n\n\n/// @dev A minimalist ERC20 token.\ncontract TestToken {\n\n    mapping (address => uint256) public balances;\n    string private _nextTransferRevertReason;\n    bytes private _nextTransferReturnData;\n\n    /// @dev Just calls `raiseTokenTransfer()` on the caller.\n    function transfer(address to, uint256 amount)\n        external\n        returns (bool)\n    {\n        TestEvents(msg.sender).raiseTokenTransfer(msg.sender, to, amount);\n        if (bytes(_nextTransferRevertReason).length != 0) {\n            revert(_nextTransferRevertReason);\n        }\n        bytes memory returnData = _nextTransferReturnData;\n        assembly { return(add(returnData, 0x20), mload(returnData)) }\n    }\n\n    /// @dev Set the balance for `owner`.\n    function setBalance(address owner, uint256 balance)\n        external\n    {\n        balances[owner] = balance;\n    }\n\n    /// @dev Set the behavior of the `transfer()` call.\n    function setTransferBehavior(\n        string calldata revertReason,\n        bytes calldata returnData\n    )\n        external\n    {\n        _nextTransferRevertReason = revertReason;\n        _nextTransferReturnData = returnData;\n    }\n\n    /// @dev Just calls `raiseTokenApprove()` on the caller.\n    function approve(address spender, uint256 allowance)\n        external\n        returns (bool)\n    {\n        TestEvents(msg.sender).raiseTokenApprove(spender, allowance);\n        return true;\n    }\n\n    function allowance(address, address) external view returns (uint256) {\n        return 0;\n    }\n\n    /// @dev Retrieve the balance for `owner`.\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256)\n    {\n        return balances[owner];\n    }\n}\n\n\n/// @dev Eth2DaiBridge overridden to mock tokens and\n///      implement IEth2Dai.\ncontract TestEth2DaiBridge is\n    TestEvents,\n    IEth2Dai,\n    Eth2DaiBridge\n{\n    event SellAllAmount(\n        address sellToken,\n        uint256 sellTokenAmount,\n        address buyToken,\n        uint256 minimumFillAmount\n    );\n\n    mapping (address => TestToken)  public testTokens;\n    string private _nextRevertReason;\n    uint256 private _nextFillAmount;\n\n    /// @dev Create a token and set this contract's balance.\n    function createToken(uint256 balance)\n        external\n        returns (address tokenAddress)\n    {\n        TestToken token = new TestToken();\n        testTokens[address(token)] = token;\n        token.setBalance(address(this), balance);\n        return address(token);\n    }\n\n    /// @dev Set the behavior for `IEth2Dai.sellAllAmount()`.\n    function setFillBehavior(string calldata revertReason, uint256 fillAmount)\n        external\n    {\n        _nextRevertReason = revertReason;\n        _nextFillAmount = fillAmount;\n    }\n\n    /// @dev Set the behavior of a token's `transfer()`.\n    function setTransferBehavior(\n        address tokenAddress,\n        string calldata revertReason,\n        bytes calldata returnData\n    )\n        external\n    {\n        testTokens[tokenAddress].setTransferBehavior(revertReason, returnData);\n    }\n\n    /// @dev Implementation of `IEth2Dai.sellAllAmount()`\n    function sellAllAmount(\n        address sellTokenAddress,\n        uint256 sellTokenAmount,\n        address buyTokenAddress,\n        uint256 minimumFillAmount\n    )\n        external\n        returns (uint256 fillAmount)\n    {\n        emit SellAllAmount(\n            sellTokenAddress,\n            sellTokenAmount,\n            buyTokenAddress,\n            minimumFillAmount\n        );\n        if (bytes(_nextRevertReason).length != 0) {\n            revert(_nextRevertReason);\n        }\n        return _nextFillAmount;\n    }\n\n    // @dev This contract will double as the Eth2Dai contract.\n    function _getEth2DaiAddress()\n        internal\n        view\n        returns (address)\n    {\n        return address(this);\n    }\n}\n"
    },
    "contracts/asset-proxy/contracts/src/bridges/DODOBridge.sol": {
      "content": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol\";\nimport \"@0x/contracts-erc20/contracts/src/LibERC20Token.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/IWallet.sol\";\nimport \"@0x/contracts-utils/contracts/src/DeploymentConstants.sol\";\nimport \"../interfaces/IERC20Bridge.sol\";\n\n\ninterface IDODOHelper {\n\n    function querySellQuoteToken(address dodo, uint256 amount) external view returns (uint256);\n}\n\n\ninterface IDODO {\n\n    function sellBaseToken(uint256 amount, uint256 minReceiveQuote, bytes calldata data) external returns (uint256);\n\n    function buyBaseToken(uint256 amount, uint256 maxPayQuote, bytes calldata data) external returns (uint256);\n\n}\n\n\ncontract DODOBridge is\n    IERC20Bridge,\n    IWallet,\n    DeploymentConstants\n{\n\n    struct TransferState {\n        address fromTokenAddress;\n        uint256 fromTokenBalance;\n        address pool;\n        bool isSellBase;\n    }\n\n    /// @dev Callback for `IERC20Bridge`. Tries to buy `amount` of\n    ///      `toTokenAddress` tokens by selling the entirety of the `fromTokenAddress`\n    ///      token encoded in the bridge data.\n    /// @param toTokenAddress The token to buy and transfer to `to`.\n    /// @param from The maker (this contract).\n    /// @param to The recipient of the bought tokens.\n    /// @param amount Minimum amount of `toTokenAddress` tokens to buy.\n    /// @param bridgeData The abi-encoded path of token addresses. Last element must be toTokenAddress\n    /// @return success The magic bytes if successful.\n    function bridgeTransferFrom(\n        address toTokenAddress,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata bridgeData\n    )\n        external\n        returns (bytes4 success)\n    {\n        TransferState memory state;\n        // Decode the bridge data to get the `fromTokenAddress`.\n        (state.fromTokenAddress, state.pool, state.isSellBase) = abi.decode(bridgeData, (address, address, bool));\n        require(state.pool != address(0), \"DODOBridge/InvalidPool\");\n        IDODO exchange = IDODO(state.pool);\n        // Get our balance of `fromTokenAddress` token.\n        state.fromTokenBalance = IERC20Token(state.fromTokenAddress).balanceOf(address(this));\n\n        // Grant the pool an allowance.\n        LibERC20Token.approveIfBelow(\n            state.fromTokenAddress,\n            address(exchange),\n            state.fromTokenBalance\n        );\n\n        uint256 boughtAmount;\n        if (state.isSellBase) {\n            boughtAmount = exchange.sellBaseToken(\n                // amount to sell\n                state.fromTokenBalance,\n                // min receive amount\n                1,\n                new bytes(0)\n            );\n        } else {\n            // Need to re-calculate the sell quote amount into buyBase\n            boughtAmount = IDODOHelper(_getDODOHelperAddress()).querySellQuoteToken(\n                address(exchange),\n                state.fromTokenBalance\n            );\n            exchange.buyBaseToken(\n                // amount to buy\n                boughtAmount,\n                // max pay amount\n                state.fromTokenBalance,\n                new bytes(0)\n            );\n        }\n        // Transfer funds to `to`\n        IERC20Token(toTokenAddress).transfer(to, boughtAmount);\n\n\n        emit ERC20BridgeTransfer(\n            // input token\n            state.fromTokenAddress,\n            // output token\n            toTokenAddress,\n            // input token amount\n            state.fromTokenBalance,\n            // output token amount\n            boughtAmount,\n            from,\n            to\n        );\n\n        return BRIDGE_SUCCESS;\n    }\n\n    /// @dev `SignatureType.Wallet` callback, so that this bridge can be the maker\n    ///      and sign for itself in orders. Always succeeds.\n    /// @return magicValue Success bytes, always.\n    function isValidSignature(\n        bytes32,\n        bytes calldata\n    )\n        external\n        view\n        returns (bytes4 magicValue)\n    {\n        return LEGACY_WALLET_MAGIC_VALUE;\n    }\n}\n"
    },
    "contracts/asset-proxy/contracts/src/bridges/DexForwarderBridge.sol": {
      "content": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol\";\nimport \"@0x/contracts-erc20/contracts/src/LibERC20Token.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/IWallet.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibMath.sol\";\nimport \"@0x/contracts-utils/contracts/src/DeploymentConstants.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibSafeMath.sol\";\nimport \"../interfaces/IERC20Bridge.sol\";\nimport \"./MixinGasToken.sol\";\n\n\n// solhint-disable space-after-comma, indent\ncontract DexForwarderBridge is\n    IERC20Bridge,\n    IWallet,\n    DeploymentConstants,\n    MixinGasToken\n{\n    using LibSafeMath for uint256;\n\n    /// @dev Data needed to reconstruct a bridge call.\n    struct BridgeCall {\n        address target;\n        uint256 inputTokenAmount;\n        uint256 outputTokenAmount;\n        bytes bridgeData;\n    }\n\n    /// @dev Intermediate state variables used by `bridgeTransferFrom()`, in\n    ///      struct form to get around stack limits.\n    struct TransferFromState {\n        address inputToken;\n        uint256 initialInputTokenBalance;\n        uint256 callInputTokenAmount;\n        uint256 callOutputTokenAmount;\n        uint256 totalInputTokenSold;\n        BridgeCall[] calls;\n    }\n\n    /// @dev Spends this contract's entire balance of input tokens by forwarding\n    /// them to other bridges. Reverts if the entire balance is not spent.\n    /// @param outputToken The token being bought.\n    /// @param to The recipient of the bought tokens.\n    /// @param bridgeData The abi-encoded input token address.\n    /// @return success The magic bytes if successful.\n    function bridgeTransferFrom(\n        address outputToken,\n        address /* from */,\n        address to,\n        uint256 /* amount */,\n        bytes calldata bridgeData\n    )\n        external\n        freesGasTokensFromCollector\n        returns (bytes4 success)\n    {\n        require(\n            msg.sender == _getERC20BridgeProxyAddress(),\n            \"DexForwarderBridge/SENDER_NOT_AUTHORIZED\"\n        );\n        TransferFromState memory state;\n        (\n            state.inputToken,\n            state.calls\n        ) = abi.decode(bridgeData, (address, BridgeCall[]));\n\n        state.initialInputTokenBalance =\n            IERC20Token(state.inputToken).balanceOf(address(this));\n\n        for (uint256 i = 0; i < state.calls.length; ++i) {\n            // Stop if the we've sold all our input tokens.\n            if (state.totalInputTokenSold >= state.initialInputTokenBalance) {\n                break;\n            }\n\n            // Compute token amounts.\n            state.callInputTokenAmount = LibSafeMath.min256(\n                state.calls[i].inputTokenAmount,\n                state.initialInputTokenBalance.safeSub(state.totalInputTokenSold)\n            );\n            state.callOutputTokenAmount = LibMath.getPartialAmountFloor(\n                state.callInputTokenAmount,\n                state.calls[i].inputTokenAmount,\n                state.calls[i].outputTokenAmount\n            );\n\n            // Execute the call in a new context so we can recoup transferred\n            // funds by reverting.\n            (bool didSucceed, ) = address(this)\n                .call(abi.encodeWithSelector(\n                    this.executeBridgeCall.selector,\n                    state.calls[i].target,\n                    to,\n                    state.inputToken,\n                    outputToken,\n                    state.callInputTokenAmount,\n                    state.callOutputTokenAmount,\n                    state.calls[i].bridgeData\n                ));\n\n            if (didSucceed) {\n                // Increase the amount of tokens sold.\n                state.totalInputTokenSold = state.totalInputTokenSold.safeAdd(\n                    state.callInputTokenAmount\n                );\n            }\n        }\n        // Always succeed.\n        return BRIDGE_SUCCESS;\n    }\n\n    /// @dev Transfers `inputToken` token to a bridge contract then calls\n    ///      its `bridgeTransferFrom()`. This is executed in separate context\n    ///      so we can revert the transfer on error. This can only be called\n    //       by this contract itself.\n    /// @param bridge The bridge contract.\n    /// @param to The recipient of `outputToken` tokens.\n    /// @param inputToken The input token.\n    /// @param outputToken The output token.\n    /// @param inputTokenAmount The amount of input tokens to transfer to `bridge`.\n    /// @param outputTokenAmount The amount of expected output tokens to be sent\n    ///        to `to` by `bridge`.\n    function executeBridgeCall(\n        address bridge,\n        address to,\n        address inputToken,\n        address outputToken,\n        uint256 inputTokenAmount,\n        uint256 outputTokenAmount,\n        bytes calldata bridgeData\n    )\n        external\n    {\n        // Must be called through `bridgeTransferFrom()`.\n        require(msg.sender == address(this), \"DexForwarderBridge/ONLY_SELF\");\n        // `bridge` must not be this contract.\n        require(bridge != address(this));\n\n        // Get the starting balance of output tokens for `to`.\n        uint256 initialRecipientBalance = IERC20Token(outputToken).balanceOf(to);\n\n        // Transfer input tokens to the bridge.\n        LibERC20Token.transfer(inputToken, bridge, inputTokenAmount);\n\n        // Call the bridge.\n        (bool didSucceed, bytes memory resultData) =\n            bridge.call(abi.encodeWithSelector(\n                IERC20Bridge(0).bridgeTransferFrom.selector,\n                outputToken,\n                bridge,\n                to,\n                outputTokenAmount,\n                bridgeData\n            ));\n\n        // Revert if the call failed or not enough tokens were bought.\n        // This will also undo the token transfer.\n        require(\n            didSucceed\n            && resultData.length == 32\n            && LibBytes.readBytes32(resultData, 0) == bytes32(BRIDGE_SUCCESS)\n            && IERC20Token(outputToken).balanceOf(to).safeSub(initialRecipientBalance) >= outputTokenAmount\n        );\n    }\n\n    /// @dev `SignatureType.Wallet` callback, so that this bridge can be the maker\n    ///      and sign for itself in orders. Always succeeds.\n    /// @return magicValue Magic success bytes, always.\n    function isValidSignature(\n        bytes32,\n        bytes calldata\n    )\n        external\n        view\n        returns (bytes4 magicValue)\n    {\n        return LEGACY_WALLET_MAGIC_VALUE;\n    }\n}\n"
    },
    "contracts/asset-proxy/contracts/src/bridges/MixinGasToken.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.16;\n\nimport \"@0x/contracts-utils/contracts/src/DeploymentConstants.sol\";\nimport \"../interfaces/IGasToken.sol\";\n\n\ncontract MixinGasToken is\n    DeploymentConstants\n{\n\n    /// @dev Frees gas tokens based on the amount of gas consumed in the function\n    modifier freesGasTokens {\n        uint256 gasBefore = gasleft();\n        _;\n        IGasToken gst = IGasToken(_getGstAddress());\n        if (address(gst) != address(0)) {\n            // (gasUsed + FREE_BASE) / (2 * REIMBURSE - FREE_TOKEN)\n            //            14154             24000        6870\n            uint256 value = (gasBefore - gasleft() + 14154) / 41130;\n            gst.freeUpTo(value);\n        }\n    }\n\n    /// @dev Frees gas tokens using the balance of `from`. Amount freed is based\n    ///     on the gas consumed in the function\n    modifier freesGasTokensFromCollector() {\n        uint256 gasBefore = gasleft();\n        _;\n        IGasToken gst = IGasToken(_getGstAddress());\n        if (address(gst) != address(0)) {\n            // (gasUsed + FREE_BASE) / (2 * REIMBURSE - FREE_TOKEN)\n            //            14154             24000        6870\n            uint256 value = (gasBefore - gasleft() + 14154) / 41130;\n            gst.freeFromUpTo(_getGstCollectorAddress(), value);\n        }\n    }\n}\n"
    },
    "contracts/asset-proxy/contracts/src/interfaces/IGasToken.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.15;\n\nimport \"@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol\";\n\n\ncontract IGasToken is IERC20Token {\n\n    /// @dev Frees up to `value` sub-tokens\n    /// @param value The amount of tokens to free\n    /// @return How many tokens were freed\n    function freeUpTo(uint256 value) external returns (uint256 freed);\n\n    /// @dev Frees up to `value` sub-tokens owned by `from`\n    /// @param from The owner of tokens to spend\n    /// @param value The amount of tokens to free\n    /// @return How many tokens were freed\n    function freeFromUpTo(address from, uint256 value) external returns (uint256 freed);\n\n    /// @dev Mints `value` amount of tokens\n    /// @param value The amount of tokens to mint\n    function mint(uint256 value) external;\n}\n"
    },
    "contracts/asset-proxy/contracts/test/TestDexForwarderBridge.sol": {
      "content": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"../src/bridges/DexForwarderBridge.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibSafeMath.sol\";\n\n\ninterface ITestDexForwarderBridge {\n    event BridgeTransferFromCalled(\n        address caller,\n        uint256 inputTokenBalance,\n        address inputToken,\n        address outputToken,\n        address from,\n        address to,\n        uint256 amount\n    );\n\n    event TokenTransferCalled(\n        address from,\n        address to,\n        uint256 amount\n    );\n\n    function emitBridgeTransferFromCalled(\n        address caller,\n        uint256 inputTokenBalance,\n        address inputToken,\n        address outputToken,\n        address from,\n        address to,\n        uint256 amount\n    ) external;\n\n    function emitTokenTransferCalled(\n        address from,\n        address to,\n        uint256 amount\n    ) external;\n}\n\n\ninterface ITestDexForwarderBridgeTestToken {\n\n    function transfer(address to, uint256 amount)\n        external\n        returns (bool);\n\n    function mint(address to, uint256 amount)\n        external;\n\n    function balanceOf(address owner) external view returns (uint256);\n}\n\n\ncontract TestDexForwarderBridgeTestBridge {\n\n    bytes4 private _returnCode;\n    string private _revertError;\n    uint256 private _transferAmount;\n    ITestDexForwarderBridge private _testContract;\n\n    constructor(bytes4 returnCode, string memory revertError) public {\n        _testContract = ITestDexForwarderBridge(msg.sender);\n        _returnCode = returnCode;\n        _revertError = revertError;\n    }\n\n    function setTransferAmount(uint256 amount) external {\n        _transferAmount = amount;\n    }\n\n    function bridgeTransferFrom(\n        address outputToken,\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory bridgeData\n    )\n        public\n        returns (bytes4 success)\n    {\n        if (bytes(_revertError).length != 0) {\n            revert(_revertError);\n        }\n        address inputToken = abi.decode(bridgeData, (address));\n        _testContract.emitBridgeTransferFromCalled(\n            msg.sender,\n            ITestDexForwarderBridgeTestToken(inputToken).balanceOf(address(this)),\n            inputToken,\n            outputToken,\n            from,\n            to,\n            amount\n        );\n        ITestDexForwarderBridgeTestToken(outputToken).mint(to, _transferAmount);\n        return _returnCode;\n    }\n}\n\n\ncontract TestDexForwarderBridgeTestToken {\n\n    using LibSafeMath for uint256;\n\n    mapping(address => uint256) public balanceOf;\n    ITestDexForwarderBridge private _testContract;\n\n    constructor() public {\n        _testContract = ITestDexForwarderBridge(msg.sender);\n    }\n\n    function transfer(address to, uint256 amount)\n        external\n        returns (bool)\n    {\n        balanceOf[msg.sender] = balanceOf[msg.sender].safeSub(amount);\n        balanceOf[to] = balanceOf[to].safeAdd(amount);\n        _testContract.emitTokenTransferCalled(msg.sender, to, amount);\n        return true;\n    }\n\n    function mint(address owner, uint256 amount)\n        external\n    {\n        balanceOf[owner] = balanceOf[owner].safeAdd(amount);\n    }\n\n    function setBalance(address owner, uint256 amount)\n        external\n    {\n        balanceOf[owner] = amount;\n    }\n}\n\n\ncontract TestDexForwarderBridge is\n    ITestDexForwarderBridge,\n    DexForwarderBridge\n{\n    address private AUTHORIZED_ADDRESS; // solhint-disable-line var-name-mixedcase\n\n    function setAuthorized(address authorized)\n        public\n    {\n        AUTHORIZED_ADDRESS = authorized;\n    }\n\n    function createBridge(\n        bytes4 returnCode,\n        string memory revertError\n    )\n        public\n        returns (address bridge)\n    {\n        return address(new TestDexForwarderBridgeTestBridge(returnCode, revertError));\n    }\n\n    function createToken() public returns (address token) {\n        return address(new TestDexForwarderBridgeTestToken());\n    }\n\n    function setTokenBalance(address token, address owner, uint256 amount) public {\n        TestDexForwarderBridgeTestToken(token).setBalance(owner, amount);\n    }\n\n    function setBridgeTransferAmount(address bridge, uint256 amount) public {\n        TestDexForwarderBridgeTestBridge(bridge).setTransferAmount(amount);\n    }\n\n    function emitBridgeTransferFromCalled(\n        address caller,\n        uint256 inputTokenBalance,\n        address inputToken,\n        address outputToken,\n        address from,\n        address to,\n        uint256 amount\n    )\n        public\n    {\n        emit BridgeTransferFromCalled(\n            caller,\n            inputTokenBalance,\n            inputToken,\n            outputToken,\n            from,\n            to,\n            amount\n        );\n    }\n\n    function emitTokenTransferCalled(\n        address from,\n        address to,\n        uint256 amount\n    )\n        public\n    {\n        emit TokenTransferCalled(\n            from,\n            to,\n            amount\n        );\n    }\n\n    function balanceOf(address token, address owner) public view returns (uint256) {\n        return TestDexForwarderBridgeTestToken(token).balanceOf(owner);\n    }\n\n    function _getGstAddress()\n        internal\n        view\n        returns (address gst)\n    {\n        return address(0);\n    }\n\n    function _getERC20BridgeProxyAddress()\n        internal\n        view\n        returns (address erc20BridgeProxyAddress)\n    {\n        return AUTHORIZED_ADDRESS;\n    }\n}\n"
    },
    "contracts/asset-proxy/contracts/src/bridges/DydxBridge.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/DeploymentConstants.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibSafeMath.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibMath.sol\";\nimport \"../interfaces/IERC20Bridge.sol\";\nimport \"../interfaces/IDydxBridge.sol\";\nimport \"../interfaces/IDydx.sol\";\n\n\ncontract DydxBridge is\n    IERC20Bridge,\n    IDydxBridge,\n    DeploymentConstants\n{\n\n    using LibSafeMath for uint256;\n\n    /// @dev Callback for `IERC20Bridge`. Deposits or withdraws tokens from a dydx account.\n    ///      Notes:\n    ///         1. This bridge must be set as an operator of the input dydx account.\n    ///         2. This function may only be called in the context of the 0x Exchange.\n    ///         3. The maker or taker of the 0x order must be the dydx account owner.\n    ///         4. Deposits into dydx are made from the `from` address.\n    ///         5. Withdrawals from dydx are made to the `to` address.\n    ///         6. Calling this function must always withdraw at least `amount`,\n    ///            otherwise the `ERC20Bridge` will revert.\n    /// @param from The sender of the tokens and owner of the dydx account.\n    /// @param to The recipient of the tokens.\n    /// @param amount Minimum amount of `toTokenAddress` tokens to deposit or withdraw.\n    /// @param encodedBridgeData An abi-encoded `BridgeData` struct.\n    /// @return success The magic bytes if successful.\n    function bridgeTransferFrom(\n        address, /* toTokenAddress */\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata encodedBridgeData\n    )\n        external\n        returns (bytes4 success)\n    {\n        // Ensure that only the `ERC20BridgeProxy` can call this function.\n        require(\n            msg.sender == _getERC20BridgeProxyAddress(),\n            \"DydxBridge/ONLY_CALLABLE_BY_ERC20_BRIDGE_PROXY\"\n        );\n\n        // Decode bridge data.\n        (BridgeData memory bridgeData) = abi.decode(encodedBridgeData, (BridgeData));\n\n        // The dydx accounts are owned by the `from` address.\n        IDydx.AccountInfo[] memory accounts = _createAccounts(from, bridgeData);\n\n        // Create dydx actions to run on the dydx accounts.\n        IDydx.ActionArgs[] memory actions = _createActions(\n            from,\n            to,\n            amount,\n            bridgeData\n        );\n\n        // Run operation. This will revert on failure.\n        IDydx(_getDydxAddress()).operate(accounts, actions);\n\n        return BRIDGE_SUCCESS;\n    }\n\n    /// @dev Creates an array of accounts for dydx to operate on.\n    ///      All accounts must belong to the same owner.\n    /// @param accountOwner Owner of the dydx account.\n    /// @param bridgeData A `BridgeData` struct.\n    function _createAccounts(\n        address accountOwner,\n        BridgeData memory bridgeData\n    )\n        internal\n        returns (IDydx.AccountInfo[] memory accounts)\n    {\n        uint256[] memory accountNumbers = bridgeData.accountNumbers;\n        uint256 nAccounts = accountNumbers.length;\n        accounts = new IDydx.AccountInfo[](nAccounts);\n        for (uint256 i = 0; i < nAccounts; ++i) {\n            accounts[i] = IDydx.AccountInfo({\n                owner: accountOwner,\n                number: accountNumbers[i]\n            });\n        }\n    }\n\n    /// @dev Creates an array of actions to carry out on dydx.\n    /// @param depositFrom Deposit value from this address (owner of the dydx account).\n    /// @param withdrawTo Withdraw value to this address.\n    /// @param amount The amount of value available to operate on.\n    /// @param bridgeData A `BridgeData` struct.\n    function _createActions(\n        address depositFrom,\n        address withdrawTo,\n        uint256 amount,\n        BridgeData memory bridgeData\n    )\n        internal\n        returns (IDydx.ActionArgs[] memory actions)\n    {\n        BridgeAction[] memory bridgeActions = bridgeData.actions;\n        uint256 nBridgeActions = bridgeActions.length;\n        actions = new IDydx.ActionArgs[](nBridgeActions);\n        for (uint256 i = 0; i < nBridgeActions; ++i) {\n            // Cache current bridge action.\n            BridgeAction memory bridgeAction = bridgeActions[i];\n\n            // Scale amount, if conversion rate is set.\n            uint256 scaledAmount;\n            if (bridgeAction.conversionRateDenominator > 0) {\n                scaledAmount = LibMath.safeGetPartialAmountFloor(\n                    bridgeAction.conversionRateNumerator,\n                    bridgeAction.conversionRateDenominator,\n                    amount\n                );\n            } else {\n                scaledAmount = amount;\n            }\n\n            // Construct dydx action.\n            if (bridgeAction.actionType == BridgeActionType.Deposit) {\n                // Deposit tokens from the account owner into their dydx account.\n                actions[i] = _createDepositAction(\n                    depositFrom,\n                    scaledAmount,\n                    bridgeAction\n                );\n            } else if (bridgeAction.actionType == BridgeActionType.Withdraw) {\n                // Withdraw tokens from dydx to the `otherAccount`.\n                actions[i] = _createWithdrawAction(\n                    withdrawTo,\n                    scaledAmount,\n                    bridgeAction\n                );\n            } else {\n                // If all values in the `Action` enum are handled then this\n                // revert is unreachable: Solidity will revert when casting\n                // from `uint8` to `Action`.\n                revert(\"DydxBridge/UNRECOGNIZED_BRIDGE_ACTION\");\n            }\n        }\n    }\n\n    /// @dev Returns a dydx `DepositAction`.\n    /// @param depositFrom Deposit tokens from this address who is also the account owner.\n    /// @param amount of tokens to deposit.\n    /// @param bridgeAction A `BridgeAction` struct.\n    /// @return depositAction The encoded dydx action.\n    function _createDepositAction(\n        address depositFrom,\n        uint256 amount,\n        BridgeAction memory bridgeAction\n    )\n        internal\n        pure\n        returns (\n            IDydx.ActionArgs memory depositAction\n        )\n    {\n        // Create dydx amount.\n        IDydx.AssetAmount memory dydxAmount = IDydx.AssetAmount({\n            sign: true,                                 // true if positive.\n            denomination: IDydx.AssetDenomination.Wei,  // Wei => actual token amount held in account.\n            ref: IDydx.AssetReference.Delta,                // Delta => a relative amount.\n            value: amount                               // amount to deposit.\n        });\n\n        // Create dydx deposit action.\n        depositAction = IDydx.ActionArgs({\n            actionType: IDydx.ActionType.Deposit,           // deposit tokens.\n            amount: dydxAmount,                             // amount to deposit.\n            accountIdx: bridgeAction.accountIdx,             // index in the `accounts` when calling `operate`.\n            primaryMarketId: bridgeAction.marketId,         // indicates which token to deposit.\n            otherAddress: depositFrom,                      // deposit from the account owner.\n            // unused parameters\n            secondaryMarketId: 0,\n            otherAccountIdx: 0,\n            data: hex''\n        });\n    }\n\n    /// @dev Returns a dydx `WithdrawAction`.\n    /// @param withdrawTo Withdraw tokens to this address.\n    /// @param amount of tokens to withdraw.\n    /// @param bridgeAction A `BridgeAction` struct.\n    /// @return withdrawAction The encoded dydx action.\n    function _createWithdrawAction(\n        address withdrawTo,\n        uint256 amount,\n        BridgeAction memory bridgeAction\n    )\n        internal\n        pure\n        returns (\n            IDydx.ActionArgs memory withdrawAction\n        )\n    {\n        // Create dydx amount.\n        IDydx.AssetAmount memory amountToWithdraw = IDydx.AssetAmount({\n            sign: false,                                    // false if negative.\n            denomination: IDydx.AssetDenomination.Wei,      // Wei => actual token amount held in account.\n            ref: IDydx.AssetReference.Delta,                // Delta => a relative amount.\n            value: amount                                   // amount to withdraw.\n        });\n\n        // Create withdraw action.\n        withdrawAction = IDydx.ActionArgs({\n            actionType: IDydx.ActionType.Withdraw,          // withdraw tokens.\n            amount: amountToWithdraw,                       // amount to withdraw.\n            accountIdx: bridgeAction.accountIdx,            // index in the `accounts` when calling `operate`.\n            primaryMarketId: bridgeAction.marketId,         // indicates which token to withdraw.\n            otherAddress: withdrawTo,                       // withdraw tokens to this address.\n            // unused parameters\n            secondaryMarketId: 0,\n            otherAccountIdx: 0,\n            data: hex''\n        });\n    }\n}\n"
    },
    "contracts/asset-proxy/contracts/src/interfaces/IDydxBridge.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ninterface IDydxBridge {\n\n    /// @dev This is the subset of `IDydx.ActionType` that are supported by the bridge.\n    enum BridgeActionType {\n        Deposit,                    // Deposit tokens into dydx account.\n        Withdraw                    // Withdraw tokens from dydx account.\n    }\n\n    struct BridgeAction {\n        BridgeActionType actionType;            // Action to run on dydx account.\n        uint256 accountIdx;                     // Index in `BridgeData.accountNumbers` for this action.\n        uint256 marketId;                       // Market to operate on.\n        uint256 conversionRateNumerator;        // Optional. If set, transfer amount is scaled by (conversionRateNumerator/conversionRateDenominator).\n        uint256 conversionRateDenominator;      // Optional. If set, transfer amount is scaled by (conversionRateNumerator/conversionRateDenominator).\n    }\n\n    struct BridgeData {\n        uint256[] accountNumbers;               // Account number used to identify the owner's specific account.\n        BridgeAction[] actions;                 // Actions to carry out on the owner's accounts.\n    }\n}\n"
    },
    "contracts/asset-proxy/contracts/src/interfaces/IDydx.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\n\ninterface IDydx {\n\n    /// @dev Represents the unique key that specifies an account\n    struct AccountInfo {\n        address owner;  // The address that owns the account\n        uint256 number; // A nonce that allows a single address to control many accounts\n    }\n\n    enum ActionType {\n        Deposit,   // supply tokens\n        Withdraw,  // borrow tokens\n        Transfer,  // transfer balance between accounts\n        Buy,       // buy an amount of some token (externally)\n        Sell,      // sell an amount of some token (externally)\n        Trade,     // trade tokens against another account\n        Liquidate, // liquidate an undercollateralized or expiring account\n        Vaporize,  // use excess tokens to zero-out a completely negative account\n        Call       // send arbitrary data to an address\n    }\n\n    /// @dev Arguments that are passed to Solo in an ordered list as part of a single operation.\n    /// Each ActionArgs has an actionType which specifies which action struct that this data will be\n    /// parsed into before being processed.\n    struct ActionArgs {\n        ActionType actionType;\n        uint256 accountIdx;\n        AssetAmount amount;\n        uint256 primaryMarketId;\n        uint256 secondaryMarketId;\n        address otherAddress;\n        uint256 otherAccountIdx;\n        bytes data;\n    }\n\n    enum AssetDenomination {\n        Wei, // the amount is denominated in wei\n        Par  // the amount is denominated in par\n    }\n\n    enum AssetReference {\n        Delta, // the amount is given as a delta from the current value\n        Target // the amount is given as an exact number to end up at\n    }\n\n    struct AssetAmount {\n        bool sign; // true if positive\n        AssetDenomination denomination;\n        AssetReference ref;\n        uint256 value;\n    }\n\n    struct D256 {\n        uint256 value;\n    }\n\n    struct Value {\n        uint256 value;\n    }\n\n    struct Price {\n        uint256 value;\n    }\n\n    struct OperatorArg {\n        address operator;\n        bool trusted;\n    }\n\n    /// @dev The global risk parameters that govern the health and security of the system\n    struct RiskParams {\n        // Required ratio of over-collateralization\n        D256 marginRatio;\n        // Percentage penalty incurred by liquidated accounts\n        D256 liquidationSpread;\n        // Percentage of the borrower's interest fee that gets passed to the suppliers\n        D256 earningsRate;\n        // The minimum absolute borrow value of an account\n        // There must be sufficient incentivize to liquidate undercollateralized accounts\n        Value minBorrowedValue;\n    }\n\n    /// @dev The main entry-point to Solo that allows users and contracts to manage accounts.\n    ///      Take one or more actions on one or more accounts. The msg.sender must be the owner or\n    ///      operator of all accounts except for those being liquidated, vaporized, or traded with.\n    ///      One call to operate() is considered a singular \"operation\". Account collateralization is\n    ///      ensured only after the completion of the entire operation.\n    /// @param  accounts  A list of all accounts that will be used in this operation. Cannot contain\n    ///                   duplicates. In each action, the relevant account will be referred-to by its\n    ///                   index in the list.\n    /// @param  actions   An ordered list of all actions that will be taken in this operation. The\n    ///                   actions will be processed in order.\n    function operate(\n        AccountInfo[] calldata accounts,\n        ActionArgs[] calldata actions\n    )\n        external;\n\n    // @dev Approves/disapproves any number of operators. An operator is an external address that has the\n    //      same permissions to manipulate an account as the owner of the account. Operators are simply\n    //      addresses and therefore may either be externally-owned Ethereum accounts OR smart contracts.\n    //      Operators are also able to act as AutoTrader contracts on behalf of the account owner if the\n    //      operator is a smart contract and implements the IAutoTrader interface.\n    // @param args A list of OperatorArgs which have an address and a boolean. The boolean value\n    //        denotes whether to approve (true) or revoke approval (false) for that address.\n    function setOperators(OperatorArg[] calldata args) external;\n\n    /// @dev Return true if a particular address is approved as an operator for an owner's accounts.\n    ///      Approved operators can act on the accounts of the owner as if it were the operator's own.\n    /// @param owner The owner of the accounts\n    /// @param operator The possible operator\n    /// @return isLocalOperator True if operator is approved for owner's accounts\n    function getIsLocalOperator(\n        address owner,\n        address operator\n    )\n        external\n        view\n        returns (bool isLocalOperator);\n\n    /// @dev Get the ERC20 token address for a market.\n    /// @param marketId The market to query\n    /// @return tokenAddress The token address\n    function getMarketTokenAddress(\n        uint256 marketId\n    )\n        external\n        view\n        returns (address tokenAddress);\n\n    /// @dev Get all risk parameters in a single struct.\n    /// @return riskParams All global risk parameters\n    function getRiskParams()\n        external\n        view\n        returns (RiskParams memory riskParams);\n\n    /// @dev Get the price of the token for a market.\n    /// @param marketId The market to query\n    /// @return price The price of each atomic unit of the token\n    function getMarketPrice(\n        uint256 marketId\n    )\n        external\n        view\n        returns (Price memory price);\n\n    /// @dev Get the margin premium for a market. A margin premium makes it so that any positions that\n    ///      include the market require a higher collateralization to avoid being liquidated.\n    /// @param  marketId  The market to query\n    /// @return premium The market's margin premium\n    function getMarketMarginPremium(uint256 marketId)\n        external\n        view\n        returns (D256 memory premium);\n\n    /// @dev Get the total supplied and total borrowed values of an account adjusted by the marginPremium\n    ///      of each market. Supplied values are divided by (1 + marginPremium) for each market and\n    ///      borrowed values are multiplied by (1 + marginPremium) for each market. Comparing these\n    ///      adjusted values gives the margin-ratio of the account which will be compared to the global\n    ///      margin-ratio when determining if the account can be liquidated.\n    /// @param account The account to query\n    /// @return supplyValue The supplied value of the account (adjusted for marginPremium)\n    /// @return borrowValue The borrowed value of the account (adjusted for marginPremium)\n    function getAdjustedAccountValues(\n        AccountInfo calldata account\n    )\n        external\n        view\n        returns (Value memory supplyValue, Value memory borrowValue);\n}\n"
    },
    "contracts/asset-proxy/contracts/test/TestDydxBridge.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol\";\nimport \"../src/bridges/DydxBridge.sol\";\n\n\n// solhint-disable no-empty-blocks\ncontract TestDydxBridgeToken {\n\n    uint256 private constant INIT_HOLDER_BALANCE = 10 * 10**18; // 10 tokens\n    mapping (address => uint256) private _balances;\n\n    /// @dev Sets initial balance of token holders.\n    constructor(address[] memory holders)\n        public\n    {\n        for (uint256 i = 0; i != holders.length; ++i) {\n            _balances[holders[i]] = INIT_HOLDER_BALANCE;\n        }\n        _balances[msg.sender] = INIT_HOLDER_BALANCE;\n    }\n\n    /// @dev Basic transferFrom implementation.\n    function transferFrom(address from, address to, uint256 amount)\n        external\n        returns (bool)\n    {\n        if (_balances[from] < amount || _balances[to] + amount < _balances[to]) {\n            return false;\n        }\n        _balances[from] -= amount;\n        _balances[to] += amount;\n        return true;\n    }\n\n    /// @dev Returns balance of `holder`.\n    function balanceOf(address holder)\n        external\n        view\n        returns (uint256)\n    {\n        return _balances[holder];\n    }\n}\n\n\n// solhint-disable space-after-comma\ncontract TestDydxBridge is\n    IDydx,\n    DydxBridge\n{\n\n    address private constant ALWAYS_REVERT_ADDRESS = address(1);\n    address private _testTokenAddress;\n    bool private _shouldRevertOnOperate;\n\n    event OperateAccount(\n        address owner,\n        uint256 number\n    );\n\n    event OperateAction(\n        ActionType actionType,\n        uint256 accountIdx,\n        bool amountSign,\n        AssetDenomination amountDenomination,\n        AssetReference amountRef,\n        uint256 amountValue,\n        uint256 primaryMarketId,\n        uint256 secondaryMarketId,\n        address otherAddress,\n        uint256 otherAccountId,\n        bytes data\n    );\n\n    constructor(address[] memory holders)\n        public\n    {\n        // Deploy a test token. This represents the asset being deposited/withdrawn from dydx.\n        _testTokenAddress = address(new TestDydxBridgeToken(holders));\n    }\n\n    /// @dev Simulates `operate` in dydx contract.\n    ///      Emits events so that arguments can be validated client-side.\n    function operate(\n        AccountInfo[] calldata accounts,\n        ActionArgs[] calldata actions\n    )\n        external\n    {\n        if (_shouldRevertOnOperate) {\n            revert(\"TestDydxBridge/SHOULD_REVERT_ON_OPERATE\");\n        }\n\n        for (uint i = 0; i < accounts.length; ++i) {\n            emit OperateAccount(\n                accounts[i].owner,\n                accounts[i].number\n            );\n        }\n\n        for (uint i = 0; i < actions.length; ++i) {\n            emit OperateAction(\n                actions[i].actionType,\n                actions[i].accountIdx,\n                actions[i].amount.sign,\n                actions[i].amount.denomination,\n                actions[i].amount.ref,\n                actions[i].amount.value,\n                actions[i].primaryMarketId,\n                actions[i].secondaryMarketId,\n                actions[i].otherAddress,\n                actions[i].otherAccountIdx,\n                actions[i].data\n            );\n\n            if (actions[i].actionType == IDydx.ActionType.Withdraw) {\n                require(\n                    IERC20Token(_testTokenAddress).transferFrom(\n                        address(this),\n                        actions[i].otherAddress,\n                        actions[i].amount.value\n                    ),\n                    \"TestDydxBridge/WITHDRAW_FAILED\"\n                );\n            } else if (actions[i].actionType == IDydx.ActionType.Deposit) {\n                require(\n                    IERC20Token(_testTokenAddress).transferFrom(\n                        actions[i].otherAddress,\n                        address(this),\n                        actions[i].amount.value\n                    ),\n                    \"TestDydxBridge/DEPOSIT_FAILED\"\n                );\n            } else {\n                revert(\"TestDydxBridge/UNSUPPORTED_ACTION\");\n            }\n        }\n    }\n\n    /// @dev If `true` then subsequent calls to `operate` will revert.\n    function setRevertOnOperate(bool shouldRevert)\n        external\n    {\n        _shouldRevertOnOperate = shouldRevert;\n    }\n\n    /// @dev Returns test token.\n    function getTestToken()\n        external\n        returns (address)\n    {\n        return _testTokenAddress;\n    }\n\n    /// @dev Unused.\n    function setOperators(OperatorArg[] calldata args) external {}\n\n    /// @dev Unused.\n    function getIsLocalOperator(\n        address owner,\n        address operator\n    )\n        external\n        view\n        returns (bool isLocalOperator)\n    {}\n\n    /// @dev Unused.\n    function getMarketTokenAddress(\n        uint256 marketId\n    )\n        external\n        view\n        returns (address tokenAddress)\n    {}\n\n    /// @dev Unused.\n    function getRiskParams()\n        external\n        view\n        returns (RiskParams memory riskParams)\n    {}\n\n    /// @dev Unsused.\n    function getMarketPrice(\n        uint256 marketId\n    )\n        external\n        view\n        returns (Price memory price)\n    {}\n\n    /// @dev Unsused\n    function getMarketMarginPremium(uint256 marketId)\n        external\n        view\n        returns (IDydx.D256 memory premium)\n    {}\n\n    /// @dev Unused.\n    function getAdjustedAccountValues(\n        AccountInfo calldata account\n    )\n        external\n        view\n        returns (Value memory supplyValue, Value memory borrowValue)\n    {}\n\n    /// @dev overrides `_getDydxAddress()` from `DeploymentConstants` to return this address.\n    function _getDydxAddress()\n        internal\n        view\n        returns (address)\n    {\n        return address(this);\n    }\n\n    /// @dev overrides `_getERC20BridgeProxyAddress()` from `DeploymentConstants` for testing.\n    function _getERC20BridgeProxyAddress()\n        internal\n        view\n        returns (address)\n    {\n        return msg.sender == ALWAYS_REVERT_ADDRESS ? address(0) : msg.sender;\n    }\n}\n"
    },
    "contracts/asset-proxy/contracts/src/bridges/CurveBridge.sol": {
      "content": "\n/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol\";\nimport \"@0x/contracts-erc20/contracts/src/LibERC20Token.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/IWallet.sol\";\nimport \"@0x/contracts-utils/contracts/src/DeploymentConstants.sol\";\nimport \"../interfaces/IERC20Bridge.sol\";\nimport \"../interfaces/ICurve.sol\";\n\n\n// solhint-disable not-rely-on-time\n// solhint-disable space-after-comma\ncontract CurveBridge is\n    IERC20Bridge,\n    IWallet,\n    DeploymentConstants\n{\n    struct CurveBridgeData {\n        address curveAddress;\n        bytes4 exchangeFunctionSelector;\n        address fromTokenAddress;\n        int128 fromCoinIdx;\n        int128 toCoinIdx;\n    }\n\n    /// @dev Callback for `ICurve`. Tries to buy `amount` of\n    ///      `toTokenAddress` tokens by selling the entirety of the opposing asset\n    ///      (DAI, USDC) to the Curve contract, then transfers the bought\n    ///      tokens to `to`.\n    /// @param toTokenAddress The token to give to `to` (i.e DAI, USDC, USDT).\n    /// @param from The maker (this contract).\n    /// @param to The recipient of the bought tokens.\n    /// @param amount Minimum amount of `toTokenAddress` tokens to buy.\n    /// @param bridgeData The abi-encoeded \"from\" token address.\n    /// @return success The magic bytes if successful.\n    function bridgeTransferFrom(\n        address toTokenAddress,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata bridgeData\n    )\n        external\n        returns (bytes4 success)\n    {\n        // Decode the bridge data to get the Curve metadata.\n        CurveBridgeData memory data = abi.decode(bridgeData, (CurveBridgeData));\n\n        require(toTokenAddress != data.fromTokenAddress, \"CurveBridge/INVALID_PAIR\");\n        uint256 fromTokenBalance = IERC20Token(data.fromTokenAddress).balanceOf(address(this));\n        // Grant an allowance to the exchange to spend `fromTokenAddress` token.\n        LibERC20Token.approveIfBelow(data.fromTokenAddress, data.curveAddress, fromTokenBalance);\n\n        // Try to sell all of this contract's `fromTokenAddress` token balance.\n        {\n            (bool didSucceed, bytes memory resultData) =\n                data.curveAddress.call(abi.encodeWithSelector(\n                    data.exchangeFunctionSelector,\n                    data.fromCoinIdx,\n                    data.toCoinIdx,\n                    // dx\n                    fromTokenBalance,\n                    // min dy\n                    amount\n                ));\n            if (!didSucceed) {\n                assembly { revert(add(resultData, 32), mload(resultData)) }\n            }\n        }\n\n        uint256 toTokenBalance = IERC20Token(toTokenAddress).balanceOf(address(this));\n        // Transfer the converted `toToken`s to `to`.\n        LibERC20Token.transfer(toTokenAddress, to, toTokenBalance);\n\n        emit ERC20BridgeTransfer(\n            data.fromTokenAddress,\n            toTokenAddress,\n            fromTokenBalance,\n            toTokenBalance,\n            from,\n            to\n        );\n        return BRIDGE_SUCCESS;\n    }\n\n    /// @dev `SignatureType.Wallet` callback, so that this bridge can be the maker\n    ///      and sign for itself in orders. Always succeeds.\n    /// @return magicValue Magic success bytes, always.\n    function isValidSignature(\n        bytes32,\n        bytes calldata\n    )\n        external\n        view\n        returns (bytes4 magicValue)\n    {\n        return LEGACY_WALLET_MAGIC_VALUE;\n    }\n}\n"
    },
    "contracts/asset-proxy/contracts/src/bridges/CryptoComBridge.sol": {
      "content": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol\";\nimport \"@0x/contracts-erc20/contracts/src/interfaces/IEtherToken.sol\";\nimport \"@0x/contracts-erc20/contracts/src/LibERC20Token.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/IWallet.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibAddressArray.sol\";\nimport \"@0x/contracts-utils/contracts/src/DeploymentConstants.sol\";\nimport \"../interfaces/IUniswapV2Router01.sol\";\nimport \"../interfaces/IERC20Bridge.sol\";\n\n\n// solhint-disable space-after-comma\n// solhint-disable not-rely-on-time\ncontract CryptoComBridge is\n    IERC20Bridge,\n    IWallet,\n    DeploymentConstants\n{\n    struct TransferState {\n        address[] path;\n        address router;\n        uint256 fromTokenBalance;\n    }\n\n    /// @dev Callback for `IERC20Bridge`. Tries to buy `amount` of\n    ///      `toTokenAddress` tokens by selling the entirety of the `fromTokenAddress`\n    ///      token encoded in the bridge data.\n    /// @param toTokenAddress The token to buy and transfer to `to`.\n    /// @param from The maker (this contract).\n    /// @param to The recipient of the bought tokens.\n    /// @param amount Minimum amount of `toTokenAddress` tokens to buy.\n    /// @param bridgeData The abi-encoded path of token addresses. Last element must be toTokenAddress\n    /// @return success The magic bytes if successful.\n    function bridgeTransferFrom(\n        address toTokenAddress,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata bridgeData\n    )\n        external\n        returns (bytes4 success)\n    {\n        // hold variables to get around stack depth limitations\n        TransferState memory state;\n\n        // Decode the bridge data to get the `fromTokenAddress`.\n        // solhint-disable indent\n        (state.path, state.router) = abi.decode(bridgeData, (address[], address));\n        // solhint-enable indent\n\n        require(state.path.length >= 2, \"CryptoComBridge/PATH_LENGTH_MUST_BE_AT_LEAST_TWO\");\n        require(state.path[state.path.length - 1] == toTokenAddress, \"CryptoComBridge/LAST_ELEMENT_OF_PATH_MUST_MATCH_OUTPUT_TOKEN\");\n\n        // Just transfer the tokens if they're the same.\n        if (state.path[0] == toTokenAddress) {\n            LibERC20Token.transfer(state.path[0], to, amount);\n            return BRIDGE_SUCCESS;\n        }\n\n        // Get our balance of `fromTokenAddress` token.\n        state.fromTokenBalance = IERC20Token(state.path[0]).balanceOf(address(this));\n\n        // Grant the SushiSwap router an allowance.\n        LibERC20Token.approveIfBelow(\n            state.path[0],\n            state.router,\n            state.fromTokenBalance\n        );\n\n        // Buy as much `toTokenAddress` token with `fromTokenAddress` token\n        // and transfer it to `to`.\n        IUniswapV2Router01 router = IUniswapV2Router01(state.router);\n        uint[] memory amounts = router.swapExactTokensForTokens(\n             // Sell all tokens we hold.\n            state.fromTokenBalance,\n             // Minimum buy amount.\n            amount,\n            // Convert `fromTokenAddress` to `toTokenAddress`.\n            state.path,\n            // Recipient is `to`.\n            to,\n            // Expires after this block.\n            block.timestamp\n        );\n\n        emit ERC20BridgeTransfer(\n            // input token\n            state.path[0],\n            // output token\n            toTokenAddress,\n            // input token amount\n            state.fromTokenBalance,\n            // output token amount\n            amounts[amounts.length - 1],\n            from,\n            to\n        );\n\n        return BRIDGE_SUCCESS;\n    }\n\n    /// @dev `SignatureType.Wallet` callback, so that this bridge can be the maker\n    ///      and sign for itself in orders. Always succeeds.\n    /// @return magicValue Success bytes, always.\n    function isValidSignature(\n        bytes32,\n        bytes calldata\n    )\n        external\n        view\n        returns (bytes4 magicValue)\n    {\n        return LEGACY_WALLET_MAGIC_VALUE;\n    }\n}\n"
    },
    "contracts/asset-proxy/contracts/test/TestBancorBridge.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibSafeMath.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibAddressArray.sol\";\nimport \"../src/bridges/BancorBridge.sol\";\nimport \"../src/interfaces/IBancorNetwork.sol\";\n\n\ncontract TestEventsRaiser {\n\n    event TokenTransfer(\n        address token,\n        address from,\n        address to,\n        uint256 amount\n    );\n\n    event TokenApprove(\n        address spender,\n        uint256 allowance\n    );\n\n    event ConvertByPathInput(\n        uint amountIn,\n        uint amountOutMin,\n        address toTokenAddress,\n        address to,\n        address feeRecipient,\n        uint256 feeAmount\n    );\n\n    function raiseTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    )\n        external\n    {\n        emit TokenTransfer(\n            msg.sender,\n            from,\n            to,\n            amount\n        );\n    }\n\n    function raiseTokenApprove(address spender, uint256 allowance) external {\n        emit TokenApprove(spender, allowance);\n    }\n\n    function raiseConvertByPathInput(\n        uint amountIn,\n        uint amountOutMin,\n        address toTokenAddress,\n        address to,\n        address feeRecipient,\n        uint256 feeAmount\n    ) external\n    {\n        emit ConvertByPathInput(\n            amountIn,\n            amountOutMin,\n            toTokenAddress,\n            to,\n            feeRecipient,\n            feeAmount\n        );\n    }\n}\n\n\n/// @dev A minimalist ERC20 token.\ncontract TestToken {\n\n    using LibSafeMath for uint256;\n\n    mapping (address => uint256) public balances;\n    string private _nextRevertReason;\n\n    /// @dev Set the balance for `owner`.\n    function setBalance(address owner, uint256 balance)\n        external\n        payable\n    {\n        balances[owner] = balance;\n    }\n\n    /// @dev Just emits a TokenTransfer event on the caller\n    function transfer(address to, uint256 amount)\n        external\n        returns (bool)\n    {\n        TestEventsRaiser(msg.sender).raiseTokenTransfer(msg.sender, to, amount);\n        return true;\n    }\n\n    /// @dev Just emits a TokenApprove event on the caller\n    function approve(address spender, uint256 allowance)\n        external\n        returns (bool)\n    {\n        TestEventsRaiser(msg.sender).raiseTokenApprove(spender, allowance);\n        return true;\n    }\n\n    function allowance(address, address) external view returns (uint256) {\n        return 0;\n    }\n\n    /// @dev Retrieve the balance for `owner`.\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256)\n    {\n        return balances[owner];\n    }\n}\n\n\n/// @dev Mock the BancorNetwork contract\ncontract TestBancorNetwork is\n    IBancorNetwork\n{\n    string private _nextRevertReason;\n\n    /// @dev Set the revert reason for `swapExactTokensForTokens`.\n    function setRevertReason(string calldata reason)\n        external\n    {\n        _nextRevertReason = reason;\n    }\n\n    function convertByPath(\n        address[] calldata _path,\n        uint256 _amount,\n        uint256 _minReturn,\n        address _beneficiary,\n        address _affiliateAccount,\n        uint256 _affiliateFee\n    ) external payable returns (uint256)\n    {\n        _revertIfReasonExists();\n\n        TestEventsRaiser(msg.sender).raiseConvertByPathInput(\n            // tokens sold\n            _amount,\n            // tokens bought\n            _minReturn,\n            // output token\n            _path[_path.length - 1],\n            // recipient\n            _beneficiary,\n            // fee recipient\n            _affiliateAccount,\n            // fee amount\n            _affiliateFee\n        );\n    }\n\n    function _revertIfReasonExists()\n        private\n        view\n    {\n        if (bytes(_nextRevertReason).length != 0) {\n            revert(_nextRevertReason);\n        }\n    }\n\n}\n\n\n/// @dev BancorBridge overridden to mock tokens and BancorNetwork\ncontract TestBancorBridge is\n    BancorBridge,\n    TestEventsRaiser\n{\n\n    // Token address to TestToken instance.\n    mapping (address => TestToken) private _testTokens;\n    // TestRouter instance.\n    TestBancorNetwork private _testNetwork;\n\n    constructor() public {\n        _testNetwork = new TestBancorNetwork();\n    }\n\n    function setNetworkRevertReason(string calldata revertReason)\n        external\n    {\n        _testNetwork.setRevertReason(revertReason);\n    }\n\n    /// @dev Sets the balance of this contract for an existing token.\n    function setTokenBalance(address tokenAddress, uint256 balance)\n        external\n    {\n        TestToken token = _testTokens[tokenAddress];\n        token.setBalance(address(this), balance);\n    }\n\n    /// @dev Create a new token\n    /// @param tokenAddress The token address. If zero, one will be created.\n    function createToken(\n        address tokenAddress\n    )\n        external\n        returns (TestToken token)\n    {\n        token = TestToken(tokenAddress);\n        if (tokenAddress == address(0)) {\n            token = new TestToken();\n        }\n        _testTokens[address(token)] = token;\n\n        return token;\n    }\n\n    function getNetworkAddress()\n        external\n        view\n        returns (address)\n    {\n        return address(_testNetwork);\n    }\n\n}\n"
    },
    "contracts/asset-proxy/contracts/src/bridges/BancorBridge.sol": {
      "content": "\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol\";\nimport \"@0x/contracts-erc20/contracts/src/interfaces/IEtherToken.sol\";\nimport \"@0x/contracts-erc20/contracts/src/LibERC20Token.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/IWallet.sol\";\nimport \"@0x/contracts-utils/contracts/src/DeploymentConstants.sol\";\nimport \"../interfaces/IERC20Bridge.sol\";\nimport \"../interfaces/IBancorNetwork.sol\";\n\n\ncontract BancorBridge is\n    IERC20Bridge,\n    IWallet,\n    DeploymentConstants\n{\n    struct TransferState {\n        address bancorNetworkAddress;\n        address[] path;\n        IEtherToken weth;\n    }\n\n    /// @dev Bancor ETH pseudo-address.\n    address constant public BANCOR_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    // solhint-disable no-empty-blocks\n    /// @dev Payable fallback to receive ETH from Bancor/WETH.\n    function ()\n        external\n        payable\n    {\n        // Poor man's receive in 0.5.9\n        require(msg.data.length == 0);\n    }\n\n    /// @dev Callback for `IERC20Bridge`. Tries to buy `amount` of\n    ///      `toTokenAddress` tokens by selling the entirety of the `fromTokenAddress`\n    ///      token encoded in the bridge data, then transfers the bought\n    ///      tokens to `to`.\n    /// @param toTokenAddress The token to buy and transfer to `to`.\n    /// @param from The maker (this contract).\n    /// @param to The recipient of the bought tokens.\n    /// @param amount Minimum amount of `toTokenAddress` tokens to buy.\n    /// @param bridgeData The abi-encoded conversion path addresses and Bancor network address\n    /// @return success The magic bytes if successful.\n    function bridgeTransferFrom(\n        address toTokenAddress,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata bridgeData\n    )\n        external\n        returns (bytes4 success)\n    {\n        // hold variables to get around stack depth limitations\n        TransferState memory state;\n        // Decode the bridge data.\n        (\n            state.path,\n            state.bancorNetworkAddress\n        // solhint-disable indent\n        ) = abi.decode(bridgeData, (address[], address));\n        // solhint-enable indent\n        state.weth = IEtherToken(_getWethAddress());\n\n        require(state.path.length >= 2, \"BancorBridge/PATH_LENGTH_MUST_BE_GREATER_THAN_TWO\");\n\n        // Grant an allowance to the Bancor Network to spend `fromTokenAddress` token.\n        uint256 fromTokenBalance;\n        uint256 payableAmount = 0;\n        // If it's ETH in the path then withdraw from WETH\n        // The Bancor path will have ETH as the 0xeee address\n        // Bancor expects to be paid in ETH not WETH\n        if (state.path[0] == BANCOR_ETH_ADDRESS) {\n            fromTokenBalance = state.weth.balanceOf(address(this));\n            state.weth.withdraw(fromTokenBalance);\n            payableAmount = fromTokenBalance;\n        } else {\n            fromTokenBalance = IERC20Token(state.path[0]).balanceOf(address(this));\n            LibERC20Token.approveIfBelow(state.path[0], state.bancorNetworkAddress, fromTokenBalance);\n        }\n\n        // Convert the tokens\n        uint256 boughtAmount = IBancorNetwork(state.bancorNetworkAddress).convertByPath.value(payableAmount)(\n            state.path, // path originating with source token and terminating in destination token\n            fromTokenBalance, // amount of source token to trade\n            amount, // minimum amount of destination token expected to receive\n            state.path[state.path.length-1] == BANCOR_ETH_ADDRESS ? address(this) : to, // beneficiary\n            address(0), // affiliateAccount; no fee paid\n            0 // affiliateFee; no fee paid\n        );\n\n        if (state.path[state.path.length-1] == BANCOR_ETH_ADDRESS) {\n            state.weth.deposit.value(boughtAmount)();\n            state.weth.transfer(to, boughtAmount);\n        }\n\n        emit ERC20BridgeTransfer(\n            state.path[0] == BANCOR_ETH_ADDRESS ? address(state.weth) : state.path[0],\n            toTokenAddress,\n            fromTokenBalance,\n            boughtAmount,\n            from,\n            to\n        );\n        return BRIDGE_SUCCESS;\n    }\n\n    /// @dev `SignatureType.Wallet` callback, so that this bridge can be the maker\n    ///      and sign for itself in orders. Always succeeds.\n    /// @return magicValue Magic success bytes, always.\n    function isValidSignature(\n        bytes32,\n        bytes calldata\n    )\n        external\n        view\n        returns (bytes4 magicValue)\n    {\n        return LEGACY_WALLET_MAGIC_VALUE;\n    }\n\n}\n"
    },
    "contracts/asset-proxy/contracts/src/interfaces/IBancorNetwork.sol": {
      "content": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ncontract IContractRegistry {\n    function addressOf(\n        bytes32 contractName\n    ) external returns(address);\n}\n\n\ncontract IBancorNetwork {\n    function convertByPath(\n        address[] calldata _path,\n        uint256 _amount,\n        uint256 _minReturn,\n        address _beneficiary,\n        address _affiliateAccount,\n        uint256 _affiliateFee\n    ) external payable returns (uint256);\n}\n"
    },
    "contracts/asset-proxy/contracts/src/bridges/CreamBridge.sol": {
      "content": "\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol\";\nimport \"@0x/contracts-erc20/contracts/src/LibERC20Token.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/IWallet.sol\";\nimport \"@0x/contracts-utils/contracts/src/DeploymentConstants.sol\";\nimport \"../interfaces/IERC20Bridge.sol\";\nimport \"../interfaces/IBalancerPool.sol\";\n\n\ncontract CreamBridge is\n    IERC20Bridge,\n    IWallet,\n    DeploymentConstants\n{\n    /// @dev Callback for `IERC20Bridge`. Tries to buy `amount` of\n    ///      `toTokenAddress` tokens by selling the entirety of the `fromTokenAddress`\n    ///      token encoded in the bridge data, then transfers the bought\n    ///      tokens to `to`.\n    /// @param toTokenAddress The token to buy and transfer to `to`.\n    /// @param from The maker (this contract).\n    /// @param to The recipient of the bought tokens.\n    /// @param amount Minimum amount of `toTokenAddress` tokens to buy.\n    /// @param bridgeData The abi-encoded addresses of the \"from\" token and Balancer pool.\n    /// @return success The magic bytes if successful.\n    function bridgeTransferFrom(\n        address toTokenAddress,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata bridgeData\n    )\n        external\n        returns (bytes4 success)\n    {\n        // Decode the bridge data.\n        (address fromTokenAddress, address poolAddress) = abi.decode(\n            bridgeData,\n            (address, address)\n        );\n        require(toTokenAddress != fromTokenAddress, \"CreamBridge/INVALID_PAIR\");\n\n        uint256 fromTokenBalance = IERC20Token(fromTokenAddress).balanceOf(address(this));\n        // Grant an allowance to the exchange to spend `fromTokenAddress` token.\n        LibERC20Token.approveIfBelow(fromTokenAddress, poolAddress, fromTokenBalance);\n\n        // Sell all of this contract's `fromTokenAddress` token balance.\n        (uint256 boughtAmount,) = IBalancerPool(poolAddress).swapExactAmountIn(\n            fromTokenAddress, // tokenIn\n            fromTokenBalance, // tokenAmountIn\n            toTokenAddress,   // tokenOut\n            amount,           // minAmountOut\n            uint256(-1)       // maxPrice\n        );\n\n        // Transfer the converted `toToken`s to `to`.\n        LibERC20Token.transfer(toTokenAddress, to, boughtAmount);\n\n        emit ERC20BridgeTransfer(\n            fromTokenAddress,\n            toTokenAddress,\n            fromTokenBalance,\n            boughtAmount,\n            from,\n            to\n        );\n        return BRIDGE_SUCCESS;\n    }\n\n    /// @dev `SignatureType.Wallet` callback, so that this bridge can be the maker\n    ///      and sign for itself in orders. Always succeeds.\n    /// @return magicValue Magic success bytes, always.\n    function isValidSignature(\n        bytes32,\n        bytes calldata\n    )\n        external\n        view\n        returns (bytes4 magicValue)\n    {\n        return LEGACY_WALLET_MAGIC_VALUE;\n    }\n}\n"
    },
    "contracts/asset-proxy/contracts/src/interfaces/IBalancerPool.sol": {
      "content": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ninterface IBalancerPool {\n    /// @dev Sell `tokenAmountIn` of `tokenIn` and receive `tokenOut`.\n    /// @param tokenIn The token being sold\n    /// @param tokenAmountIn The amount of `tokenIn` to sell.\n    /// @param tokenOut The token being bought.\n    /// @param minAmountOut The minimum amount of `tokenOut` to buy.\n    /// @param maxPrice The maximum value for `spotPriceAfter`.\n    /// @return tokenAmountOut The amount of `tokenOut` bought.\n    /// @return spotPriceAfter The new marginal spot price of the given\n    ///         token pair for this pool.\n    function swapExactAmountIn(\n        address tokenIn,\n        uint tokenAmountIn,\n        address tokenOut,\n        uint minAmountOut,\n        uint maxPrice\n    ) external returns (uint tokenAmountOut, uint spotPriceAfter);\n}"
    },
    "contracts/asset-proxy/contracts/src/bridges/BalancerBridge.sol": {
      "content": "\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol\";\nimport \"@0x/contracts-erc20/contracts/src/LibERC20Token.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/IWallet.sol\";\nimport \"@0x/contracts-utils/contracts/src/DeploymentConstants.sol\";\nimport \"../interfaces/IERC20Bridge.sol\";\nimport \"../interfaces/IBalancerPool.sol\";\n\n\ncontract BalancerBridge is\n    IERC20Bridge,\n    IWallet,\n    DeploymentConstants\n{\n    /// @dev Callback for `IERC20Bridge`. Tries to buy `amount` of\n    ///      `toTokenAddress` tokens by selling the entirety of the `fromTokenAddress`\n    ///      token encoded in the bridge data, then transfers the bought\n    ///      tokens to `to`.\n    /// @param toTokenAddress The token to buy and transfer to `to`.\n    /// @param from The maker (this contract).\n    /// @param to The recipient of the bought tokens.\n    /// @param amount Minimum amount of `toTokenAddress` tokens to buy.\n    /// @param bridgeData The abi-encoded addresses of the \"from\" token and Balancer pool.\n    /// @return success The magic bytes if successful.\n    function bridgeTransferFrom(\n        address toTokenAddress,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata bridgeData\n    )\n        external\n        returns (bytes4 success)\n    {\n        // Decode the bridge data.\n        (address fromTokenAddress, address poolAddress) = abi.decode(\n            bridgeData,\n            (address, address)\n        );\n        require(toTokenAddress != fromTokenAddress, \"BalancerBridge/INVALID_PAIR\");\n\n        uint256 fromTokenBalance = IERC20Token(fromTokenAddress).balanceOf(address(this));\n        // Grant an allowance to the exchange to spend `fromTokenAddress` token.\n        LibERC20Token.approveIfBelow(fromTokenAddress, poolAddress, fromTokenBalance);\n\n        // Sell all of this contract's `fromTokenAddress` token balance.\n        (uint256 boughtAmount,) = IBalancerPool(poolAddress).swapExactAmountIn(\n            fromTokenAddress, // tokenIn\n            fromTokenBalance, // tokenAmountIn\n            toTokenAddress,   // tokenOut\n            amount,           // minAmountOut\n            uint256(-1)       // maxPrice\n        );\n\n        // Transfer the converted `toToken`s to `to`.\n        LibERC20Token.transfer(toTokenAddress, to, boughtAmount);\n\n        emit ERC20BridgeTransfer(\n            fromTokenAddress,\n            toTokenAddress,\n            fromTokenBalance,\n            boughtAmount,\n            from,\n            to\n        );\n        return BRIDGE_SUCCESS;\n    }\n\n    /// @dev `SignatureType.Wallet` callback, so that this bridge can be the maker\n    ///      and sign for itself in orders. Always succeeds.\n    /// @return magicValue Magic success bytes, always.\n    function isValidSignature(\n        bytes32,\n        bytes calldata\n    )\n        external\n        view\n        returns (bytes4 magicValue)\n    {\n        return LEGACY_WALLET_MAGIC_VALUE;\n    }\n}\n"
    },
    "contracts/dev-utils/contracts/src/DevUtils.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.16;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibEIP712ExchangeDomain.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibZeroExTransaction.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibEIP712.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\nimport \"./Addresses.sol\";\nimport \"./OrderValidationUtils.sol\";\nimport \"./EthBalanceChecker.sol\";\nimport \"./ExternalFunctions.sol\";\n\n\n// solhint-disable no-empty-blocks\ncontract DevUtils is\n    Addresses,\n    OrderValidationUtils,\n    LibEIP712ExchangeDomain,\n    EthBalanceChecker,\n    ExternalFunctions\n{\n    constructor (\n        address exchange_,\n        address chaiBridge_,\n        address dydxBridge_\n    )\n        public\n        Addresses(\n            exchange_,\n            chaiBridge_,\n            dydxBridge_\n        )\n        LibEIP712ExchangeDomain(uint256(0), address(0)) // null args because because we only use constants\n    {}\n\n    function getOrderHash(\n        LibOrder.Order memory order,\n        uint256 chainId,\n        address exchange\n    )\n        public\n        pure\n        returns (bytes32 orderHash)\n    {\n        return LibOrder.getTypedDataHash(\n            order,\n            LibEIP712.hashEIP712Domain(_EIP712_EXCHANGE_DOMAIN_NAME, _EIP712_EXCHANGE_DOMAIN_VERSION, chainId, exchange)\n        );\n    }\n\n    function getTransactionHash(\n        LibZeroExTransaction.ZeroExTransaction memory transaction,\n        uint256 chainId,\n        address exchange\n    )\n        public\n        pure\n        returns (bytes32 transactionHash)\n    {\n        return LibZeroExTransaction.getTypedDataHash(\n            transaction,\n            LibEIP712.hashEIP712Domain(_EIP712_EXCHANGE_DOMAIN_NAME, _EIP712_EXCHANGE_DOMAIN_VERSION, chainId, exchange)\n        );\n    }\n}\n"
    },
    "@0x/contracts-exchange-libs/contracts/src/LibEIP712ExchangeDomain.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-utils/contracts/src/LibEIP712.sol\";\n\n\ncontract LibEIP712ExchangeDomain {\n\n    // EIP712 Exchange Domain Name value\n    string constant internal _EIP712_EXCHANGE_DOMAIN_NAME = \"0x Protocol\";\n\n    // EIP712 Exchange Domain Version value\n    string constant internal _EIP712_EXCHANGE_DOMAIN_VERSION = \"3.0.0\";\n\n    // solhint-disable var-name-mixedcase\n    /// @dev Hash of the EIP712 Domain Separator data\n    /// @return 0 Domain hash.\n    bytes32 public EIP712_EXCHANGE_DOMAIN_HASH;\n    // solhint-enable var-name-mixedcase\n\n    /// @param chainId Chain ID of the network this contract is deployed on.\n    /// @param verifyingContractAddressIfExists Address of the verifying contract (null if the address of this contract)\n    constructor (\n        uint256 chainId,\n        address verifyingContractAddressIfExists\n    )\n        public\n    {\n        address verifyingContractAddress = verifyingContractAddressIfExists == address(0) ? address(this) : verifyingContractAddressIfExists;\n        EIP712_EXCHANGE_DOMAIN_HASH = LibEIP712.hashEIP712Domain(\n            _EIP712_EXCHANGE_DOMAIN_NAME,\n            _EIP712_EXCHANGE_DOMAIN_VERSION,\n            chainId,\n            verifyingContractAddress\n        );\n    }\n}\n"
    },
    "contracts/dev-utils/contracts/src/EthBalanceChecker.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.16;\n\n\ncontract EthBalanceChecker {\n\n    /// @dev Batch fetches ETH balances\n    /// @param addresses Array of addresses.\n    /// @return Array of ETH balances.\n    function getEthBalances(address[] memory addresses)\n        public\n        view\n        returns (uint256[] memory)\n    {\n        uint256[] memory balances = new uint256[](addresses.length);\n        for (uint256 i = 0; i != addresses.length; i++) {\n            balances[i] = addresses[i].balance;\n        }\n        return balances;\n    }\n\n}\n"
    },
    "contracts/exchange-libs/contracts/src/LibZeroExTransaction.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/LibEIP712.sol\";\n\n\nlibrary LibZeroExTransaction {\n\n    using LibZeroExTransaction for ZeroExTransaction;\n\n    // Hash for the EIP712 0x transaction schema\n    // keccak256(abi.encodePacked(\n    //    \"ZeroExTransaction(\",\n    //    \"uint256 salt,\",\n    //    \"uint256 expirationTimeSeconds,\",\n    //    \"uint256 gasPrice,\",\n    //    \"address signerAddress,\",\n    //    \"bytes data\",\n    //    \")\"\n    // ));\n    bytes32 constant internal _EIP712_ZEROEX_TRANSACTION_SCHEMA_HASH = 0xec69816980a3a3ca4554410e60253953e9ff375ba4536a98adfa15cc71541508;\n\n    struct ZeroExTransaction {\n        uint256 salt;                   // Arbitrary number to ensure uniqueness of transaction hash.\n        uint256 expirationTimeSeconds;  // Timestamp in seconds at which transaction expires.\n        uint256 gasPrice;               // gasPrice that transaction is required to be executed with.\n        address signerAddress;          // Address of transaction signer.\n        bytes data;                     // AbiV2 encoded calldata.\n    }\n\n    /// @dev Calculates the EIP712 typed data hash of a transaction with a given domain separator.\n    /// @param transaction 0x transaction structure.\n    /// @return EIP712 typed data hash of the transaction.\n    function getTypedDataHash(ZeroExTransaction memory transaction, bytes32 eip712ExchangeDomainHash)\n        internal\n        pure\n        returns (bytes32 transactionHash)\n    {\n        // Hash the transaction with the domain separator of the Exchange contract.\n        transactionHash = LibEIP712.hashEIP712Message(\n            eip712ExchangeDomainHash,\n            transaction.getStructHash()\n        );\n        return transactionHash;\n    }\n\n    /// @dev Calculates EIP712 hash of the 0x transaction struct.\n    /// @param transaction 0x transaction structure.\n    /// @return EIP712 hash of the transaction struct.\n    function getStructHash(ZeroExTransaction memory transaction)\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        bytes32 schemaHash = _EIP712_ZEROEX_TRANSACTION_SCHEMA_HASH;\n        bytes memory data = transaction.data;\n        uint256 salt = transaction.salt;\n        uint256 expirationTimeSeconds = transaction.expirationTimeSeconds;\n        uint256 gasPrice = transaction.gasPrice;\n        address signerAddress = transaction.signerAddress;\n\n        // Assembly for more efficiently computing:\n        // result = keccak256(abi.encodePacked(\n        //     schemaHash,\n        //     salt,\n        //     expirationTimeSeconds,\n        //     gasPrice,\n        //     uint256(signerAddress),\n        //     keccak256(data)\n        // ));\n\n        assembly {\n            // Compute hash of data\n            let dataHash := keccak256(add(data, 32), mload(data))\n\n            // Load free memory pointer\n            let memPtr := mload(64)\n\n            mstore(memPtr, schemaHash)                                                                // hash of schema\n            mstore(add(memPtr, 32), salt)                                                             // salt\n            mstore(add(memPtr, 64), expirationTimeSeconds)                                            // expirationTimeSeconds\n            mstore(add(memPtr, 96), gasPrice)                                                         // gasPrice\n            mstore(add(memPtr, 128), and(signerAddress, 0xffffffffffffffffffffffffffffffffffffffff))  // signerAddress\n            mstore(add(memPtr, 160), dataHash)                                                        // hash of data\n\n            // Compute hash\n            result := keccak256(memPtr, 192)\n        }\n        return result;\n    }\n}\n"
    },
    "contracts/exchange-libs/contracts/test/TestLibZeroExTransaction.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"../src/LibZeroExTransaction.sol\";\n\n\ncontract TestLibZeroExTransaction {\n\n    function getTypedDataHash(LibZeroExTransaction.ZeroExTransaction memory transaction, bytes32 eip712ExchangeDomainHash)\n        public\n        pure\n        returns (bytes32 transactionHash)\n    {\n        transactionHash = LibZeroExTransaction.getTypedDataHash(transaction, eip712ExchangeDomainHash);\n        return transactionHash;\n    }\n\n    function getStructHash(LibZeroExTransaction.ZeroExTransaction memory transaction)\n        public\n        pure\n        returns (bytes32 result)\n    {\n        result = LibZeroExTransaction.getStructHash(transaction);\n        return result;\n    }\n}"
    },
    "contracts/exchange-libs/contracts/src/LibOrder.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-utils/contracts/src/LibEIP712.sol\";\n\n\nlibrary LibOrder {\n\n    using LibOrder for Order;\n\n    // Hash for the EIP712 Order Schema:\n    // keccak256(abi.encodePacked(\n    //     \"Order(\",\n    //     \"address makerAddress,\",\n    //     \"address takerAddress,\",\n    //     \"address feeRecipientAddress,\",\n    //     \"address senderAddress,\",\n    //     \"uint256 makerAssetAmount,\",\n    //     \"uint256 takerAssetAmount,\",\n    //     \"uint256 makerFee,\",\n    //     \"uint256 takerFee,\",\n    //     \"uint256 expirationTimeSeconds,\",\n    //     \"uint256 salt,\",\n    //     \"bytes makerAssetData,\",\n    //     \"bytes takerAssetData,\",\n    //     \"bytes makerFeeAssetData,\",\n    //     \"bytes takerFeeAssetData\",\n    //     \")\"\n    // ))\n    bytes32 constant internal _EIP712_ORDER_SCHEMA_HASH =\n        0xf80322eb8376aafb64eadf8f0d7623f22130fd9491a221e902b713cb984a7534;\n\n    // A valid order remains fillable until it is expired, fully filled, or cancelled.\n    // An order's status is unaffected by external factors, like account balances.\n    enum OrderStatus {\n        INVALID,                     // Default value\n        INVALID_MAKER_ASSET_AMOUNT,  // Order does not have a valid maker asset amount\n        INVALID_TAKER_ASSET_AMOUNT,  // Order does not have a valid taker asset amount\n        FILLABLE,                    // Order is fillable\n        EXPIRED,                     // Order has already expired\n        FULLY_FILLED,                // Order is fully filled\n        CANCELLED                    // Order has been cancelled\n    }\n\n    // solhint-disable max-line-length\n    /// @dev Canonical order structure.\n    struct Order {\n        address makerAddress;           // Address that created the order.\n        address takerAddress;           // Address that is allowed to fill the order. If set to 0, any address is allowed to fill the order.\n        address feeRecipientAddress;    // Address that will recieve fees when order is filled.\n        address senderAddress;          // Address that is allowed to call Exchange contract methods that affect this order. If set to 0, any address is allowed to call these methods.\n        uint256 makerAssetAmount;       // Amount of makerAsset being offered by maker. Must be greater than 0.\n        uint256 takerAssetAmount;       // Amount of takerAsset being bid on by maker. Must be greater than 0.\n        uint256 makerFee;               // Fee paid to feeRecipient by maker when order is filled.\n        uint256 takerFee;               // Fee paid to feeRecipient by taker when order is filled.\n        uint256 expirationTimeSeconds;  // Timestamp in seconds at which order expires.\n        uint256 salt;                   // Arbitrary number to facilitate uniqueness of the order's hash.\n        bytes makerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring makerAsset. The leading bytes4 references the id of the asset proxy.\n        bytes takerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring takerAsset. The leading bytes4 references the id of the asset proxy.\n        bytes makerFeeAssetData;        // Encoded data that can be decoded by a specified proxy contract when transferring makerFeeAsset. The leading bytes4 references the id of the asset proxy.\n        bytes takerFeeAssetData;        // Encoded data that can be decoded by a specified proxy contract when transferring takerFeeAsset. The leading bytes4 references the id of the asset proxy.\n    }\n    // solhint-enable max-line-length\n\n    /// @dev Order information returned by `getOrderInfo()`.\n    struct OrderInfo {\n        OrderStatus orderStatus;                    // Status that describes order's validity and fillability.\n        bytes32 orderHash;                    // EIP712 typed data hash of the order (see LibOrder.getTypedDataHash).\n        uint256 orderTakerAssetFilledAmount;  // Amount of order that has already been filled.\n    }\n\n    /// @dev Calculates the EIP712 typed data hash of an order with a given domain separator.\n    /// @param order The order structure.\n    /// @return EIP712 typed data hash of the order.\n    function getTypedDataHash(Order memory order, bytes32 eip712ExchangeDomainHash)\n        internal\n        pure\n        returns (bytes32 orderHash)\n    {\n        orderHash = LibEIP712.hashEIP712Message(\n            eip712ExchangeDomainHash,\n            order.getStructHash()\n        );\n        return orderHash;\n    }\n\n    /// @dev Calculates EIP712 hash of the order struct.\n    /// @param order The order structure.\n    /// @return EIP712 hash of the order struct.\n    function getStructHash(Order memory order)\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        bytes32 schemaHash = _EIP712_ORDER_SCHEMA_HASH;\n        bytes memory makerAssetData = order.makerAssetData;\n        bytes memory takerAssetData = order.takerAssetData;\n        bytes memory makerFeeAssetData = order.makerFeeAssetData;\n        bytes memory takerFeeAssetData = order.takerFeeAssetData;\n\n        // Assembly for more efficiently computing:\n        // keccak256(abi.encodePacked(\n        //     EIP712_ORDER_SCHEMA_HASH,\n        //     uint256(order.makerAddress),\n        //     uint256(order.takerAddress),\n        //     uint256(order.feeRecipientAddress),\n        //     uint256(order.senderAddress),\n        //     order.makerAssetAmount,\n        //     order.takerAssetAmount,\n        //     order.makerFee,\n        //     order.takerFee,\n        //     order.expirationTimeSeconds,\n        //     order.salt,\n        //     keccak256(order.makerAssetData),\n        //     keccak256(order.takerAssetData),\n        //     keccak256(order.makerFeeAssetData),\n        //     keccak256(order.takerFeeAssetData)\n        // ));\n\n        assembly {\n            // Assert order offset (this is an internal error that should never be triggered)\n            if lt(order, 32) {\n                invalid()\n            }\n\n            // Calculate memory addresses that will be swapped out before hashing\n            let pos1 := sub(order, 32)\n            let pos2 := add(order, 320)\n            let pos3 := add(order, 352)\n            let pos4 := add(order, 384)\n            let pos5 := add(order, 416)\n\n            // Backup\n            let temp1 := mload(pos1)\n            let temp2 := mload(pos2)\n            let temp3 := mload(pos3)\n            let temp4 := mload(pos4)\n            let temp5 := mload(pos5)\n\n            // Hash in place\n            mstore(pos1, schemaHash)\n            mstore(pos2, keccak256(add(makerAssetData, 32), mload(makerAssetData)))        // store hash of makerAssetData\n            mstore(pos3, keccak256(add(takerAssetData, 32), mload(takerAssetData)))        // store hash of takerAssetData\n            mstore(pos4, keccak256(add(makerFeeAssetData, 32), mload(makerFeeAssetData)))  // store hash of makerFeeAssetData\n            mstore(pos5, keccak256(add(takerFeeAssetData, 32), mload(takerFeeAssetData)))  // store hash of takerFeeAssetData\n            result := keccak256(pos1, 480)\n\n            // Restore\n            mstore(pos1, temp1)\n            mstore(pos2, temp2)\n            mstore(pos3, temp3)\n            mstore(pos4, temp4)\n            mstore(pos5, temp5)\n        }\n        return result;\n    }\n}\n"
    },
    "contracts/exchange-libs/contracts/test/TestLibOrder.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"../src/LibOrder.sol\";\n\n\ncontract TestLibOrder {\n\n    function getTypedDataHash(LibOrder.Order memory order, bytes32 eip712ExchangeDomainHash)\n        public\n        pure\n        returns (bytes32 orderHash)\n    {\n        orderHash = LibOrder.getTypedDataHash(order, eip712ExchangeDomainHash);\n        return orderHash;\n    }\n\n    function getStructHash(LibOrder.Order memory order)\n        public\n        pure\n        returns (bytes32 result)\n    {\n        result = LibOrder.getStructHash(order);\n        return result;\n    }\n}\n"
    },
    "contracts/exchange-libs/contracts/test/TestLibFillResults.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"../src/LibOrder.sol\";\nimport \"../src/LibFillResults.sol\";\n\n\ncontract TestLibFillResults {\n\n    using LibFillResults for *;\n\n    function calculateFillResults(\n        LibOrder.Order memory order,\n        uint256 takerAssetFilledAmount,\n        uint256 protocolFeeMultiplier,\n        uint256 gasPrice\n    )\n        public\n        pure\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        fillResults = LibFillResults.calculateFillResults(\n            order,\n            takerAssetFilledAmount,\n            protocolFeeMultiplier,\n            gasPrice\n        );\n        return fillResults;\n    }\n\n    function calculateMatchedFillResults(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        uint256 leftOrderTakerAssetFilledAmount,\n        uint256 rightOrderTakerAssetFilledAmount,\n        uint256 protocolFeeMultiplier,\n        uint256 gasPrice,\n        bool shouldMaximallyFillOrders\n    )\n        public\n        pure\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults)\n    {\n        matchedFillResults = LibFillResults.calculateMatchedFillResults(\n            leftOrder,\n            rightOrder,\n            leftOrderTakerAssetFilledAmount,\n            rightOrderTakerAssetFilledAmount,\n            protocolFeeMultiplier,\n            gasPrice,\n            shouldMaximallyFillOrders\n        );\n        return matchedFillResults;\n    }\n\n    function addFillResults(\n        LibFillResults.FillResults memory fillResults1,\n        LibFillResults.FillResults memory fillResults2\n    )\n        public\n        pure\n        returns (LibFillResults.FillResults memory totalFillResults)\n    {\n        totalFillResults = LibFillResults.addFillResults(fillResults1, fillResults2);\n        return totalFillResults;\n    }\n}\n"
    },
    "contracts/exchange-libs/contracts/src/LibFillResults.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-utils/contracts/src/LibSafeMath.sol\";\nimport \"./LibMath.sol\";\nimport \"./LibOrder.sol\";\n\n\nlibrary LibFillResults {\n\n    using LibSafeMath for uint256;\n\n    struct BatchMatchedFillResults {\n        FillResults[] left;              // Fill results for left orders\n        FillResults[] right;             // Fill results for right orders\n        uint256 profitInLeftMakerAsset;  // Profit taken from left makers\n        uint256 profitInRightMakerAsset; // Profit taken from right makers\n    }\n\n    struct FillResults {\n        uint256 makerAssetFilledAmount;  // Total amount of makerAsset(s) filled.\n        uint256 takerAssetFilledAmount;  // Total amount of takerAsset(s) filled.\n        uint256 makerFeePaid;            // Total amount of fees paid by maker(s) to feeRecipient(s).\n        uint256 takerFeePaid;            // Total amount of fees paid by taker to feeRecipients(s).\n        uint256 protocolFeePaid;         // Total amount of fees paid by taker to the staking contract.\n    }\n\n    struct MatchedFillResults {\n        FillResults left;                // Amounts filled and fees paid of left order.\n        FillResults right;               // Amounts filled and fees paid of right order.\n        uint256 profitInLeftMakerAsset;  // Profit taken from the left maker\n        uint256 profitInRightMakerAsset; // Profit taken from the right maker\n    }\n\n    /// @dev Calculates amounts filled and fees paid by maker and taker.\n    /// @param order to be filled.\n    /// @param takerAssetFilledAmount Amount of takerAsset that will be filled.\n    /// @param protocolFeeMultiplier The current protocol fee of the exchange contract.\n    /// @param gasPrice The gasprice of the transaction. This is provided so that the function call can continue\n    ///        to be pure rather than view.\n    /// @return fillResults Amounts filled and fees paid by maker and taker.\n    function calculateFillResults(\n        LibOrder.Order memory order,\n        uint256 takerAssetFilledAmount,\n        uint256 protocolFeeMultiplier,\n        uint256 gasPrice\n    )\n        internal\n        pure\n        returns (FillResults memory fillResults)\n    {\n        // Compute proportional transfer amounts\n        fillResults.takerAssetFilledAmount = takerAssetFilledAmount;\n        fillResults.makerAssetFilledAmount = LibMath.safeGetPartialAmountFloor(\n            takerAssetFilledAmount,\n            order.takerAssetAmount,\n            order.makerAssetAmount\n        );\n        fillResults.makerFeePaid = LibMath.safeGetPartialAmountFloor(\n            takerAssetFilledAmount,\n            order.takerAssetAmount,\n            order.makerFee\n        );\n        fillResults.takerFeePaid = LibMath.safeGetPartialAmountFloor(\n            takerAssetFilledAmount,\n            order.takerAssetAmount,\n            order.takerFee\n        );\n\n        // Compute the protocol fee that should be paid for a single fill.\n        fillResults.protocolFeePaid = gasPrice.safeMul(protocolFeeMultiplier);\n\n        return fillResults;\n    }\n\n    /// @dev Calculates fill amounts for the matched orders.\n    ///      Each order is filled at their respective price point. However, the calculations are\n    ///      carried out as though the orders are both being filled at the right order's price point.\n    ///      The profit made by the leftOrder order goes to the taker (who matched the two orders).\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    /// @param leftOrderTakerAssetFilledAmount Amount of left order already filled.\n    /// @param rightOrderTakerAssetFilledAmount Amount of right order already filled.\n    /// @param protocolFeeMultiplier The current protocol fee of the exchange contract.\n    /// @param gasPrice The gasprice of the transaction. This is provided so that the function call can continue\n    ///        to be pure rather than view.\n    /// @param shouldMaximallyFillOrders A value that indicates whether or not this calculation should use\n    ///                                  the maximal fill order matching strategy.\n    /// @param matchedFillResults Amounts to fill and fees to pay by maker and taker of matched orders.\n    function calculateMatchedFillResults(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        uint256 leftOrderTakerAssetFilledAmount,\n        uint256 rightOrderTakerAssetFilledAmount,\n        uint256 protocolFeeMultiplier,\n        uint256 gasPrice,\n        bool shouldMaximallyFillOrders\n    )\n        internal\n        pure\n        returns (MatchedFillResults memory matchedFillResults)\n    {\n        // Derive maker asset amounts for left & right orders, given store taker assert amounts\n        uint256 leftTakerAssetAmountRemaining = leftOrder.takerAssetAmount.safeSub(leftOrderTakerAssetFilledAmount);\n        uint256 leftMakerAssetAmountRemaining = LibMath.safeGetPartialAmountFloor(\n            leftOrder.makerAssetAmount,\n            leftOrder.takerAssetAmount,\n            leftTakerAssetAmountRemaining\n        );\n        uint256 rightTakerAssetAmountRemaining = rightOrder.takerAssetAmount.safeSub(rightOrderTakerAssetFilledAmount);\n        uint256 rightMakerAssetAmountRemaining = LibMath.safeGetPartialAmountFloor(\n            rightOrder.makerAssetAmount,\n            rightOrder.takerAssetAmount,\n            rightTakerAssetAmountRemaining\n        );\n\n        // Maximally fill the orders and pay out profits to the matcher in one or both of the maker assets.\n        if (shouldMaximallyFillOrders) {\n            matchedFillResults = _calculateMatchedFillResultsWithMaximalFill(\n                leftOrder,\n                rightOrder,\n                leftMakerAssetAmountRemaining,\n                leftTakerAssetAmountRemaining,\n                rightMakerAssetAmountRemaining,\n                rightTakerAssetAmountRemaining\n            );\n        } else {\n            matchedFillResults = _calculateMatchedFillResults(\n                leftOrder,\n                rightOrder,\n                leftMakerAssetAmountRemaining,\n                leftTakerAssetAmountRemaining,\n                rightMakerAssetAmountRemaining,\n                rightTakerAssetAmountRemaining\n            );\n        }\n\n        // Compute fees for left order\n        matchedFillResults.left.makerFeePaid = LibMath.safeGetPartialAmountFloor(\n            matchedFillResults.left.makerAssetFilledAmount,\n            leftOrder.makerAssetAmount,\n            leftOrder.makerFee\n        );\n        matchedFillResults.left.takerFeePaid = LibMath.safeGetPartialAmountFloor(\n            matchedFillResults.left.takerAssetFilledAmount,\n            leftOrder.takerAssetAmount,\n            leftOrder.takerFee\n        );\n\n        // Compute fees for right order\n        matchedFillResults.right.makerFeePaid = LibMath.safeGetPartialAmountFloor(\n            matchedFillResults.right.makerAssetFilledAmount,\n            rightOrder.makerAssetAmount,\n            rightOrder.makerFee\n        );\n        matchedFillResults.right.takerFeePaid = LibMath.safeGetPartialAmountFloor(\n            matchedFillResults.right.takerAssetFilledAmount,\n            rightOrder.takerAssetAmount,\n            rightOrder.takerFee\n        );\n\n        // Compute the protocol fee that should be paid for a single fill. In this\n        // case this should be made the protocol fee for both the left and right orders.\n        uint256 protocolFee = gasPrice.safeMul(protocolFeeMultiplier);\n        matchedFillResults.left.protocolFeePaid = protocolFee;\n        matchedFillResults.right.protocolFeePaid = protocolFee;\n\n        // Return fill results\n        return matchedFillResults;\n    }\n\n    /// @dev Adds properties of both FillResults instances.\n    /// @param fillResults1 The first FillResults.\n    /// @param fillResults2 The second FillResults.\n    /// @return The sum of both fill results.\n    function addFillResults(\n        FillResults memory fillResults1,\n        FillResults memory fillResults2\n    )\n        internal\n        pure\n        returns (FillResults memory totalFillResults)\n    {\n        totalFillResults.makerAssetFilledAmount = fillResults1.makerAssetFilledAmount.safeAdd(fillResults2.makerAssetFilledAmount);\n        totalFillResults.takerAssetFilledAmount = fillResults1.takerAssetFilledAmount.safeAdd(fillResults2.takerAssetFilledAmount);\n        totalFillResults.makerFeePaid = fillResults1.makerFeePaid.safeAdd(fillResults2.makerFeePaid);\n        totalFillResults.takerFeePaid = fillResults1.takerFeePaid.safeAdd(fillResults2.takerFeePaid);\n        totalFillResults.protocolFeePaid = fillResults1.protocolFeePaid.safeAdd(fillResults2.protocolFeePaid);\n\n        return totalFillResults;\n    }\n\n    /// @dev Calculates part of the matched fill results for a given situation using the fill strategy that only\n    ///      awards profit denominated in the left maker asset.\n    /// @param leftOrder The left order in the order matching situation.\n    /// @param rightOrder The right order in the order matching situation.\n    /// @param leftMakerAssetAmountRemaining The amount of the left order maker asset that can still be filled.\n    /// @param leftTakerAssetAmountRemaining The amount of the left order taker asset that can still be filled.\n    /// @param rightMakerAssetAmountRemaining The amount of the right order maker asset that can still be filled.\n    /// @param rightTakerAssetAmountRemaining The amount of the right order taker asset that can still be filled.\n    /// @return MatchFillResults struct that does not include fees paid.\n    function _calculateMatchedFillResults(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        uint256 leftMakerAssetAmountRemaining,\n        uint256 leftTakerAssetAmountRemaining,\n        uint256 rightMakerAssetAmountRemaining,\n        uint256 rightTakerAssetAmountRemaining\n    )\n        private\n        pure\n        returns (MatchedFillResults memory matchedFillResults)\n    {\n        // Calculate fill results for maker and taker assets: at least one order will be fully filled.\n        // The maximum amount the left maker can buy is `leftTakerAssetAmountRemaining`\n        // The maximum amount the right maker can sell is `rightMakerAssetAmountRemaining`\n        // We have two distinct cases for calculating the fill results:\n        // Case 1.\n        //   If the left maker can buy more than the right maker can sell, then only the right order is fully filled.\n        //   If the left maker can buy exactly what the right maker can sell, then both orders are fully filled.\n        // Case 2.\n        //   If the left maker cannot buy more than the right maker can sell, then only the left order is fully filled.\n        // Case 3.\n        //   If the left maker can buy exactly as much as the right maker can sell, then both orders are fully filled.\n        if (leftTakerAssetAmountRemaining > rightMakerAssetAmountRemaining) {\n            // Case 1: Right order is fully filled\n            matchedFillResults = _calculateCompleteRightFill(\n                leftOrder,\n                rightMakerAssetAmountRemaining,\n                rightTakerAssetAmountRemaining\n            );\n        } else if (leftTakerAssetAmountRemaining < rightMakerAssetAmountRemaining) {\n            // Case 2: Left order is fully filled\n            matchedFillResults.left.makerAssetFilledAmount = leftMakerAssetAmountRemaining;\n            matchedFillResults.left.takerAssetFilledAmount = leftTakerAssetAmountRemaining;\n            matchedFillResults.right.makerAssetFilledAmount = leftTakerAssetAmountRemaining;\n            // Round up to ensure the maker's exchange rate does not exceed the price specified by the order.\n            // We favor the maker when the exchange rate must be rounded.\n            matchedFillResults.right.takerAssetFilledAmount = LibMath.safeGetPartialAmountCeil(\n                rightOrder.takerAssetAmount,\n                rightOrder.makerAssetAmount,\n                leftTakerAssetAmountRemaining // matchedFillResults.right.makerAssetFilledAmount\n            );\n        } else {\n            // leftTakerAssetAmountRemaining == rightMakerAssetAmountRemaining\n            // Case 3: Both orders are fully filled. Technically, this could be captured by the above cases, but\n            //         this calculation will be more precise since it does not include rounding.\n            matchedFillResults = _calculateCompleteFillBoth(\n                leftMakerAssetAmountRemaining,\n                leftTakerAssetAmountRemaining,\n                rightMakerAssetAmountRemaining,\n                rightTakerAssetAmountRemaining\n            );\n        }\n\n        // Calculate amount given to taker\n        matchedFillResults.profitInLeftMakerAsset = matchedFillResults.left.makerAssetFilledAmount.safeSub(\n            matchedFillResults.right.takerAssetFilledAmount\n        );\n\n        return matchedFillResults;\n    }\n\n    /// @dev Calculates part of the matched fill results for a given situation using the maximal fill order matching\n    ///      strategy.\n    /// @param leftOrder The left order in the order matching situation.\n    /// @param rightOrder The right order in the order matching situation.\n    /// @param leftMakerAssetAmountRemaining The amount of the left order maker asset that can still be filled.\n    /// @param leftTakerAssetAmountRemaining The amount of the left order taker asset that can still be filled.\n    /// @param rightMakerAssetAmountRemaining The amount of the right order maker asset that can still be filled.\n    /// @param rightTakerAssetAmountRemaining The amount of the right order taker asset that can still be filled.\n    /// @return MatchFillResults struct that does not include fees paid.\n    function _calculateMatchedFillResultsWithMaximalFill(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        uint256 leftMakerAssetAmountRemaining,\n        uint256 leftTakerAssetAmountRemaining,\n        uint256 rightMakerAssetAmountRemaining,\n        uint256 rightTakerAssetAmountRemaining\n    )\n        private\n        pure\n        returns (MatchedFillResults memory matchedFillResults)\n    {\n        // If a maker asset is greater than the opposite taker asset, than there will be a spread denominated in that maker asset.\n        bool doesLeftMakerAssetProfitExist = leftMakerAssetAmountRemaining > rightTakerAssetAmountRemaining;\n        bool doesRightMakerAssetProfitExist = rightMakerAssetAmountRemaining > leftTakerAssetAmountRemaining;\n\n        // Calculate the maximum fill results for the maker and taker assets. At least one of the orders will be fully filled.\n        //\n        // The maximum that the left maker can possibly buy is the amount that the right order can sell.\n        // The maximum that the right maker can possibly buy is the amount that the left order can sell.\n        //\n        // If the left order is fully filled, profit will be paid out in the left maker asset. If the right order is fully filled,\n        // the profit will be out in the right maker asset.\n        //\n        // There are three cases to consider:\n        // Case 1.\n        //   If the left maker can buy more than the right maker can sell, then only the right order is fully filled.\n        // Case 2.\n        //   If the right maker can buy more than the left maker can sell, then only the right order is fully filled.\n        // Case 3.\n        //   If the right maker can sell the max of what the left maker can buy and the left maker can sell the max of\n        //   what the right maker can buy, then both orders are fully filled.\n        if (leftTakerAssetAmountRemaining > rightMakerAssetAmountRemaining) {\n            // Case 1: Right order is fully filled with the profit paid in the left makerAsset\n            matchedFillResults = _calculateCompleteRightFill(\n                leftOrder,\n                rightMakerAssetAmountRemaining,\n                rightTakerAssetAmountRemaining\n            );\n        } else if (rightTakerAssetAmountRemaining > leftMakerAssetAmountRemaining) {\n            // Case 2: Left order is fully filled with the profit paid in the right makerAsset.\n            matchedFillResults.left.makerAssetFilledAmount = leftMakerAssetAmountRemaining;\n            matchedFillResults.left.takerAssetFilledAmount = leftTakerAssetAmountRemaining;\n            // Round down to ensure the right maker's exchange rate does not exceed the price specified by the order.\n            // We favor the right maker when the exchange rate must be rounded and the profit is being paid in the\n            // right maker asset.\n            matchedFillResults.right.makerAssetFilledAmount = LibMath.safeGetPartialAmountFloor(\n                rightOrder.makerAssetAmount,\n                rightOrder.takerAssetAmount,\n                leftMakerAssetAmountRemaining\n            );\n            matchedFillResults.right.takerAssetFilledAmount = leftMakerAssetAmountRemaining;\n        } else {\n            // Case 3: The right and left orders are fully filled\n            matchedFillResults = _calculateCompleteFillBoth(\n                leftMakerAssetAmountRemaining,\n                leftTakerAssetAmountRemaining,\n                rightMakerAssetAmountRemaining,\n                rightTakerAssetAmountRemaining\n            );\n        }\n\n        // Calculate amount given to taker in the left order's maker asset if the left spread will be part of the profit.\n        if (doesLeftMakerAssetProfitExist) {\n            matchedFillResults.profitInLeftMakerAsset = matchedFillResults.left.makerAssetFilledAmount.safeSub(\n                matchedFillResults.right.takerAssetFilledAmount\n            );\n        }\n\n        // Calculate amount given to taker in the right order's maker asset if the right spread will be part of the profit.\n        if (doesRightMakerAssetProfitExist) {\n            matchedFillResults.profitInRightMakerAsset = matchedFillResults.right.makerAssetFilledAmount.safeSub(\n                matchedFillResults.left.takerAssetFilledAmount\n            );\n        }\n\n        return matchedFillResults;\n    }\n\n    /// @dev Calculates the fill results for the maker and taker in the order matching and writes the results\n    ///      to the fillResults that are being collected on the order. Both orders will be fully filled in this\n    ///      case.\n    /// @param leftMakerAssetAmountRemaining The amount of the left maker asset that is remaining to be filled.\n    /// @param leftTakerAssetAmountRemaining The amount of the left taker asset that is remaining to be filled.\n    /// @param rightMakerAssetAmountRemaining The amount of the right maker asset that is remaining to be filled.\n    /// @param rightTakerAssetAmountRemaining The amount of the right taker asset that is remaining to be filled.\n    /// @return MatchFillResults struct that does not include fees paid or spreads taken.\n    function _calculateCompleteFillBoth(\n        uint256 leftMakerAssetAmountRemaining,\n        uint256 leftTakerAssetAmountRemaining,\n        uint256 rightMakerAssetAmountRemaining,\n        uint256 rightTakerAssetAmountRemaining\n    )\n        private\n        pure\n        returns (MatchedFillResults memory matchedFillResults)\n    {\n        // Calculate the fully filled results for both orders.\n        matchedFillResults.left.makerAssetFilledAmount = leftMakerAssetAmountRemaining;\n        matchedFillResults.left.takerAssetFilledAmount = leftTakerAssetAmountRemaining;\n        matchedFillResults.right.makerAssetFilledAmount = rightMakerAssetAmountRemaining;\n        matchedFillResults.right.takerAssetFilledAmount = rightTakerAssetAmountRemaining;\n\n        return matchedFillResults;\n    }\n\n    /// @dev Calculates the fill results for the maker and taker in the order matching and writes the results\n    ///      to the fillResults that are being collected on the order.\n    /// @param leftOrder The left order that is being maximally filled. All of the information about fill amounts\n    ///                  can be derived from this order and the right asset remaining fields.\n    /// @param rightMakerAssetAmountRemaining The amount of the right maker asset that is remaining to be filled.\n    /// @param rightTakerAssetAmountRemaining The amount of the right taker asset that is remaining to be filled.\n    /// @return MatchFillResults struct that does not include fees paid or spreads taken.\n    function _calculateCompleteRightFill(\n        LibOrder.Order memory leftOrder,\n        uint256 rightMakerAssetAmountRemaining,\n        uint256 rightTakerAssetAmountRemaining\n    )\n        private\n        pure\n        returns (MatchedFillResults memory matchedFillResults)\n    {\n        matchedFillResults.right.makerAssetFilledAmount = rightMakerAssetAmountRemaining;\n        matchedFillResults.right.takerAssetFilledAmount = rightTakerAssetAmountRemaining;\n        matchedFillResults.left.takerAssetFilledAmount = rightMakerAssetAmountRemaining;\n        // Round down to ensure the left maker's exchange rate does not exceed the price specified by the order.\n        // We favor the left maker when the exchange rate must be rounded and the profit is being paid in the\n        // left maker asset.\n        matchedFillResults.left.makerAssetFilledAmount = LibMath.safeGetPartialAmountFloor(\n            leftOrder.makerAssetAmount,\n            leftOrder.takerAssetAmount,\n            rightMakerAssetAmountRemaining\n        );\n\n        return matchedFillResults;\n    }\n}\n"
    },
    "contracts/exchange-libs/contracts/src/LibMath.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-utils/contracts/src/LibSafeMath.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibRichErrors.sol\";\nimport \"./LibMathRichErrors.sol\";\n\n\nlibrary LibMath {\n\n    using LibSafeMath for uint256;\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target rounded down.\n    function safeGetPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorFloor(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrors.rrevert(LibMathRichErrors.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target rounded up.\n    function safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorCeil(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrors.rrevert(LibMathRichErrors.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target rounded down.\n    function getPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target rounded up.\n    function getPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return Rounding error is present.\n    function isRoundingErrorFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrors.rrevert(LibMathRichErrors.DivisionByZeroError());\n        }\n\n        // The absolute rounding error is the difference between the rounded\n        // value and the ideal value. The relative rounding error is the\n        // absolute rounding error divided by the absolute value of the\n        // ideal value. This is undefined when the ideal value is zero.\n        //\n        // The ideal value is `numerator * target / denominator`.\n        // Let's call `numerator * target % denominator` the remainder.\n        // The absolute error is `remainder / denominator`.\n        //\n        // When the ideal value is zero, we require the absolute error to\n        // be zero. Fortunately, this is always the case. The ideal value is\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\n        // remainder and absolute error are also zero.\n        if (target == 0 || numerator == 0) {\n            return false;\n        }\n\n        // Otherwise, we want the relative rounding error to be strictly\n        // less than 0.1%.\n        // The relative error is `remainder / (numerator * target)`.\n        // We want the relative error less than 1 / 1000:\n        //        remainder / (numerator * denominator)  <  1 / 1000\n        // or equivalently:\n        //        1000 * remainder  <  numerator * target\n        // so we have a rounding error iff:\n        //        1000 * remainder  >=  numerator * target\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return Rounding error is present.\n    function isRoundingErrorCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrors.rrevert(LibMathRichErrors.DivisionByZeroError());\n        }\n\n        // See the comments in `isRoundingError`.\n        if (target == 0 || numerator == 0) {\n            // When either is zero, the ideal value and rounded value are zero\n            // and there is no rounding error. (Although the relative error\n            // is undefined.)\n            return false;\n        }\n        // Compute remainder as before\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        remainder = denominator.safeSub(remainder) % denominator;\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n}\n"
    },
    "contracts/exchange-libs/contracts/src/LibMathRichErrors.sol": {
      "content": "pragma solidity ^0.5.9;\n\n\nlibrary LibMathRichErrors {\n\n    // bytes4(keccak256(\"DivisionByZeroError()\"))\n    bytes internal constant DIVISION_BY_ZERO_ERROR =\n        hex\"a791837c\";\n\n    // bytes4(keccak256(\"RoundingError(uint256,uint256,uint256)\"))\n    bytes4 internal constant ROUNDING_ERROR_SELECTOR =\n        0x339f3de2;\n\n    // solhint-disable func-name-mixedcase\n    function DivisionByZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return DIVISION_BY_ZERO_ERROR;\n    }\n\n    function RoundingError(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ROUNDING_ERROR_SELECTOR,\n            numerator,\n            denominator,\n            target\n        );\n    }\n}\n"
    },
    "contracts/exchange-libs/contracts/test/TestLibMath.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"../src/LibMath.sol\";\n\n\ncontract TestLibMath {\n\n    /// @dev Calculates partial value given a numerator and denominator.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target.\n    function safeGetPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        public\n        pure\n        returns (uint256 partialAmount)\n    {\n        return LibMath.safeGetPartialAmountFloor(numerator, denominator, target);\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target.\n    function safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        public\n        pure\n        returns (uint256 partialAmount)\n    {\n        return LibMath.safeGetPartialAmountCeil(numerator, denominator, target);\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target.\n    function getPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        public\n        pure\n        returns (uint256 partialAmount)\n    {\n        return LibMath.getPartialAmountFloor(numerator, denominator, target);\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target.\n    function getPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        public\n        pure\n        returns (uint256 partialAmount)\n    {\n        return LibMath.getPartialAmountCeil(numerator, denominator, target);\n    }\n\n    /// @dev Checks if rounding error >= 0.1%.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return Rounding error is present.\n    function isRoundingErrorFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        public\n        pure\n        returns (bool isError)\n    {\n        return LibMath.isRoundingErrorFloor(numerator, denominator, target);\n    }\n\n    /// @dev Checks if rounding error >= 0.1%.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return Rounding error is present.\n    function isRoundingErrorCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        public\n        pure\n        returns (bool isError)\n    {\n        return LibMath.isRoundingErrorCeil(numerator, denominator, target);\n    }\n}\n"
    },
    "contracts/exchange-libs/contracts/src/LibExchangeRichErrors.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-utils/contracts/src/LibRichErrors.sol\";\nimport \"./LibOrder.sol\";\n\n\nlibrary LibExchangeRichErrors {\n\n    enum AssetProxyDispatchErrorCodes {\n        INVALID_ASSET_DATA_LENGTH,\n        UNKNOWN_ASSET_PROXY\n    }\n\n    enum BatchMatchOrdersErrorCodes {\n        ZERO_LEFT_ORDERS,\n        ZERO_RIGHT_ORDERS,\n        INVALID_LENGTH_LEFT_SIGNATURES,\n        INVALID_LENGTH_RIGHT_SIGNATURES\n    }\n\n    enum ExchangeContextErrorCodes {\n        INVALID_MAKER,\n        INVALID_TAKER,\n        INVALID_SENDER\n    }\n\n    enum FillErrorCodes {\n        INVALID_TAKER_AMOUNT,\n        TAKER_OVERPAY,\n        OVERFILL,\n        INVALID_FILL_PRICE\n    }\n\n    enum SignatureErrorCodes {\n        BAD_ORDER_SIGNATURE,\n        BAD_TRANSACTION_SIGNATURE,\n        INVALID_LENGTH,\n        UNSUPPORTED,\n        ILLEGAL,\n        INAPPROPRIATE_SIGNATURE_TYPE,\n        INVALID_SIGNER\n    }\n\n    enum TransactionErrorCodes {\n        ALREADY_EXECUTED,\n        EXPIRED\n    }\n\n    enum IncompleteFillErrorCode {\n        INCOMPLETE_MARKET_BUY_ORDERS,\n        INCOMPLETE_MARKET_SELL_ORDERS,\n        INCOMPLETE_FILL_ORDER\n    }\n\n    // bytes4(keccak256(\"SignatureError(uint8,bytes32,address,bytes)\"))\n    bytes4 internal constant SIGNATURE_ERROR_SELECTOR =\n        0x7e5a2318;\n\n    // bytes4(keccak256(\"SignatureValidatorNotApprovedError(address,address)\"))\n    bytes4 internal constant SIGNATURE_VALIDATOR_NOT_APPROVED_ERROR_SELECTOR =\n        0xa15c0d06;\n\n    // bytes4(keccak256(\"EIP1271SignatureError(address,bytes,bytes,bytes)\"))\n    bytes4 internal constant EIP1271_SIGNATURE_ERROR_SELECTOR =\n        0x5bd0428d;\n\n    // bytes4(keccak256(\"SignatureWalletError(bytes32,address,bytes,bytes)\"))\n    bytes4 internal constant SIGNATURE_WALLET_ERROR_SELECTOR =\n        0x1b8388f7;\n\n    // bytes4(keccak256(\"OrderStatusError(bytes32,uint8)\"))\n    bytes4 internal constant ORDER_STATUS_ERROR_SELECTOR =\n        0xfdb6ca8d;\n\n    // bytes4(keccak256(\"ExchangeInvalidContextError(uint8,bytes32,address)\"))\n    bytes4 internal constant EXCHANGE_INVALID_CONTEXT_ERROR_SELECTOR =\n        0xe53c76c8;\n\n    // bytes4(keccak256(\"FillError(uint8,bytes32)\"))\n    bytes4 internal constant FILL_ERROR_SELECTOR =\n        0xe94a7ed0;\n\n    // bytes4(keccak256(\"OrderEpochError(address,address,uint256)\"))\n    bytes4 internal constant ORDER_EPOCH_ERROR_SELECTOR =\n        0x4ad31275;\n\n    // bytes4(keccak256(\"AssetProxyExistsError(bytes4,address)\"))\n    bytes4 internal constant ASSET_PROXY_EXISTS_ERROR_SELECTOR =\n        0x11c7b720;\n\n    // bytes4(keccak256(\"AssetProxyDispatchError(uint8,bytes32,bytes)\"))\n    bytes4 internal constant ASSET_PROXY_DISPATCH_ERROR_SELECTOR =\n        0x488219a6;\n\n    // bytes4(keccak256(\"AssetProxyTransferError(bytes32,bytes,bytes)\"))\n    bytes4 internal constant ASSET_PROXY_TRANSFER_ERROR_SELECTOR =\n        0x4678472b;\n\n    // bytes4(keccak256(\"NegativeSpreadError(bytes32,bytes32)\"))\n    bytes4 internal constant NEGATIVE_SPREAD_ERROR_SELECTOR =\n        0xb6555d6f;\n\n    // bytes4(keccak256(\"TransactionError(uint8,bytes32)\"))\n    bytes4 internal constant TRANSACTION_ERROR_SELECTOR =\n        0xf5985184;\n\n    // bytes4(keccak256(\"TransactionExecutionError(bytes32,bytes)\"))\n    bytes4 internal constant TRANSACTION_EXECUTION_ERROR_SELECTOR =\n        0x20d11f61;\n    \n    // bytes4(keccak256(\"TransactionGasPriceError(bytes32,uint256,uint256)\"))\n    bytes4 internal constant TRANSACTION_GAS_PRICE_ERROR_SELECTOR =\n        0xa26dac09;\n\n    // bytes4(keccak256(\"TransactionInvalidContextError(bytes32,address)\"))\n    bytes4 internal constant TRANSACTION_INVALID_CONTEXT_ERROR_SELECTOR =\n        0xdec4aedf;\n\n    // bytes4(keccak256(\"IncompleteFillError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INCOMPLETE_FILL_ERROR_SELECTOR =\n        0x18e4b141;\n\n    // bytes4(keccak256(\"BatchMatchOrdersError(uint8)\"))\n    bytes4 internal constant BATCH_MATCH_ORDERS_ERROR_SELECTOR =\n        0xd4092f4f;\n\n    // bytes4(keccak256(\"PayProtocolFeeError(bytes32,uint256,address,address,bytes)\"))\n    bytes4 internal constant PAY_PROTOCOL_FEE_ERROR_SELECTOR =\n        0x87cb1e75;\n\n    // solhint-disable func-name-mixedcase\n    function SignatureErrorSelector()\n        internal\n        pure\n        returns (bytes4)\n    {\n        return SIGNATURE_ERROR_SELECTOR;\n    }\n\n    function SignatureValidatorNotApprovedErrorSelector()\n        internal\n        pure\n        returns (bytes4)\n    {\n        return SIGNATURE_VALIDATOR_NOT_APPROVED_ERROR_SELECTOR;\n    }\n\n    function EIP1271SignatureErrorSelector()\n        internal\n        pure\n        returns (bytes4)\n    {\n        return EIP1271_SIGNATURE_ERROR_SELECTOR;\n    }\n\n    function SignatureWalletErrorSelector()\n        internal\n        pure\n        returns (bytes4)\n    {\n        return SIGNATURE_WALLET_ERROR_SELECTOR;\n    }\n\n    function OrderStatusErrorSelector()\n        internal\n        pure\n        returns (bytes4)\n    {\n        return ORDER_STATUS_ERROR_SELECTOR;\n    }\n\n    function ExchangeInvalidContextErrorSelector()\n        internal\n        pure\n        returns (bytes4)\n    {\n        return EXCHANGE_INVALID_CONTEXT_ERROR_SELECTOR;\n    }\n\n    function FillErrorSelector()\n        internal\n        pure\n        returns (bytes4)\n    {\n        return FILL_ERROR_SELECTOR;\n    }\n\n    function OrderEpochErrorSelector()\n        internal\n        pure\n        returns (bytes4)\n    {\n        return ORDER_EPOCH_ERROR_SELECTOR;\n    }\n\n    function AssetProxyExistsErrorSelector()\n        internal\n        pure\n        returns (bytes4)\n    {\n        return ASSET_PROXY_EXISTS_ERROR_SELECTOR;\n    }\n\n    function AssetProxyDispatchErrorSelector()\n        internal\n        pure\n        returns (bytes4)\n    {\n        return ASSET_PROXY_DISPATCH_ERROR_SELECTOR;\n    }\n\n    function AssetProxyTransferErrorSelector()\n        internal\n        pure\n        returns (bytes4)\n    {\n        return ASSET_PROXY_TRANSFER_ERROR_SELECTOR;\n    }\n\n    function NegativeSpreadErrorSelector()\n        internal\n        pure\n        returns (bytes4)\n    {\n        return NEGATIVE_SPREAD_ERROR_SELECTOR;\n    }\n\n    function TransactionErrorSelector()\n        internal\n        pure\n        returns (bytes4)\n    {\n        return TRANSACTION_ERROR_SELECTOR;\n    }\n\n    function TransactionExecutionErrorSelector()\n        internal\n        pure\n        returns (bytes4)\n    {\n        return TRANSACTION_EXECUTION_ERROR_SELECTOR;\n    }\n\n    function IncompleteFillErrorSelector()\n        internal\n        pure\n        returns (bytes4)\n    {\n        return INCOMPLETE_FILL_ERROR_SELECTOR;\n    }\n\n    function BatchMatchOrdersErrorSelector()\n        internal\n        pure\n        returns (bytes4)\n    {\n        return BATCH_MATCH_ORDERS_ERROR_SELECTOR;\n    }\n\n    function TransactionGasPriceErrorSelector()\n        internal\n        pure\n        returns (bytes4)\n    {\n        return TRANSACTION_GAS_PRICE_ERROR_SELECTOR;\n    }\n\n    function TransactionInvalidContextErrorSelector()\n        internal\n        pure\n        returns (bytes4)\n    {\n        return TRANSACTION_INVALID_CONTEXT_ERROR_SELECTOR;\n    }\n\n    function PayProtocolFeeErrorSelector()\n        internal\n        pure\n        returns (bytes4)\n    {\n        return PAY_PROTOCOL_FEE_ERROR_SELECTOR;\n    }\n    \n    function BatchMatchOrdersError(\n        BatchMatchOrdersErrorCodes errorCode\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            BATCH_MATCH_ORDERS_ERROR_SELECTOR,\n            errorCode\n        );\n    }\n\n    function SignatureError(\n        SignatureErrorCodes errorCode,\n        bytes32 hash,\n        address signerAddress,\n        bytes memory signature\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            SIGNATURE_ERROR_SELECTOR,\n            errorCode,\n            hash,\n            signerAddress,\n            signature\n        );\n    }\n\n    function SignatureValidatorNotApprovedError(\n        address signerAddress,\n        address validatorAddress\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            SIGNATURE_VALIDATOR_NOT_APPROVED_ERROR_SELECTOR,\n            signerAddress,\n            validatorAddress\n        );\n    }\n\n    function EIP1271SignatureError(\n        address verifyingContractAddress,\n        bytes memory data,\n        bytes memory signature,\n        bytes memory errorData\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            EIP1271_SIGNATURE_ERROR_SELECTOR,\n            verifyingContractAddress,\n            data,\n            signature,\n            errorData\n        );\n    }\n\n    function SignatureWalletError(\n        bytes32 hash,\n        address walletAddress,\n        bytes memory signature,\n        bytes memory errorData\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            SIGNATURE_WALLET_ERROR_SELECTOR,\n            hash,\n            walletAddress,\n            signature,\n            errorData\n        );\n    }\n\n    function OrderStatusError(\n        bytes32 orderHash,\n        LibOrder.OrderStatus orderStatus\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ORDER_STATUS_ERROR_SELECTOR,\n            orderHash,\n            orderStatus\n        );\n    }\n\n    function ExchangeInvalidContextError(\n        ExchangeContextErrorCodes errorCode,\n        bytes32 orderHash,\n        address contextAddress\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            EXCHANGE_INVALID_CONTEXT_ERROR_SELECTOR,\n            errorCode,\n            orderHash,\n            contextAddress\n        );\n    }\n\n    function FillError(\n        FillErrorCodes errorCode,\n        bytes32 orderHash\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            FILL_ERROR_SELECTOR,\n            errorCode,\n            orderHash\n        );\n    }\n\n    function OrderEpochError(\n        address makerAddress,\n        address orderSenderAddress,\n        uint256 currentEpoch\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ORDER_EPOCH_ERROR_SELECTOR,\n            makerAddress,\n            orderSenderAddress,\n            currentEpoch\n        );\n    }\n\n    function AssetProxyExistsError(\n        bytes4 assetProxyId,\n        address assetProxyAddress\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ASSET_PROXY_EXISTS_ERROR_SELECTOR,\n            assetProxyId,\n            assetProxyAddress\n        );\n    }\n\n    function AssetProxyDispatchError(\n        AssetProxyDispatchErrorCodes errorCode,\n        bytes32 orderHash,\n        bytes memory assetData\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ASSET_PROXY_DISPATCH_ERROR_SELECTOR,\n            errorCode,\n            orderHash,\n            assetData\n        );\n    }\n\n    function AssetProxyTransferError(\n        bytes32 orderHash,\n        bytes memory assetData,\n        bytes memory errorData\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ASSET_PROXY_TRANSFER_ERROR_SELECTOR,\n            orderHash,\n            assetData,\n            errorData\n        );\n    }\n\n    function NegativeSpreadError(\n        bytes32 leftOrderHash,\n        bytes32 rightOrderHash\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            NEGATIVE_SPREAD_ERROR_SELECTOR,\n            leftOrderHash,\n            rightOrderHash\n        );\n    }\n\n    function TransactionError(\n        TransactionErrorCodes errorCode,\n        bytes32 transactionHash\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            TRANSACTION_ERROR_SELECTOR,\n            errorCode,\n            transactionHash\n        );\n    }\n\n    function TransactionExecutionError(\n        bytes32 transactionHash,\n        bytes memory errorData\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            TRANSACTION_EXECUTION_ERROR_SELECTOR,\n            transactionHash,\n            errorData\n        );\n    }\n\n    function TransactionGasPriceError(\n        bytes32 transactionHash,\n        uint256 actualGasPrice,\n        uint256 requiredGasPrice\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            TRANSACTION_GAS_PRICE_ERROR_SELECTOR,\n            transactionHash,\n            actualGasPrice,\n            requiredGasPrice\n        );\n    }\n\n    function TransactionInvalidContextError(\n        bytes32 transactionHash,\n        address currentContextAddress\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            TRANSACTION_INVALID_CONTEXT_ERROR_SELECTOR,\n            transactionHash,\n            currentContextAddress\n        );\n    }\n\n    function IncompleteFillError(\n        IncompleteFillErrorCode errorCode,\n        uint256 expectedAssetFillAmount,\n        uint256 actualAssetFillAmount\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INCOMPLETE_FILL_ERROR_SELECTOR,\n            errorCode,\n            expectedAssetFillAmount,\n            actualAssetFillAmount\n        );\n    }\n\n    function PayProtocolFeeError(\n        bytes32 orderHash,\n        uint256 protocolFee,\n        address makerAddress,\n        address takerAddress,\n        bytes memory errorData\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            PAY_PROTOCOL_FEE_ERROR_SELECTOR,\n            orderHash,\n            protocolFee,\n            makerAddress,\n            takerAddress,\n            errorData\n        );\n    }\n}\n"
    },
    "contracts/exchange-libs/contracts/src/LibEIP712ExchangeDomain.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-utils/contracts/src/LibEIP712.sol\";\n\n\ncontract LibEIP712ExchangeDomain {\n\n    // EIP712 Exchange Domain Name value\n    string constant internal _EIP712_EXCHANGE_DOMAIN_NAME = \"0x Protocol\";\n\n    // EIP712 Exchange Domain Version value\n    string constant internal _EIP712_EXCHANGE_DOMAIN_VERSION = \"3.0.0\";\n\n    // solhint-disable var-name-mixedcase\n    /// @dev Hash of the EIP712 Domain Separator data\n    /// @return 0 Domain hash.\n    bytes32 public EIP712_EXCHANGE_DOMAIN_HASH;\n    // solhint-enable var-name-mixedcase\n\n    /// @param chainId Chain ID of the network this contract is deployed on.\n    /// @param verifyingContractAddressIfExists Address of the verifying contract (null if the address of this contract)\n    constructor (\n        uint256 chainId,\n        address verifyingContractAddressIfExists\n    )\n        public\n    {\n        address verifyingContractAddress = verifyingContractAddressIfExists == address(0) ? address(this) : verifyingContractAddressIfExists;\n        EIP712_EXCHANGE_DOMAIN_HASH = LibEIP712.hashEIP712Domain(\n            _EIP712_EXCHANGE_DOMAIN_NAME,\n            _EIP712_EXCHANGE_DOMAIN_VERSION,\n            chainId,\n            verifyingContractAddress\n        );\n    }\n}\n"
    },
    "contracts/exchange-libs/contracts/test/TestLibEIP712ExchangeDomain.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"../src/LibEIP712ExchangeDomain.sol\";\n\n\ncontract TestLibEIP712ExchangeDomain is \n    LibEIP712ExchangeDomain\n{\n\n    constructor(\n        uint256 chainId,\n        address verifyingContractAddressIfExists\n    )\n        public\n        LibEIP712ExchangeDomain(chainId, verifyingContractAddressIfExists)\n    {}\n}\n"
    },
    "@0x/contracts-erc20/contracts/src/ERC20Token.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"./interfaces/IERC20Token.sol\";\n\n\ncontract ERC20Token is\n    IERC20Token\n{\n    mapping (address => uint256) internal balances;\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n    uint256 internal _totalSupply;\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address _to, uint256 _value)\n        external\n        returns (bool)\n    {\n        require(\n            balances[msg.sender] >= _value,\n            \"ERC20_INSUFFICIENT_BALANCE\"\n        );\n        require(\n            balances[_to] + _value >= balances[_to],\n            \"UINT256_OVERFLOW\"\n        );\n\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n\n        emit Transfer(\n            msg.sender,\n            _to,\n            _value\n        );\n\n        return true;\n    }\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    )\n        external\n        returns (bool)\n    {\n        require(\n            balances[_from] >= _value,\n            \"ERC20_INSUFFICIENT_BALANCE\"\n        );\n        require(\n            allowed[_from][msg.sender] >= _value,\n            \"ERC20_INSUFFICIENT_ALLOWANCE\"\n        );\n        require(\n            balances[_to] + _value >= balances[_to],\n            \"UINT256_OVERFLOW\"\n        );\n\n        balances[_to] += _value;\n        balances[_from] -= _value;\n        allowed[_from][msg.sender] -= _value;\n\n        emit Transfer(\n            _from,\n            _to,\n            _value\n        );\n\n        return true;\n    }\n\n    /// @dev `msg.sender` approves `_spender` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address _spender, uint256 _value)\n        external\n        returns (bool)\n    {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(\n            msg.sender,\n            _spender,\n            _value\n        );\n        return true;\n    }\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256)\n    {\n        return _totalSupply;\n    }\n\n    /// @dev Query the balance of owner\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address _owner)\n        external\n        view\n        returns (uint256)\n    {\n        return balances[_owner];\n    }\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender)\n        external\n        view\n        returns (uint256)\n    {\n        return allowed[_owner][_spender];\n    }\n}\n"
    },
    "contracts/asset-proxy/contracts/test/TestChaiBridge.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"../src/bridges/ChaiBridge.sol\";\nimport \"@0x/contracts-erc20/contracts/src/ERC20Token.sol\";\n\n\ncontract TestChaiDai is\n    ERC20Token\n{\n    address private constant ALWAYS_REVERT_ADDRESS = address(1);\n\n    function draw(\n        address from,\n        uint256 amount\n    )\n        external\n    {\n        if (from == ALWAYS_REVERT_ADDRESS) {\n            revert();\n        }\n        balances[msg.sender] += amount;\n    }\n}\n\n\ncontract TestChaiBridge is\n    ChaiBridge\n{\n    address public testChaiDai;\n    address private constant ALWAYS_REVERT_ADDRESS = address(1);\n\n    constructor()\n        public\n    {\n        testChaiDai = address(new TestChaiDai());\n    }\n\n    function _getDaiAddress()\n        internal\n        view\n        returns (address)\n    {\n        return testChaiDai;\n    }\n\n    function _getChaiAddress()\n        internal\n        view\n        returns (address)\n    {\n        return testChaiDai;\n    }\n\n    function _getERC20BridgeProxyAddress()\n        internal\n        view\n        returns (address)\n    {\n        return msg.sender == ALWAYS_REVERT_ADDRESS ? address(0) : msg.sender;\n    }\n}\n"
    },
    "contracts/asset-proxy/contracts/src/bridges/ChaiBridge.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"../interfaces/IERC20Bridge.sol\";\nimport \"../interfaces/IChai.sol\";\nimport \"@0x/contracts-utils/contracts/src/DeploymentConstants.sol\";\nimport \"@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol\";\n\n\n// solhint-disable space-after-comma\ncontract ChaiBridge is\n    IERC20Bridge,\n    DeploymentConstants\n{\n    /// @dev Withdraws `amount` of `from` address's Dai from the Chai contract.\n    ///      Transfers `amount` of Dai to `to` address.\n    /// @param from Address to transfer asset from.\n    /// @param to Address to transfer asset to.\n    /// @param amount Amount of asset to transfer.\n    /// @return success The magic bytes `0xdc1600f3` if successful.\n    function bridgeTransferFrom(\n        address /* tokenAddress */,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata /* bridgeData */\n    )\n        external\n        returns (bytes4 success)\n    {\n        // Ensure that only the `ERC20BridgeProxy` can call this function.\n        require(\n            msg.sender == _getERC20BridgeProxyAddress(),\n            \"ChaiBridge/ONLY_CALLABLE_BY_ERC20_BRIDGE_PROXY\"\n        );\n\n        // Withdraw `from` address's Dai.\n        // NOTE: This contract must be approved to spend Chai on behalf of `from`.\n        bytes memory drawCalldata = abi.encodeWithSelector(\n            IChai(address(0)).draw.selector,\n            from,\n            amount\n        );\n\n        (bool success,) = _getChaiAddress().call(drawCalldata);\n        require(\n            success,\n            \"ChaiBridge/DRAW_DAI_FAILED\"\n        );\n\n        // Transfer Dai to `to`\n        // This will never fail if the `draw` call was successful\n        IERC20Token(_getDaiAddress()).transfer(to, amount);\n\n        return BRIDGE_SUCCESS;\n    }\n}\n"
    },
    "contracts/asset-proxy/contracts/src/interfaces/IChai.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol\";\n\n\ncontract PotLike {\n    function chi() external returns (uint256);\n    function rho() external returns (uint256);\n    function drip() external returns (uint256);\n    function join(uint256) external;\n    function exit(uint256) external;\n}\n\n\n// The actual Chai contract can be found here: https://github.com/dapphub/chai\ncontract IChai is\n    IERC20Token\n{\n    /// @dev Withdraws Dai owned by `src`\n    /// @param src Address that owns Dai.\n    /// @param wad Amount of Dai to withdraw.\n    function draw(\n        address src,\n        uint256 wad\n    )\n        external;\n\n    /// @dev Queries Dai balance of Chai holder.\n    /// @param usr Address of Chai holder.\n    /// @return Dai balance.\n    function dai(address usr)\n        external\n        returns (uint256);\n\n    /// @dev Queries the Pot contract used by the Chai contract.\n    function pot()\n        external\n        returns (PotLike);\n\n    /// @dev Deposits Dai in exchange for Chai\n    /// @param dst Address to receive Chai.\n    /// @param wad Amount of Dai to deposit.\n    function join(\n        address dst,\n        uint256 wad\n    )\n        external;\n}\n"
    },
    "contracts/erc20/contracts/test/DummyERC20Token.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\n\nimport \"@0x/contracts-utils/contracts/src/LibSafeMath.sol\";\nimport \"@0x/contracts-utils/contracts/src/Ownable.sol\";\nimport \"../src/MintableERC20Token.sol\";\n\n\ncontract DummyERC20Token is\n    Ownable,\n    MintableERC20Token\n{\n    using LibSafeMath for uint256;\n\n    string public name;\n    string public symbol;\n    uint256 public decimals;\n    uint256 public constant MAX_MINT_AMOUNT = 10000000000000000000000;\n\n    constructor (\n        string memory _name,\n        string memory _symbol,\n        uint256 _decimals,\n        uint256 _totalSupply\n    )\n        public\n    {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n        _totalSupply = _totalSupply;\n        balances[msg.sender] = _totalSupply;\n    }\n\n    /// @dev Sets the balance of target address\n    /// @param _target Address or which balance will be updated\n    /// @param _value New balance of target address\n    function setBalance(address _target, uint256 _value)\n        external\n        onlyOwner\n    {\n        uint256 currBalance = balances[_target];\n        if (_value < currBalance) {\n            _totalSupply = _totalSupply.safeSub(currBalance.safeSub(_value));\n        } else {\n            _totalSupply = _totalSupply.safeAdd(_value.safeSub(currBalance));\n        }\n        balances[_target] = _value;\n    }\n\n    /// @dev Mints new tokens for sender\n    /// @param _value Amount of tokens to mint\n    function mint(uint256 _value)\n        external\n    {\n        require(\n            _value <= MAX_MINT_AMOUNT,\n            \"VALUE_TOO_LARGE\"\n        );\n\n        _mint(msg.sender, _value);\n    }\n}\n"
    },
    "contracts/erc20/contracts/src/MintableERC20Token.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-utils/contracts/src/LibSafeMath.sol\";\nimport \"./UnlimitedAllowanceERC20Token.sol\";\n\n\ncontract MintableERC20Token is\n    UnlimitedAllowanceERC20Token\n{\n    using LibSafeMath for uint256;\n\n    /// @dev Mints new tokens\n    /// @param _to Address of the beneficiary that will own the minted token\n    /// @param _value Amount of tokens to mint\n    function _mint(address _to, uint256 _value)\n        internal\n    {\n        balances[_to] = _value.safeAdd(balances[_to]);\n        _totalSupply = _totalSupply.safeAdd(_value);\n\n        emit Transfer(\n            address(0),\n            _to,\n            _value\n        );\n    }\n\n    /// @dev Mints new tokens\n    /// @param _owner Owner of tokens that will be burned\n    /// @param _value Amount of tokens to burn\n    function _burn(address _owner, uint256 _value)\n        internal\n    {\n        balances[_owner] = balances[_owner].safeSub(_value);\n        _totalSupply = _totalSupply.safeSub(_value);\n\n        emit Transfer(\n            _owner,\n            address(0),\n            _value\n        );\n    }\n}\n"
    },
    "contracts/erc20/contracts/src/UnlimitedAllowanceERC20Token.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"./ERC20Token.sol\";\n\n\ncontract UnlimitedAllowanceERC20Token is\n    ERC20Token\n{\n    uint256 constant internal MAX_UINT = 2**256 - 1;\n\n    /// @dev ERC20 transferFrom, modified such that an allowance of MAX_UINT represents an unlimited allowance. See https://github.com/ethereum/EIPs/issues/717\n    /// @param _from Address to transfer from.\n    /// @param _to Address to transfer to.\n    /// @param _value Amount to transfer.\n    /// @return Success of transfer.\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    )\n        external\n        returns (bool)\n    {\n        uint256 allowance = allowed[_from][msg.sender];\n        require(\n            balances[_from] >= _value,\n            \"ERC20_INSUFFICIENT_BALANCE\"\n        );\n        require(\n            allowance >= _value,\n            \"ERC20_INSUFFICIENT_ALLOWANCE\"\n        );\n        require(\n            balances[_to] + _value >= balances[_to],\n            \"UINT256_OVERFLOW\"\n        );\n\n        balances[_to] += _value;\n        balances[_from] -= _value;\n        if (allowance < MAX_UINT) {\n            allowed[_from][msg.sender] -= _value;\n        }\n\n        emit Transfer(\n            _from,\n            _to,\n            _value\n        );\n\n        return true;\n    }\n}\n"
    },
    "contracts/erc20/contracts/src/ERC20Token.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"./interfaces/IERC20Token.sol\";\n\n\ncontract ERC20Token is\n    IERC20Token\n{\n    mapping (address => uint256) internal balances;\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n    uint256 internal _totalSupply;\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address _to, uint256 _value)\n        external\n        returns (bool)\n    {\n        require(\n            balances[msg.sender] >= _value,\n            \"ERC20_INSUFFICIENT_BALANCE\"\n        );\n        require(\n            balances[_to] + _value >= balances[_to],\n            \"UINT256_OVERFLOW\"\n        );\n\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n\n        emit Transfer(\n            msg.sender,\n            _to,\n            _value\n        );\n\n        return true;\n    }\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    )\n        external\n        returns (bool)\n    {\n        require(\n            balances[_from] >= _value,\n            \"ERC20_INSUFFICIENT_BALANCE\"\n        );\n        require(\n            allowed[_from][msg.sender] >= _value,\n            \"ERC20_INSUFFICIENT_ALLOWANCE\"\n        );\n        require(\n            balances[_to] + _value >= balances[_to],\n            \"UINT256_OVERFLOW\"\n        );\n\n        balances[_to] += _value;\n        balances[_from] -= _value;\n        allowed[_from][msg.sender] -= _value;\n\n        emit Transfer(\n            _from,\n            _to,\n            _value\n        );\n\n        return true;\n    }\n\n    /// @dev `msg.sender` approves `_spender` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address _spender, uint256 _value)\n        external\n        returns (bool)\n    {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(\n            msg.sender,\n            _spender,\n            _value\n        );\n        return true;\n    }\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256)\n    {\n        return _totalSupply;\n    }\n\n    /// @dev Query the balance of owner\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address _owner)\n        external\n        view\n        returns (uint256)\n    {\n        return balances[_owner];\n    }\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender)\n        external\n        view\n        returns (uint256)\n    {\n        return allowed[_owner][_spender];\n    }\n}\n"
    },
    "contracts/erc20/contracts/src/interfaces/IERC20Token.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ncontract IERC20Token {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed _from,\n        address indexed _to,\n        uint256 _value\n    );\n\n    event Approval(\n        address indexed _owner,\n        address indexed _spender,\n        uint256 _value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address _to, uint256 _value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `_spender` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address _spender, uint256 _value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address _owner)\n        external\n        view\n        returns (uint256);\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender)\n        external\n        view\n        returns (uint256);\n}\n"
    },
    "contracts/erc20/contracts/test/UntransferrableDummyERC20Token.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\n\nimport \"./DummyERC20Token.sol\";\n\n\n// solhint-disable no-empty-blocks\n// solhint-disable no-unused-vars\ncontract UntransferrableDummyERC20Token is\n    DummyERC20Token\n{\n    constructor (\n        string memory _name,\n        string memory _symbol,\n        uint256 _decimals,\n        uint256 _totalSupply\n    )\n        public\n        DummyERC20Token(\n            _name,\n            _symbol,\n            _decimals,\n            _totalSupply\n        )\n    {}\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    )\n        external\n        returns (bool)\n    {\n        require(\n            false,\n            \"TRANSFER_DISABLED\"\n        );\n    }\n}\n\n"
    },
    "contracts/erc20/contracts/test/DummyNoReturnERC20Token.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\n\nimport \"./DummyERC20Token.sol\";\n\n\n// solhint-disable no-empty-blocks\ncontract DummyNoReturnERC20Token is\n    DummyERC20Token\n{\n    constructor (\n        string memory _name,\n        string memory _symbol,\n        uint256 _decimals,\n        uint256 _totalSupply\n    )\n        public\n        DummyERC20Token(\n            _name,\n            _symbol,\n            _decimals,\n            _totalSupply\n        )\n    {}\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    function transfer(address _to, uint256 _value)\n        external\n        returns (bool)\n    {\n        require(\n            balances[msg.sender] >= _value,\n            \"ERC20_INSUFFICIENT_BALANCE\"\n        );\n        require(\n            balances[_to] + _value >= balances[_to],\n            \"UINT256_OVERFLOW\"\n        );\n\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n\n        emit Transfer(\n            msg.sender,\n            _to,\n            _value\n        );\n\n        // HACK: This contract will not compile if we remove `returns (bool)`, so we manually return no data\n        assembly {\n            return(0, 0)\n        }\n    }\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    )\n        external\n        returns (bool)\n    {\n        require(\n            balances[_from] >= _value,\n            \"ERC20_INSUFFICIENT_BALANCE\"\n        );\n        require(\n            allowed[_from][msg.sender] >= _value,\n            \"ERC20_INSUFFICIENT_ALLOWANCE\"\n        );\n        require(\n            balances[_to] + _value >= balances[_to],\n            \"UINT256_OVERFLOW\"\n        );\n\n        balances[_to] += _value;\n        balances[_from] -= _value;\n        allowed[_from][msg.sender] -= _value;\n    \n        emit Transfer(\n            _from,\n            _to,\n            _value\n        );\n\n        // HACK: This contract will not compile if we remove `returns (bool)`, so we manually return no data\n        assembly {\n            return(0, 0)\n        }\n    }\n}\n\n"
    },
    "contracts/erc20/contracts/test/DummyMultipleReturnERC20Token.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\n\nimport \"./DummyERC20Token.sol\";\n\n\n// solhint-disable no-empty-blocks\ncontract DummyMultipleReturnERC20Token is\n    DummyERC20Token\n{\n    constructor (\n        string memory _name,\n        string memory _symbol,\n        uint256 _decimals,\n        uint256 _totalSupply\n    )\n        public\n        DummyERC20Token(\n            _name,\n            _symbol,\n            _decimals,\n            _totalSupply\n        )\n    {}\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    )\n        external\n        returns (bool)\n    {\n        emit Transfer(\n            _from,\n            _to,\n            _value\n        );\n\n        // HACK: This contract will not compile if we remove `returns (bool)`, so we manually return 64 bytes (equiavalent to true, true)\n        assembly {\n            mstore(0, 1)\n            mstore(32, 1)\n            return(0, 64)\n        }\n    }\n}\n\n"
    },
    "contracts/erc20/contracts/src/LibERC20Token.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-utils/contracts/src/LibRichErrors.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\nimport \"../src/interfaces/IERC20Token.sol\";\n\n\nlibrary LibERC20Token {\n    bytes constant private DECIMALS_CALL_DATA = hex\"313ce567\";\n\n    /// @dev Calls `IERC20Token(token).approve()`.\n    ///      Reverts if `false` is returned or if the return\n    ///      data length is nonzero and not 32 bytes.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param allowance The allowance to set.\n    function approve(\n        address token,\n        address spender,\n        uint256 allowance\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            IERC20Token(0).approve.selector,\n            spender,\n            allowance\n        );\n        _callWithOptionalBooleanResult(token, callData);\n    }\n\n    /// @dev Calls `IERC20Token(token).approve()` and sets the allowance to the\n    ///      maximum if the current approval is not already >= an amount.\n    ///      Reverts if `false` is returned or if the return\n    ///      data length is nonzero and not 32 bytes.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param amount The minimum allowance needed.\n    function approveIfBelow(\n        address token,\n        address spender,\n        uint256 amount\n    )\n        internal\n    {\n        if (IERC20Token(token).allowance(address(this), spender) < amount) {\n            approve(token, spender, uint256(-1));\n        }\n    }\n\n    /// @dev Calls `IERC20Token(token).transfer()`.\n    ///      Reverts if `false` is returned or if the return\n    ///      data length is nonzero and not 32 bytes.\n    /// @param token The address of the token contract.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function transfer(\n        address token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            IERC20Token(0).transfer.selector,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(token, callData);\n    }\n\n    /// @dev Calls `IERC20Token(token).transferFrom()`.\n    ///      Reverts if `false` is returned or if the return\n    ///      data length is nonzero and not 32 bytes.\n    /// @param token The address of the token contract.\n    /// @param from The owner of the tokens.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function transferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            IERC20Token(0).transferFrom.selector,\n            from,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(token, callData);\n    }\n\n    /// @dev Retrieves the number of decimals for a token.\n    ///      Returns `18` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @return tokenDecimals The number of decimals places for the token.\n    function decimals(address token)\n        internal\n        view\n        returns (uint8 tokenDecimals)\n    {\n        tokenDecimals = 18;\n        (bool didSucceed, bytes memory resultData) = token.staticcall(DECIMALS_CALL_DATA);\n        if (didSucceed && resultData.length == 32) {\n            tokenDecimals = uint8(LibBytes.readUint256(resultData, 0));\n        }\n    }\n\n    /// @dev Retrieves the allowance for a token, owner, and spender.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @param spender The address the spender.\n    /// @return allowance The allowance for a token, owner, and spender.\n    function allowance(address token, address owner, address spender)\n        internal\n        view\n        returns (uint256 allowance_)\n    {\n        (bool didSucceed, bytes memory resultData) = token.staticcall(\n            abi.encodeWithSelector(\n                IERC20Token(0).allowance.selector,\n                owner,\n                spender\n            )\n        );\n        if (didSucceed && resultData.length == 32) {\n            allowance_ = LibBytes.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Retrieves the balance for a token owner.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @return balance The token balance of an owner.\n    function balanceOf(address token, address owner)\n        internal\n        view\n        returns (uint256 balance)\n    {\n        (bool didSucceed, bytes memory resultData) = token.staticcall(\n            abi.encodeWithSelector(\n                IERC20Token(0).balanceOf.selector,\n                owner\n            )\n        );\n        if (didSucceed && resultData.length == 32) {\n            balance = LibBytes.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Executes a call on address `target` with calldata `callData`\n    ///      and asserts that either nothing was returned or a single boolean\n    ///      was returned equal to `true`.\n    /// @param target The call target.\n    /// @param callData The abi-encoded call data.\n    function _callWithOptionalBooleanResult(\n        address target,\n        bytes memory callData\n    )\n        private\n    {\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\n        if (didSucceed) {\n            if (resultData.length == 0) {\n                return;\n            }\n            if (resultData.length == 32) {\n                uint256 result = LibBytes.readUint256(resultData, 0);\n                if (result == 1) {\n                    return;\n                }\n            }\n        }\n        LibRichErrors.rrevert(resultData);\n    }\n}\n"
    },
    "contracts/erc20/contracts/test/TestLibERC20Token.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"../src/LibERC20Token.sol\";\nimport \"./TestLibERC20TokenTarget.sol\";\n\n\ncontract TestLibERC20Token {\n\n    TestLibERC20TokenTarget public target;\n\n    constructor() public {\n        target = new TestLibERC20TokenTarget();\n    }\n\n    function testApprove(\n        bool shouldRevert,\n        bytes calldata revertData,\n        bytes calldata returnData,\n        address spender,\n        uint256 allowance\n    )\n        external\n    {\n        target.setBehavior(shouldRevert, revertData, returnData);\n        LibERC20Token.approve(address(target), spender, allowance);\n    }\n\n    function testTransfer(\n        bool shouldRevert,\n        bytes calldata revertData,\n        bytes calldata returnData,\n        address to,\n        uint256 amount\n    )\n        external\n    {\n        target.setBehavior(shouldRevert, revertData, returnData);\n        LibERC20Token.transfer(address(target), to, amount);\n    }\n\n    function testTransferFrom(\n        bool shouldRevert,\n        bytes calldata revertData,\n        bytes calldata returnData,\n        address from,\n        address to,\n        uint256 amount\n    )\n        external\n    {\n        target.setBehavior(shouldRevert, revertData, returnData);\n        LibERC20Token.transferFrom(address(target), from, to, amount);\n    }\n\n    function testDecimals(\n        bool shouldRevert,\n        bytes calldata revertData,\n        bytes calldata returnData\n    )\n        external\n        returns (uint8)\n    {\n        target.setBehavior(shouldRevert, revertData, returnData);\n        return LibERC20Token.decimals(address(target));\n    }\n}\n"
    },
    "contracts/erc20/contracts/test/TestLibERC20TokenTarget.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ncontract TestLibERC20TokenTarget {\n\n    event ApproveCalled(\n        address spender,\n        uint256 allowance\n    );\n\n    event TransferCalled(\n        address to,\n        uint256 amount\n    );\n\n    event TransferFromCalled(\n        address from,\n        address to,\n        uint256 amount\n    );\n\n    bool private _shouldRevert;\n    bytes private _revertData;\n    bytes private _returnData;\n\n    function setBehavior(\n        bool shouldRevert,\n        bytes calldata revertData,\n        bytes calldata returnData\n    )\n        external\n    {\n        _shouldRevert = shouldRevert;\n        _revertData = revertData;\n        _returnData = returnData;\n    }\n\n    function approve(\n        address spender,\n        uint256 allowance\n    )\n        external\n        returns (bool)\n    {\n        emit ApproveCalled(spender, allowance);\n        _execute();\n    }\n\n    function transfer(\n        address to,\n        uint256 amount\n    )\n        external\n        returns (bool)\n    {\n        emit TransferCalled(to, amount);\n        _execute();\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    )\n        external\n        returns (bool)\n    {\n        emit TransferFromCalled(from, to, amount);\n        _execute();\n    }\n\n    function decimals()\n        external\n        view\n        returns (uint8)\n    {\n        _execute();\n    }\n\n    function _execute() private view {\n        if (_shouldRevert) {\n            bytes memory revertData = _revertData;\n            assembly { revert(add(revertData, 0x20), mload(revertData)) }\n        }\n        bytes memory returnData = _returnData;\n        assembly { return(add(returnData, 0x20), mload(returnData)) }\n    }\n}\n"
    },
    "contracts/erc20/contracts/src/interfaces/IEtherToken.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"./IERC20Token.sol\";\n\n\ncontract IEtherToken is\n    IERC20Token\n{\n    function deposit()\n        public\n        payable;\n    \n    function withdraw(uint256 amount)\n        public;\n}\n"
    },
    "contracts/asset-proxy/contracts/test/TestStaticCallTarget.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\n\n\ncontract TestStaticCallTarget {\n\n    using LibBytes for bytes;\n\n    uint256 internal _state;\n \n    function updateState()\n        external\n    {\n        _state++;\n    }\n\n    function assertEvenNumber(uint256 target)\n        external\n        pure\n    {\n        require(\n            target % 2 == 0,\n            \"TARGET_NOT_EVEN\"\n        );\n    }\n\n    function isOddNumber(uint256 target)\n        external\n        pure\n        returns (bool isOdd)\n    {\n        isOdd = target % 2 == 1;\n        return isOdd;\n    }\n\n    function noInputFunction()\n        external\n        pure\n    {\n        assert(msg.data.length == 4 && msg.data.readBytes4(0) == bytes4(keccak256(\"noInputFunction()\")));\n    }\n\n    function dynamicInputFunction(bytes calldata a)\n        external\n        pure\n    {\n        bytes memory abiEncodedData = abi.encodeWithSignature(\"dynamicInputFunction(bytes)\", a);\n        assert(msg.data.equals(abiEncodedData));\n    }\n\n    function returnComplexType(uint256 a, uint256 b)\n        external\n        view\n        returns (bytes memory result)\n    {\n        result = abi.encodePacked(\n            address(this),\n            a,\n            b\n        );\n        return result;\n    }\n}"
    },
    "contracts/asset-proxy/contracts/src/StaticCallProxy.sol": {
      "content": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\n\n\n// solhint-disable no-unused-vars\ncontract StaticCallProxy {\n\n    using LibBytes for bytes;\n\n    // Id of this proxy.\n    bytes4 constant internal PROXY_ID = bytes4(keccak256(\"StaticCall(address,bytes,bytes32)\"));\n\n    /// @dev Makes a staticcall to a target address and verifies that the data returned matches the expected return data.\n    /// @param assetData Byte array encoded with staticCallTarget, staticCallData, and expectedCallResultHash\n    /// @param from This value is ignored.\n    /// @param to This value is ignored.\n    /// @param amount This value is ignored.\n    function transferFrom(\n        bytes calldata assetData,\n        address from,\n        address to,\n        uint256 amount\n    )\n        external\n        view\n    {\n        // Decode params from `assetData`\n        (\n            address staticCallTarget,\n            bytes memory staticCallData,\n            bytes32 expectedReturnDataHash\n        ) = abi.decode(\n            assetData.sliceDestructive(4, assetData.length),\n            (address, bytes, bytes32)\n        );\n\n        // Execute staticcall\n        (bool success, bytes memory returnData) = staticCallTarget.staticcall(staticCallData);\n\n        // Revert with returned data if staticcall is unsuccessful\n        if (!success) {\n            assembly {\n                revert(add(returnData, 32), mload(returnData))\n            }\n        }\n\n        // Revert if hash of return data is not as expected\n        bytes32 returnDataHash = keccak256(returnData);\n        require(\n            expectedReturnDataHash == returnDataHash,\n            \"UNEXPECTED_STATIC_CALL_RESULT\"\n        );\n    }\n\n    /// @dev Gets the proxy id associated with the proxy address.\n    /// @return Proxy id.\n    function getProxyId()\n        external\n        pure\n        returns (bytes4)\n    {\n        return PROXY_ID;\n    }\n}\n"
    }
  },
  "settings": {
    "evmVersion": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 1000000,
      "details": {
        "yul": true,
        "deduplicate": true,
        "cse": true,
        "constantOptimizer": true
      }
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {}
  }
}