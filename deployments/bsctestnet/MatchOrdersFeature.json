{
  "address": "0x31b2954fEA408aA33E70B4EEBe1bC8bb12279c4c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "zeroExAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "orderHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "makerAmountFinal",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "takerAmountFinal",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feePaid",
          "type": "uint256"
        }
      ],
      "name": "Fill",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TransferMatchDone",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "EIP712_DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEATURE_NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEATURE_VERSION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20TokenV06",
              "name": "makerToken",
              "type": "address"
            },
            {
              "internalType": "contract IERC20TokenV06",
              "name": "takerToken",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "makerAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "takerAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "takerTokenFeeAmount",
              "type": "uint128"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "feeRecipient",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "pool",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "expiry",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibNativeOrder.LimitOrder[]",
          "name": "orders",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "enum LibSignature.SignatureType",
              "name": "signatureType",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct LibSignature.Signature[]",
          "name": "signatures",
          "type": "tuple[]"
        }
      ],
      "name": "batchGetLimitOrderRelevantStates",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "orderHash",
              "type": "bytes32"
            },
            {
              "internalType": "enum LibNativeOrder.OrderStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint128",
              "name": "makerTokenFilledAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "takerTokenFilledAmount",
              "type": "uint128"
            }
          ],
          "internalType": "struct LibNativeOrder.OrderInfo[]",
          "name": "orderInfos",
          "type": "tuple[]"
        },
        {
          "internalType": "uint128[]",
          "name": "actualFillableTakerTokenAmounts",
          "type": "uint128[]"
        },
        {
          "internalType": "bool[]",
          "name": "isSignatureValids",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20TokenV06",
              "name": "makerToken",
              "type": "address"
            },
            {
              "internalType": "contract IERC20TokenV06",
              "name": "takerToken",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "makerAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "takerAmount",
              "type": "uint128"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "txOrigin",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "pool",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "expiry",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibNativeOrder.RfqOrder[]",
          "name": "orders",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "enum LibSignature.SignatureType",
              "name": "signatureType",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct LibSignature.Signature[]",
          "name": "signatures",
          "type": "tuple[]"
        }
      ],
      "name": "batchGetRfqOrderRelevantStates",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "orderHash",
              "type": "bytes32"
            },
            {
              "internalType": "enum LibNativeOrder.OrderStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint128",
              "name": "makerTokenFilledAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "takerTokenFilledAmount",
              "type": "uint128"
            }
          ],
          "internalType": "struct LibNativeOrder.OrderInfo[]",
          "name": "orderInfos",
          "type": "tuple[]"
        },
        {
          "internalType": "uint128[]",
          "name": "actualFillableTakerTokenAmounts",
          "type": "uint128[]"
        },
        {
          "internalType": "bool[]",
          "name": "isSignatureValids",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "typeOrder",
          "type": "uint8"
        }
      ],
      "name": "compare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "sellRemaining",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDecimalPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20TokenV06",
              "name": "makerToken",
              "type": "address"
            },
            {
              "internalType": "contract IERC20TokenV06",
              "name": "takerToken",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "makerAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "takerAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "takerTokenFeeAmount",
              "type": "uint128"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "feeRecipient",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "pool",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "expiry",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibNativeOrder.LimitOrder",
          "name": "order",
          "type": "tuple"
        }
      ],
      "name": "getLimitOrderHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "orderHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20TokenV06",
              "name": "makerToken",
              "type": "address"
            },
            {
              "internalType": "contract IERC20TokenV06",
              "name": "takerToken",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "makerAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "takerAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "takerTokenFeeAmount",
              "type": "uint128"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "feeRecipient",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "pool",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "expiry",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibNativeOrder.LimitOrder",
          "name": "order",
          "type": "tuple"
        }
      ],
      "name": "getLimitOrderInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "orderHash",
              "type": "bytes32"
            },
            {
              "internalType": "enum LibNativeOrder.OrderStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint128",
              "name": "makerTokenFilledAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "takerTokenFilledAmount",
              "type": "uint128"
            }
          ],
          "internalType": "struct LibNativeOrder.OrderInfo",
          "name": "orderInfo",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20TokenV06",
              "name": "makerToken",
              "type": "address"
            },
            {
              "internalType": "contract IERC20TokenV06",
              "name": "takerToken",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "makerAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "takerAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "takerTokenFeeAmount",
              "type": "uint128"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "feeRecipient",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "pool",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "expiry",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibNativeOrder.LimitOrder",
          "name": "order",
          "type": "tuple"
        },
        {
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        }
      ],
      "name": "getLimitOrderInfoV2",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "orderHash",
              "type": "bytes32"
            },
            {
              "internalType": "enum LibNativeOrder.OrderStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint128",
              "name": "makerTokenFilledAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "takerTokenFilledAmount",
              "type": "uint128"
            }
          ],
          "internalType": "struct LibNativeOrder.OrderInfo",
          "name": "orderInfo",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20TokenV06",
              "name": "makerToken",
              "type": "address"
            },
            {
              "internalType": "contract IERC20TokenV06",
              "name": "takerToken",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "makerAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "takerAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "takerTokenFeeAmount",
              "type": "uint128"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "feeRecipient",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "pool",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "expiry",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibNativeOrder.LimitOrder",
          "name": "order",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "enum LibSignature.SignatureType",
              "name": "signatureType",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct LibSignature.Signature",
          "name": "signature",
          "type": "tuple"
        }
      ],
      "name": "getLimitOrderRelevantState",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "orderHash",
              "type": "bytes32"
            },
            {
              "internalType": "enum LibNativeOrder.OrderStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint128",
              "name": "makerTokenFilledAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "takerTokenFilledAmount",
              "type": "uint128"
            }
          ],
          "internalType": "struct LibNativeOrder.OrderInfo",
          "name": "orderInfo",
          "type": "tuple"
        },
        {
          "internalType": "uint128",
          "name": "actualFillableTakerTokenAmount",
          "type": "uint128"
        },
        {
          "internalType": "bool",
          "name": "isSignatureValid",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20TokenV06",
              "name": "makerToken",
              "type": "address"
            },
            {
              "internalType": "contract IERC20TokenV06",
              "name": "takerToken",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "makerAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "takerAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "takerTokenFeeAmount",
              "type": "uint128"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "feeRecipient",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "pool",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "expiry",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibNativeOrder.LimitOrder",
          "name": "sellOrder",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20TokenV06",
              "name": "makerToken",
              "type": "address"
            },
            {
              "internalType": "contract IERC20TokenV06",
              "name": "takerToken",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "makerAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "takerAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "takerTokenFeeAmount",
              "type": "uint128"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "feeRecipient",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "pool",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "expiry",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibNativeOrder.LimitOrder",
          "name": "buyOrder",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "sellType",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "buyType",
          "type": "uint8"
        }
      ],
      "name": "getMatchOrderResult",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "makerAmountFinal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "takerAmountFinal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sellFeePaid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyFeePaid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "returnSellAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "returnBuyAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibNativeOrder.MatchedFillResults",
          "name": "matchedFillResults",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "orderHash",
          "type": "bytes32"
        }
      ],
      "name": "getOrderHashInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "filled",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "feeLock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "locked",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20TokenV06",
              "name": "makerToken",
              "type": "address"
            },
            {
              "internalType": "contract IERC20TokenV06",
              "name": "takerToken",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "makerAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "takerAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "takerTokenFeeAmount",
              "type": "uint128"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "feeRecipient",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "pool",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "expiry",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibNativeOrder.LimitOrder",
          "name": "order",
          "type": "tuple"
        },
        {
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        }
      ],
      "name": "getOrderInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "orderHash",
              "type": "bytes32"
            },
            {
              "internalType": "enum LibNativeOrder.OrderStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint128",
              "name": "makerTokenFilledAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "takerTokenFilledAmount",
              "type": "uint128"
            }
          ],
          "internalType": "struct LibNativeOrder.OrderInfo",
          "name": "orderInfo",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20TokenV06",
              "name": "makerToken",
              "type": "address"
            },
            {
              "internalType": "contract IERC20TokenV06",
              "name": "takerToken",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "makerAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "takerAmount",
              "type": "uint128"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "txOrigin",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "pool",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "expiry",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibNativeOrder.RfqOrder",
          "name": "order",
          "type": "tuple"
        }
      ],
      "name": "getRfqOrderHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "orderHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20TokenV06",
              "name": "makerToken",
              "type": "address"
            },
            {
              "internalType": "contract IERC20TokenV06",
              "name": "takerToken",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "makerAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "takerAmount",
              "type": "uint128"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "txOrigin",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "pool",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "expiry",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibNativeOrder.RfqOrder",
          "name": "order",
          "type": "tuple"
        }
      ],
      "name": "getRfqOrderInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "orderHash",
              "type": "bytes32"
            },
            {
              "internalType": "enum LibNativeOrder.OrderStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint128",
              "name": "makerTokenFilledAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "takerTokenFilledAmount",
              "type": "uint128"
            }
          ],
          "internalType": "struct LibNativeOrder.OrderInfo",
          "name": "orderInfo",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20TokenV06",
              "name": "makerToken",
              "type": "address"
            },
            {
              "internalType": "contract IERC20TokenV06",
              "name": "takerToken",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "makerAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "takerAmount",
              "type": "uint128"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "txOrigin",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "pool",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "expiry",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibNativeOrder.RfqOrder",
          "name": "order",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "enum LibSignature.SignatureType",
              "name": "signatureType",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct LibSignature.Signature",
          "name": "signature",
          "type": "tuple"
        }
      ],
      "name": "getRfqOrderRelevantState",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "orderHash",
              "type": "bytes32"
            },
            {
              "internalType": "enum LibNativeOrder.OrderStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint128",
              "name": "makerTokenFilledAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "takerTokenFilledAmount",
              "type": "uint128"
            }
          ],
          "internalType": "struct LibNativeOrder.OrderInfo",
          "name": "orderInfo",
          "type": "tuple"
        },
        {
          "internalType": "uint128",
          "name": "actualFillableTakerTokenAmount",
          "type": "uint128"
        },
        {
          "internalType": "bool",
          "name": "isSignatureValid",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "isValidOrderSigner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isValid",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20TokenV06",
              "name": "makerToken",
              "type": "address"
            },
            {
              "internalType": "contract IERC20TokenV06",
              "name": "takerToken",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "makerAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "takerAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "takerTokenFeeAmount",
              "type": "uint128"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "feeRecipient",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "pool",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "expiry",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibNativeOrder.LimitOrder",
          "name": "sellOrder",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20TokenV06",
              "name": "makerToken",
              "type": "address"
            },
            {
              "internalType": "contract IERC20TokenV06",
              "name": "takerToken",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "makerAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "takerAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "takerTokenFeeAmount",
              "type": "uint128"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "feeRecipient",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "pool",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "expiry",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibNativeOrder.LimitOrder",
          "name": "buyOrder",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "enum LibSignature.SignatureType",
              "name": "signatureType",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct LibSignature.Signature",
          "name": "sellSignature",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "enum LibSignature.SignatureType",
              "name": "signatureType",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct LibSignature.Signature",
          "name": "buySignature",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "sellType",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "buyType",
          "type": "uint8"
        }
      ],
      "name": "matchOrders",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "makerAmountFinal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "takerAmountFinal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sellFeePaid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyFeePaid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "returnSellAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "returnBuyAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibNativeOrder.MatchedFillResults",
          "name": "matchedFillResults",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "migrate",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "success",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20TokenV06",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "sendBalanceTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_decimal",
          "type": "uint256"
        }
      ],
      "name": "setDecimalPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa4fcf6353ff95a9e18541064c2d83f4874d353e56336990c43e0506c2c256203",
  "receipt": {
    "to": null,
    "from": "0x2D4159A016fD5318da2057a2173d48Dc11af314e",
    "contractAddress": "0x31b2954fEA408aA33E70B4EEBe1bC8bb12279c4c",
    "transactionIndex": 1,
    "gasUsed": "3333720",
    "logsBloom": "0x
    "blockHash": "0xe684d97e40286af588923a605bd379ac008c12d35329e2ba5f380849c82ce4a9",
    "transactionHash": "0xa4fcf6353ff95a9e18541064c2d83f4874d353e56336990c43e0506c2c256203",
    "logs": [],
    "blockNumber": 11839323,
    "cumulativeGasUsed": "3460703",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x108CecFb3D5bE0De1854B17CcC2d3f9049F2Ba3B"
  ],
  "solcInputHash": "c378da1d94df967d8712abafa46af60b",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zeroExAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"makerAmountFinal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"takerAmountFinal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feePaid\",\"type\":\"uint256\"}],\"name\":\"Fill\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferMatchDone\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EIP712_DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEATURE_NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEATURE_VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20TokenV06\",\"name\":\"makerToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20TokenV06\",\"name\":\"takerToken\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"makerAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"takerAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"takerTokenFeeAmount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"pool\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"internalType\":\"struct LibNativeOrder.LimitOrder[]\",\"name\":\"orders\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"enum LibSignature.SignatureType\",\"name\":\"signatureType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct LibSignature.Signature[]\",\"name\":\"signatures\",\"type\":\"tuple[]\"}],\"name\":\"batchGetLimitOrderRelevantStates\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"internalType\":\"enum LibNativeOrder.OrderStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"makerTokenFilledAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"takerTokenFilledAmount\",\"type\":\"uint128\"}],\"internalType\":\"struct LibNativeOrder.OrderInfo[]\",\"name\":\"orderInfos\",\"type\":\"tuple[]\"},{\"internalType\":\"uint128[]\",\"name\":\"actualFillableTakerTokenAmounts\",\"type\":\"uint128[]\"},{\"internalType\":\"bool[]\",\"name\":\"isSignatureValids\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20TokenV06\",\"name\":\"makerToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20TokenV06\",\"name\":\"takerToken\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"makerAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"takerAmount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txOrigin\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"pool\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"internalType\":\"struct LibNativeOrder.RfqOrder[]\",\"name\":\"orders\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"enum LibSignature.SignatureType\",\"name\":\"signatureType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct LibSignature.Signature[]\",\"name\":\"signatures\",\"type\":\"tuple[]\"}],\"name\":\"batchGetRfqOrderRelevantStates\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"internalType\":\"enum LibNativeOrder.OrderStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"makerTokenFilledAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"takerTokenFilledAmount\",\"type\":\"uint128\"}],\"internalType\":\"struct LibNativeOrder.OrderInfo[]\",\"name\":\"orderInfos\",\"type\":\"tuple[]\"},{\"internalType\":\"uint128[]\",\"name\":\"actualFillableTakerTokenAmounts\",\"type\":\"uint128[]\"},{\"internalType\":\"bool[]\",\"name\":\"isSignatureValids\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"typeOrder\",\"type\":\"uint8\"}],\"name\":\"compare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sellRemaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDecimalPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20TokenV06\",\"name\":\"makerToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20TokenV06\",\"name\":\"takerToken\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"makerAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"takerAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"takerTokenFeeAmount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"pool\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"internalType\":\"struct LibNativeOrder.LimitOrder\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"getLimitOrderHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20TokenV06\",\"name\":\"makerToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20TokenV06\",\"name\":\"takerToken\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"makerAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"takerAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"takerTokenFeeAmount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"pool\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"internalType\":\"struct LibNativeOrder.LimitOrder\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"getLimitOrderInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"internalType\":\"enum LibNativeOrder.OrderStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"makerTokenFilledAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"takerTokenFilledAmount\",\"type\":\"uint128\"}],\"internalType\":\"struct LibNativeOrder.OrderInfo\",\"name\":\"orderInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20TokenV06\",\"name\":\"makerToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20TokenV06\",\"name\":\"takerToken\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"makerAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"takerAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"takerTokenFeeAmount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"pool\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"internalType\":\"struct LibNativeOrder.LimitOrder\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"getLimitOrderInfoV2\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"internalType\":\"enum LibNativeOrder.OrderStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"makerTokenFilledAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"takerTokenFilledAmount\",\"type\":\"uint128\"}],\"internalType\":\"struct LibNativeOrder.OrderInfo\",\"name\":\"orderInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20TokenV06\",\"name\":\"makerToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20TokenV06\",\"name\":\"takerToken\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"makerAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"takerAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"takerTokenFeeAmount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"pool\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"internalType\":\"struct LibNativeOrder.LimitOrder\",\"name\":\"order\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum LibSignature.SignatureType\",\"name\":\"signatureType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct LibSignature.Signature\",\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"getLimitOrderRelevantState\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"internalType\":\"enum LibNativeOrder.OrderStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"makerTokenFilledAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"takerTokenFilledAmount\",\"type\":\"uint128\"}],\"internalType\":\"struct LibNativeOrder.OrderInfo\",\"name\":\"orderInfo\",\"type\":\"tuple\"},{\"internalType\":\"uint128\",\"name\":\"actualFillableTakerTokenAmount\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"isSignatureValid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20TokenV06\",\"name\":\"makerToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20TokenV06\",\"name\":\"takerToken\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"makerAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"takerAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"takerTokenFeeAmount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"pool\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"internalType\":\"struct LibNativeOrder.LimitOrder\",\"name\":\"sellOrder\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20TokenV06\",\"name\":\"makerToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20TokenV06\",\"name\":\"takerToken\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"makerAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"takerAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"takerTokenFeeAmount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"pool\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"internalType\":\"struct LibNativeOrder.LimitOrder\",\"name\":\"buyOrder\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"sellType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"buyType\",\"type\":\"uint8\"}],\"name\":\"getMatchOrderResult\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"makerAmountFinal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takerAmountFinal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellFeePaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyFeePaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"returnSellAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"returnBuyAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct LibNativeOrder.MatchedFillResults\",\"name\":\"matchedFillResults\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"getOrderHashInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"filled\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeLock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"locked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20TokenV06\",\"name\":\"makerToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20TokenV06\",\"name\":\"takerToken\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"makerAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"takerAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"takerTokenFeeAmount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"pool\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"internalType\":\"struct LibNativeOrder.LimitOrder\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"getOrderInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"internalType\":\"enum LibNativeOrder.OrderStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"makerTokenFilledAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"takerTokenFilledAmount\",\"type\":\"uint128\"}],\"internalType\":\"struct LibNativeOrder.OrderInfo\",\"name\":\"orderInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20TokenV06\",\"name\":\"makerToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20TokenV06\",\"name\":\"takerToken\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"makerAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"takerAmount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txOrigin\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"pool\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"internalType\":\"struct LibNativeOrder.RfqOrder\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"getRfqOrderHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20TokenV06\",\"name\":\"makerToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20TokenV06\",\"name\":\"takerToken\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"makerAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"takerAmount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txOrigin\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"pool\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"internalType\":\"struct LibNativeOrder.RfqOrder\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"getRfqOrderInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"internalType\":\"enum LibNativeOrder.OrderStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"makerTokenFilledAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"takerTokenFilledAmount\",\"type\":\"uint128\"}],\"internalType\":\"struct LibNativeOrder.OrderInfo\",\"name\":\"orderInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20TokenV06\",\"name\":\"makerToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20TokenV06\",\"name\":\"takerToken\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"makerAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"takerAmount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txOrigin\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"pool\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"internalType\":\"struct LibNativeOrder.RfqOrder\",\"name\":\"order\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum LibSignature.SignatureType\",\"name\":\"signatureType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct LibSignature.Signature\",\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"getRfqOrderRelevantState\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"internalType\":\"enum LibNativeOrder.OrderStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"makerTokenFilledAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"takerTokenFilledAmount\",\"type\":\"uint128\"}],\"internalType\":\"struct LibNativeOrder.OrderInfo\",\"name\":\"orderInfo\",\"type\":\"tuple\"},{\"internalType\":\"uint128\",\"name\":\"actualFillableTakerTokenAmount\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"isSignatureValid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"isValidOrderSigner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20TokenV06\",\"name\":\"makerToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20TokenV06\",\"name\":\"takerToken\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"makerAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"takerAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"takerTokenFeeAmount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"pool\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"internalType\":\"struct LibNativeOrder.LimitOrder\",\"name\":\"sellOrder\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20TokenV06\",\"name\":\"makerToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20TokenV06\",\"name\":\"takerToken\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"makerAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"takerAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"takerTokenFeeAmount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"pool\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"internalType\":\"struct LibNativeOrder.LimitOrder\",\"name\":\"buyOrder\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum LibSignature.SignatureType\",\"name\":\"signatureType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct LibSignature.Signature\",\"name\":\"sellSignature\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum LibSignature.SignatureType\",\"name\":\"signatureType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct LibSignature.Signature\",\"name\":\"buySignature\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"sellType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"buyType\",\"type\":\"uint8\"}],\"name\":\"matchOrders\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"makerAmountFinal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takerAmountFinal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellFeePaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyFeePaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"returnSellAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"returnBuyAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct LibNativeOrder.MatchedFillResults\",\"name\":\"matchedFillResults\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrate\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"success\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20TokenV06\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendBalanceTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_decimal\",\"type\":\"uint256\"}],\"name\":\"setDecimalPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"batchGetLimitOrderRelevantStates((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256)[],(uint8,uint8,bytes32,bytes32)[])\":{\"details\":\"Batch version of `getLimitOrderRelevantState()`, without reverting.      Orders that would normally cause `getLimitOrderRelevantState()`      to revert will have empty results.\",\"params\":{\"orders\":\"The limit orders.\",\"signatures\":\"The order signatures.\"},\"returns\":{\"actualFillableTakerTokenAmounts\":\"How much of each order is fillable         based on maker funds, in taker tokens.\",\"isSignatureValids\":\"Whether each signature is valid for the order.\",\"orderInfos\":\"Info about the orders.\"}},\"batchGetRfqOrderRelevantStates((address,address,uint128,uint128,address,address,address,bytes32,uint64,uint256)[],(uint8,uint8,bytes32,bytes32)[])\":{\"details\":\"Batch version of `getRfqOrderRelevantState()`, without reverting.      Orders that would normally cause `getRfqOrderRelevantState()`      to revert will have empty results.\",\"params\":{\"orders\":\"The RFQ orders.\",\"signatures\":\"The order signatures.\"},\"returns\":{\"actualFillableTakerTokenAmounts\":\"How much of each order is fillable         based on maker funds, in taker tokens.\",\"isSignatureValids\":\"Whether each signature is valid for the order.\",\"orderInfos\":\"Info about the orders.\"}},\"getLimitOrderHash((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256))\":{\"details\":\"Get the canonical hash of a limit order.\",\"params\":{\"order\":\"The limit order.\"},\"returns\":{\"orderHash\":\"The order hash.\"}},\"getLimitOrderInfo((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256))\":{\"details\":\"Get the order info for a limit order.\",\"params\":{\"order\":\"The limit order.\"},\"returns\":{\"orderInfo\":\"Info about the order.\"}},\"getLimitOrderRelevantState((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256),(uint8,uint8,bytes32,bytes32))\":{\"details\":\"Get order info, fillable amount, and signature validity for a limit order.      Fillable amount is determined using balances and allowances of the maker.\",\"params\":{\"order\":\"The limit order.\",\"signature\":\"The order signature.\"},\"returns\":{\"actualFillableTakerTokenAmount\":\"How much of the order is fillable         based on maker funds, in taker tokens.\",\"isSignatureValid\":\"Whether the signature is valid.\",\"orderInfo\":\"Info about the order.\"}},\"getRfqOrderHash((address,address,uint128,uint128,address,address,address,bytes32,uint64,uint256))\":{\"details\":\"Get the canonical hash of an RFQ order.\",\"params\":{\"order\":\"The RFQ order.\"},\"returns\":{\"orderHash\":\"The order hash.\"}},\"getRfqOrderInfo((address,address,uint128,uint128,address,address,address,bytes32,uint64,uint256))\":{\"details\":\"Get the order info for an RFQ order.\",\"params\":{\"order\":\"The RFQ order.\"},\"returns\":{\"orderInfo\":\"Info about the order.\"}},\"getRfqOrderRelevantState((address,address,uint128,uint128,address,address,address,bytes32,uint64,uint256),(uint8,uint8,bytes32,bytes32))\":{\"details\":\"Get order info, fillable amount, and signature validity for an RFQ order.      Fillable amount is determined using balances and allowances of the maker.\",\"params\":{\"order\":\"The RFQ order.\",\"signature\":\"The order signature.\"},\"returns\":{\"actualFillableTakerTokenAmount\":\"How much of the order is fillable         based on maker funds, in taker tokens.\",\"isSignatureValid\":\"Whether the signature is valid.\",\"orderInfo\":\"Info about the order.\"}},\"isValidOrderSigner(address,address)\":{\"details\":\"checks if a given address is registered to sign on behalf of a maker address\",\"params\":{\"maker\":\"The maker address encoded in an order (can be a contract)\",\"signer\":\"The address that is providing a signature\"}}},\"stateVariables\":{\"FEATURE_NAME\":{\"details\":\"The name of this feature set.\"},\"FEATURE_VERSION\":{\"details\":\"Version of this feature.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/zero-ex/contracts/src/features/MatchOrdersFeature.sol\":\"MatchOrdersFeature\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\n\\ninterface IERC20TokenV06 {\\n\\n    // solhint-disable no-simple-event-func-name\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 value\\n    );\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    /// @dev send `value` token to `to` from `msg.sender`\\n    /// @param to The address of the recipient\\n    /// @param value The amount of token to be transferred\\n    /// @return True if transfer was successful\\n    function transfer(address to, uint256 value)\\n        external\\n        returns (bool);\\n\\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\\n    /// @param from The address of the sender\\n    /// @param to The address of the recipient\\n    /// @param value The amount of token to be transferred\\n    /// @return True if transfer was successful\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    )\\n        external\\n        returns (bool);\\n\\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\\n    /// @param spender The address of the account able to transfer the tokens\\n    /// @param value The amount of wei to be approved for transfer\\n    /// @return Always true if the call has enough gas to complete execution\\n    function approve(address spender, uint256 value)\\n        external\\n        returns (bool);\\n\\n    /// @dev Query total supply of token\\n    /// @return Total supply of token\\n    function totalSupply()\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @dev Get the balance of `owner`.\\n    /// @param owner The address from which the balance will be retrieved\\n    /// @return Balance of owner\\n    function balanceOf(address owner)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @dev Get the allowance for `spender` to spend from `owner`.\\n    /// @param owner The address of the account owning tokens\\n    /// @param spender The address of the account able to transfer the tokens\\n    /// @return Amount of remaining tokens allowed to spent\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @dev Get the number of decimals this token has.\\n    function decimals()\\n        external\\n        view\\n        returns (uint8);\\n}\\n\",\"keccak256\":\"0x0aba8b79a821c666b295e3cfbe0932b5752db26df943c03eaa3e249955061a66\",\"license\":\"Apache-2.0\"},\"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\nimport \\\"./IERC20TokenV06.sol\\\";\\n\\n\\ninterface IEtherTokenV06 is\\n    IERC20TokenV06\\n{\\n    /// @dev Wrap ether.\\n    function deposit() external payable;\\n\\n    /// @dev Unwrap ether.\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xeeeac2e617b132396889cdb109a02fe2dbabf59b08d523b838b3161a4bf7d727\",\"license\":\"Apache-2.0\"},\"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\nimport \\\"./errors/LibBytesRichErrorsV06.sol\\\";\\nimport \\\"./errors/LibRichErrorsV06.sol\\\";\\n\\n\\nlibrary LibBytesV06 {\\n\\n    using LibBytesV06 for bytes;\\n\\n    /// @dev Gets the memory address for a byte array.\\n    /// @param input Byte array to lookup.\\n    /// @return memoryAddress Memory address of byte array. This\\n    ///         points to the header of the byte array which contains\\n    ///         the length.\\n    function rawAddress(bytes memory input)\\n        internal\\n        pure\\n        returns (uint256 memoryAddress)\\n    {\\n        assembly {\\n            memoryAddress := input\\n        }\\n        return memoryAddress;\\n    }\\n\\n    /// @dev Gets the memory address for the contents of a byte array.\\n    /// @param input Byte array to lookup.\\n    /// @return memoryAddress Memory address of the contents of the byte array.\\n    function contentAddress(bytes memory input)\\n        internal\\n        pure\\n        returns (uint256 memoryAddress)\\n    {\\n        assembly {\\n            memoryAddress := add(input, 32)\\n        }\\n        return memoryAddress;\\n    }\\n\\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\\n    /// @param dest memory address to copy bytes to.\\n    /// @param source memory address to copy bytes from.\\n    /// @param length number of bytes to copy.\\n    function memCopy(\\n        uint256 dest,\\n        uint256 source,\\n        uint256 length\\n    )\\n        internal\\n        pure\\n    {\\n        if (length < 32) {\\n            // Handle a partial word by reading destination and masking\\n            // off the bits we are interested in.\\n            // This correctly handles overlap, zero lengths and source == dest\\n            assembly {\\n                let mask := sub(exp(256, sub(32, length)), 1)\\n                let s := and(mload(source), not(mask))\\n                let d := and(mload(dest), mask)\\n                mstore(dest, or(s, d))\\n            }\\n        } else {\\n            // Skip the O(length) loop when source == dest.\\n            if (source == dest) {\\n                return;\\n            }\\n\\n            // For large copies we copy whole words at a time. The final\\n            // word is aligned to the end of the range (instead of after the\\n            // previous) to handle partial words. So a copy will look like this:\\n            //\\n            //  ####\\n            //      ####\\n            //          ####\\n            //            ####\\n            //\\n            // We handle overlap in the source and destination range by\\n            // changing the copying direction. This prevents us from\\n            // overwriting parts of source that we still need to copy.\\n            //\\n            // This correctly handles source == dest\\n            //\\n            if (source > dest) {\\n                assembly {\\n                    // We subtract 32 from `sEnd` and `dEnd` because it\\n                    // is easier to compare with in the loop, and these\\n                    // are also the addresses we need for copying the\\n                    // last bytes.\\n                    length := sub(length, 32)\\n                    let sEnd := add(source, length)\\n                    let dEnd := add(dest, length)\\n\\n                    // Remember the last 32 bytes of source\\n                    // This needs to be done here and not after the loop\\n                    // because we may have overwritten the last bytes in\\n                    // source already due to overlap.\\n                    let last := mload(sEnd)\\n\\n                    // Copy whole words front to back\\n                    // Note: the first check is always true,\\n                    // this could have been a do-while loop.\\n                    // solhint-disable-next-line no-empty-blocks\\n                    for {} lt(source, sEnd) {} {\\n                        mstore(dest, mload(source))\\n                        source := add(source, 32)\\n                        dest := add(dest, 32)\\n                    }\\n\\n                    // Write the last 32 bytes\\n                    mstore(dEnd, last)\\n                }\\n            } else {\\n                assembly {\\n                    // We subtract 32 from `sEnd` and `dEnd` because those\\n                    // are the starting points when copying a word at the end.\\n                    length := sub(length, 32)\\n                    let sEnd := add(source, length)\\n                    let dEnd := add(dest, length)\\n\\n                    // Remember the first 32 bytes of source\\n                    // This needs to be done here and not after the loop\\n                    // because we may have overwritten the first bytes in\\n                    // source already due to overlap.\\n                    let first := mload(source)\\n\\n                    // Copy whole words back to front\\n                    // We use a signed comparisson here to allow dEnd to become\\n                    // negative (happens when source and dest < 32). Valid\\n                    // addresses in local memory will never be larger than\\n                    // 2**255, so they can be safely re-interpreted as signed.\\n                    // Note: the first check is always true,\\n                    // this could have been a do-while loop.\\n                    // solhint-disable-next-line no-empty-blocks\\n                    for {} slt(dest, dEnd) {} {\\n                        mstore(dEnd, mload(sEnd))\\n                        sEnd := sub(sEnd, 32)\\n                        dEnd := sub(dEnd, 32)\\n                    }\\n\\n                    // Write the first 32 bytes\\n                    mstore(dest, first)\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a slices from a byte array.\\n    /// @param b The byte array to take a slice from.\\n    /// @param from The starting index for the slice (inclusive).\\n    /// @param to The final index for the slice (exclusive).\\n    /// @return result The slice containing bytes at indices [from, to)\\n    function slice(\\n        bytes memory b,\\n        uint256 from,\\n        uint256 to\\n    )\\n        internal\\n        pure\\n        returns (bytes memory result)\\n    {\\n        // Ensure that the from and to positions are valid positions for a slice within\\n        // the byte array that is being used.\\n        if (from > to) {\\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\\n                from,\\n                to\\n            ));\\n        }\\n        if (to > b.length) {\\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\\n                to,\\n                b.length\\n            ));\\n        }\\n\\n        // Create a new bytes structure and copy contents\\n        result = new bytes(to - from);\\n        memCopy(\\n            result.contentAddress(),\\n            b.contentAddress() + from,\\n            result.length\\n        );\\n        return result;\\n    }\\n\\n    /// @dev Returns a slice from a byte array without preserving the input.\\n    ///      When `from == 0`, the original array will match the slice.\\n    ///      In other cases its state will be corrupted.\\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\\n    /// @param from The starting index for the slice (inclusive).\\n    /// @param to The final index for the slice (exclusive).\\n    /// @return result The slice containing bytes at indices [from, to)\\n    function sliceDestructive(\\n        bytes memory b,\\n        uint256 from,\\n        uint256 to\\n    )\\n        internal\\n        pure\\n        returns (bytes memory result)\\n    {\\n        // Ensure that the from and to positions are valid positions for a slice within\\n        // the byte array that is being used.\\n        if (from > to) {\\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\\n                from,\\n                to\\n            ));\\n        }\\n        if (to > b.length) {\\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\\n                to,\\n                b.length\\n            ));\\n        }\\n\\n        // Create a new bytes structure around [from, to) in-place.\\n        assembly {\\n            result := add(b, from)\\n            mstore(result, sub(to, from))\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Pops the last byte off of a byte array by modifying its length.\\n    /// @param b Byte array that will be modified.\\n    /// @return result The byte that was popped off.\\n    function popLastByte(bytes memory b)\\n        internal\\n        pure\\n        returns (bytes1 result)\\n    {\\n        if (b.length == 0) {\\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\\n                b.length,\\n                0\\n            ));\\n        }\\n\\n        // Store last byte.\\n        result = b[b.length - 1];\\n\\n        assembly {\\n            // Decrement length of byte array.\\n            let newLen := sub(mload(b), 1)\\n            mstore(b, newLen)\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Tests equality of two byte arrays.\\n    /// @param lhs First byte array to compare.\\n    /// @param rhs Second byte array to compare.\\n    /// @return equal True if arrays are the same. False otherwise.\\n    function equals(\\n        bytes memory lhs,\\n        bytes memory rhs\\n    )\\n        internal\\n        pure\\n        returns (bool equal)\\n    {\\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\\n        // We early exit on unequal lengths, but keccak would also correctly\\n        // handle this.\\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\\n    }\\n\\n    /// @dev Reads an address from a position in a byte array.\\n    /// @param b Byte array containing an address.\\n    /// @param index Index in byte array of address.\\n    /// @return result address from byte array.\\n    function readAddress(\\n        bytes memory b,\\n        uint256 index\\n    )\\n        internal\\n        pure\\n        returns (address result)\\n    {\\n        if (b.length < index + 20) {\\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\\n                b.length,\\n                index + 20 // 20 is length of address\\n            ));\\n        }\\n\\n        // Add offset to index:\\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\\n        index += 20;\\n\\n        // Read address from array memory\\n        assembly {\\n            // 1. Add index to address of bytes array\\n            // 2. Load 32-byte word from memory\\n            // 3. Apply 20-byte mask to obtain address\\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Writes an address into a specific position in a byte array.\\n    /// @param b Byte array to insert address into.\\n    /// @param index Index in byte array of address.\\n    /// @param input Address to put into byte array.\\n    function writeAddress(\\n        bytes memory b,\\n        uint256 index,\\n        address input\\n    )\\n        internal\\n        pure\\n    {\\n        if (b.length < index + 20) {\\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\\n                b.length,\\n                index + 20 // 20 is length of address\\n            ));\\n        }\\n\\n        // Add offset to index:\\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\\n        index += 20;\\n\\n        // Store address into array memory\\n        assembly {\\n            // The address occupies 20 bytes and mstore stores 32 bytes.\\n            // First fetch the 32-byte word where we'll be storing the address, then\\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\\n\\n            // 1. Add index to address of bytes array\\n            // 2. Load 32-byte word from memory\\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\\n            let neighbors := and(\\n                mload(add(b, index)),\\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\\n            )\\n\\n            // Make sure input address is clean.\\n            // (Solidity does not guarantee this)\\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\\n\\n            // Store the neighbors and address into memory\\n            mstore(add(b, index), xor(input, neighbors))\\n        }\\n    }\\n\\n    /// @dev Reads a bytes32 value from a position in a byte array.\\n    /// @param b Byte array containing a bytes32 value.\\n    /// @param index Index in byte array of bytes32 value.\\n    /// @return result bytes32 value from byte array.\\n    function readBytes32(\\n        bytes memory b,\\n        uint256 index\\n    )\\n        internal\\n        pure\\n        returns (bytes32 result)\\n    {\\n        if (b.length < index + 32) {\\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\\n                b.length,\\n                index + 32\\n            ));\\n        }\\n\\n        // Arrays are prefixed by a 256 bit length parameter\\n        index += 32;\\n\\n        // Read the bytes32 from array memory\\n        assembly {\\n            result := mload(add(b, index))\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Writes a bytes32 into a specific position in a byte array.\\n    /// @param b Byte array to insert <input> into.\\n    /// @param index Index in byte array of <input>.\\n    /// @param input bytes32 to put into byte array.\\n    function writeBytes32(\\n        bytes memory b,\\n        uint256 index,\\n        bytes32 input\\n    )\\n        internal\\n        pure\\n    {\\n        if (b.length < index + 32) {\\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\\n                b.length,\\n                index + 32\\n            ));\\n        }\\n\\n        // Arrays are prefixed by a 256 bit length parameter\\n        index += 32;\\n\\n        // Read the bytes32 from array memory\\n        assembly {\\n            mstore(add(b, index), input)\\n        }\\n    }\\n\\n    /// @dev Reads a uint256 value from a position in a byte array.\\n    /// @param b Byte array containing a uint256 value.\\n    /// @param index Index in byte array of uint256 value.\\n    /// @return result uint256 value from byte array.\\n    function readUint256(\\n        bytes memory b,\\n        uint256 index\\n    )\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        result = uint256(readBytes32(b, index));\\n        return result;\\n    }\\n\\n    /// @dev Writes a uint256 into a specific position in a byte array.\\n    /// @param b Byte array to insert <input> into.\\n    /// @param index Index in byte array of <input>.\\n    /// @param input uint256 to put into byte array.\\n    function writeUint256(\\n        bytes memory b,\\n        uint256 index,\\n        uint256 input\\n    )\\n        internal\\n        pure\\n    {\\n        writeBytes32(b, index, bytes32(input));\\n    }\\n\\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\\n    /// @param b Byte array containing a bytes4 value.\\n    /// @param index Index in byte array of bytes4 value.\\n    /// @return result bytes4 value from byte array.\\n    function readBytes4(\\n        bytes memory b,\\n        uint256 index\\n    )\\n        internal\\n        pure\\n        returns (bytes4 result)\\n    {\\n        if (b.length < index + 4) {\\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\\n                b.length,\\n                index + 4\\n            ));\\n        }\\n\\n        // Arrays are prefixed by a 32 byte length field\\n        index += 32;\\n\\n        // Read the bytes4 from array memory\\n        assembly {\\n            result := mload(add(b, index))\\n            // Solidity does not require us to clean the trailing bytes.\\n            // We do it anyway\\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Writes a new length to a byte array.\\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\\n    /// @param b Bytes array to write new length to.\\n    /// @param length New length of byte array.\\n    function writeLength(bytes memory b, uint256 length)\\n        internal\\n        pure\\n    {\\n        assembly {\\n            mstore(b, length)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99ff540f1a80dd66d538c87d215fb8f225c8b316c957761cc0b78f3971159590\",\"license\":\"Apache-2.0\"},\"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\nimport \\\"./LibSafeMathV06.sol\\\";\\nimport \\\"./errors/LibRichErrorsV06.sol\\\";\\nimport \\\"./errors/LibMathRichErrorsV06.sol\\\";\\n\\n\\nlibrary LibMathV06 {\\n\\n    using LibSafeMathV06 for uint256;\\n\\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\\n    ///      Reverts if rounding error is >= 0.1%\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to calculate partial of.\\n    /// @return partialAmount Partial value of target rounded down.\\n    function safeGetPartialAmountFloor(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    )\\n        internal\\n        pure\\n        returns (uint256 partialAmount)\\n    {\\n        if (isRoundingErrorFloor(\\n                numerator,\\n                denominator,\\n                target\\n        )) {\\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\\n                numerator,\\n                denominator,\\n                target\\n            ));\\n        }\\n\\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\\n        return partialAmount;\\n    }\\n\\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\\n    ///      Reverts if rounding error is >= 0.1%\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to calculate partial of.\\n    /// @return partialAmount Partial value of target rounded up.\\n    function safeGetPartialAmountCeil(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    )\\n        internal\\n        pure\\n        returns (uint256 partialAmount)\\n    {\\n        if (isRoundingErrorCeil(\\n                numerator,\\n                denominator,\\n                target\\n        )) {\\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\\n                numerator,\\n                denominator,\\n                target\\n            ));\\n        }\\n\\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\\n        //       ceil(a / b) = floor((a + b - 1) / b)\\n        // To implement `ceil(a / b)` using safeDiv.\\n        partialAmount = numerator.safeMul(target)\\n            .safeAdd(denominator.safeSub(1))\\n            .safeDiv(denominator);\\n\\n        return partialAmount;\\n    }\\n\\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to calculate partial of.\\n    /// @return partialAmount Partial value of target rounded down.\\n    function getPartialAmountFloor(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    )\\n        internal\\n        pure\\n        returns (uint256 partialAmount)\\n    {\\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\\n        return partialAmount;\\n    }\\n\\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to calculate partial of.\\n    /// @return partialAmount Partial value of target rounded up.\\n    function getPartialAmountCeil(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    )\\n        internal\\n        pure\\n        returns (uint256 partialAmount)\\n    {\\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\\n        //       ceil(a / b) = floor((a + b - 1) / b)\\n        // To implement `ceil(a / b)` using safeDiv.\\n        partialAmount = numerator.safeMul(target)\\n            .safeAdd(denominator.safeSub(1))\\n            .safeDiv(denominator);\\n\\n        return partialAmount;\\n    }\\n\\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to multiply with numerator/denominator.\\n    /// @return isError Rounding error is present.\\n    function isRoundingErrorFloor(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    )\\n        internal\\n        pure\\n        returns (bool isError)\\n    {\\n        if (denominator == 0) {\\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\\n        }\\n\\n        // The absolute rounding error is the difference between the rounded\\n        // value and the ideal value. The relative rounding error is the\\n        // absolute rounding error divided by the absolute value of the\\n        // ideal value. This is undefined when the ideal value is zero.\\n        //\\n        // The ideal value is `numerator * target / denominator`.\\n        // Let's call `numerator * target % denominator` the remainder.\\n        // The absolute error is `remainder / denominator`.\\n        //\\n        // When the ideal value is zero, we require the absolute error to\\n        // be zero. Fortunately, this is always the case. The ideal value is\\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\\n        // remainder and absolute error are also zero.\\n        if (target == 0 || numerator == 0) {\\n            return false;\\n        }\\n\\n        // Otherwise, we want the relative rounding error to be strictly\\n        // less than 0.1%.\\n        // The relative error is `remainder / (numerator * target)`.\\n        // We want the relative error less than 1 / 1000:\\n        //        remainder / (numerator * denominator)  <  1 / 1000\\n        // or equivalently:\\n        //        1000 * remainder  <  numerator * target\\n        // so we have a rounding error iff:\\n        //        1000 * remainder  >=  numerator * target\\n        uint256 remainder = mulmod(\\n            target,\\n            numerator,\\n            denominator\\n        );\\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\\n        return isError;\\n    }\\n\\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to multiply with numerator/denominator.\\n    /// @return isError Rounding error is present.\\n    function isRoundingErrorCeil(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    )\\n        internal\\n        pure\\n        returns (bool isError)\\n    {\\n        if (denominator == 0) {\\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\\n        }\\n\\n        // See the comments in `isRoundingError`.\\n        if (target == 0 || numerator == 0) {\\n            // When either is zero, the ideal value and rounded value are zero\\n            // and there is no rounding error. (Although the relative error\\n            // is undefined.)\\n            return false;\\n        }\\n        // Compute remainder as before\\n        uint256 remainder = mulmod(\\n            target,\\n            numerator,\\n            denominator\\n        );\\n        remainder = denominator.safeSub(remainder) % denominator;\\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\\n        return isError;\\n    }\\n}\\n\",\"keccak256\":\"0xd96699a8ca529051f366a8cffc478e4ed205e7cf14a5816de70a71061201566c\",\"license\":\"Apache-2.0\"},\"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\nimport \\\"./errors/LibRichErrorsV06.sol\\\";\\nimport \\\"./errors/LibSafeMathRichErrorsV06.sol\\\";\\n\\n\\nlibrary LibSafeMathV06 {\\n\\n    function safeMul(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        if (c / a != b) {\\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\\n                a,\\n                b\\n            ));\\n        }\\n        return c;\\n    }\\n\\n    function safeDiv(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (b == 0) {\\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\\n                a,\\n                b\\n            ));\\n        }\\n        uint256 c = a / b;\\n        return c;\\n    }\\n\\n    function safeSub(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (b > a) {\\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\\n                a,\\n                b\\n            ));\\n        }\\n        return a - b;\\n    }\\n\\n    function safeAdd(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 c = a + b;\\n        if (c < a) {\\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\\n                a,\\n                b\\n            ));\\n        }\\n        return c;\\n    }\\n\\n    function max256(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return a >= b ? a : b;\\n    }\\n\\n    function min256(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return a < b ? a : b;\\n    }\\n\\n    function safeMul128(uint128 a, uint128 b)\\n        internal\\n        pure\\n        returns (uint128)\\n    {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint128 c = a * b;\\n        if (c / a != b) {\\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\\n                a,\\n                b\\n            ));\\n        }\\n        return c;\\n    }\\n\\n    function safeDiv128(uint128 a, uint128 b)\\n        internal\\n        pure\\n        returns (uint128)\\n    {\\n        if (b == 0) {\\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\\n                a,\\n                b\\n            ));\\n        }\\n        uint128 c = a / b;\\n        return c;\\n    }\\n\\n    function safeSub128(uint128 a, uint128 b)\\n        internal\\n        pure\\n        returns (uint128)\\n    {\\n        if (b > a) {\\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\\n                a,\\n                b\\n            ));\\n        }\\n        return a - b;\\n    }\\n\\n    function safeAdd128(uint128 a, uint128 b)\\n        internal\\n        pure\\n        returns (uint128)\\n    {\\n        uint128 c = a + b;\\n        if (c < a) {\\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\\n                a,\\n                b\\n            ));\\n        }\\n        return c;\\n    }\\n\\n    function max128(uint128 a, uint128 b)\\n        internal\\n        pure\\n        returns (uint128)\\n    {\\n        return a >= b ? a : b;\\n    }\\n\\n    function min128(uint128 a, uint128 b)\\n        internal\\n        pure\\n        returns (uint128)\\n    {\\n        return a < b ? a : b;\\n    }\\n\\n    function safeDowncastToUint128(uint256 a)\\n        internal\\n        pure\\n        returns (uint128)\\n    {\\n        if (a > type(uint128).max) {\\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256DowncastError(\\n                LibSafeMathRichErrorsV06.DowncastErrorCodes.VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128,\\n                a\\n            ));\\n        }\\n        return uint128(a);\\n    }\\n}\\n\",\"keccak256\":\"0xdcd6b928ff28abcdf68cc7ef308006be0bdba561d3672a978200d8e2878da0c9\",\"license\":\"Apache-2.0\"},\"@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\n\\nlibrary LibBytesRichErrorsV06 {\\n\\n    enum InvalidByteOperationErrorCodes {\\n        FromLessThanOrEqualsToRequired,\\n        ToLessThanOrEqualsLengthRequired,\\n        LengthGreaterThanZeroRequired,\\n        LengthGreaterThanOrEqualsFourRequired,\\n        LengthGreaterThanOrEqualsTwentyRequired,\\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\\n    }\\n\\n    // bytes4(keccak256(\\\"InvalidByteOperationError(uint8,uint256,uint256)\\\"))\\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\\n        0x28006595;\\n\\n    // solhint-disable func-name-mixedcase\\n    function InvalidByteOperationError(\\n        InvalidByteOperationErrorCodes errorCode,\\n        uint256 offset,\\n        uint256 required\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\\n            errorCode,\\n            offset,\\n            required\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x5f1b82283b545f13c40f60aaa7a7d8c301663fdd196092c9111cc34df358d918\",\"license\":\"Apache-2.0\"},\"@0x/contracts-utils/contracts/src/v06/errors/LibMathRichErrorsV06.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\n\\nlibrary LibMathRichErrorsV06 {\\n\\n    // bytes4(keccak256(\\\"DivisionByZeroError()\\\"))\\n    bytes internal constant DIVISION_BY_ZERO_ERROR =\\n        hex\\\"a791837c\\\";\\n\\n    // bytes4(keccak256(\\\"RoundingError(uint256,uint256,uint256)\\\"))\\n    bytes4 internal constant ROUNDING_ERROR_SELECTOR =\\n        0x339f3de2;\\n\\n    // solhint-disable func-name-mixedcase\\n    function DivisionByZeroError()\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return DIVISION_BY_ZERO_ERROR;\\n    }\\n\\n    function RoundingError(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            ROUNDING_ERROR_SELECTOR,\\n            numerator,\\n            denominator,\\n            target\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x273c6cd39591dca8232a2a4f1230a0aa8917af82aa111461c6d92e234e602b74\",\"license\":\"Apache-2.0\"},\"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\n\\nlibrary LibRichErrorsV06 {\\n\\n    // bytes4(keccak256(\\\"Error(string)\\\"))\\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\\n\\n    // solhint-disable func-name-mixedcase\\n    /// @dev ABI encode a standard, string revert error payload.\\n    ///      This is the same payload that would be included by a `revert(string)`\\n    ///      solidity statement. It has the function signature `Error(string)`.\\n    /// @param message The error string.\\n    /// @return The ABI encoded error.\\n    function StandardError(string memory message)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            STANDARD_ERROR_SELECTOR,\\n            bytes(message)\\n        );\\n    }\\n    // solhint-enable func-name-mixedcase\\n\\n    /// @dev Reverts an encoded rich revert reason `errorData`.\\n    /// @param errorData ABI encoded error data.\\n    function rrevert(bytes memory errorData)\\n        internal\\n        pure\\n    {\\n        assembly {\\n            revert(add(errorData, 0x20), mload(errorData))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x77261a06daa251d39f696afb56a9560a7914bc099ad4e8f758f21999f259d01e\",\"license\":\"Apache-2.0\"},\"@0x/contracts-utils/contracts/src/v06/errors/LibSafeMathRichErrorsV06.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\n\\nlibrary LibSafeMathRichErrorsV06 {\\n\\n    // bytes4(keccak256(\\\"Uint256BinOpError(uint8,uint256,uint256)\\\"))\\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =\\n        0xe946c1bb;\\n\\n    // bytes4(keccak256(\\\"Uint256DowncastError(uint8,uint256)\\\"))\\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =\\n        0xc996af7b;\\n\\n    enum BinOpErrorCodes {\\n        ADDITION_OVERFLOW,\\n        MULTIPLICATION_OVERFLOW,\\n        SUBTRACTION_UNDERFLOW,\\n        DIVISION_BY_ZERO\\n    }\\n\\n    enum DowncastErrorCodes {\\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96,\\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128\\n    }\\n\\n    // solhint-disable func-name-mixedcase\\n    function Uint256BinOpError(\\n        BinOpErrorCodes errorCode,\\n        uint256 a,\\n        uint256 b\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            UINT256_BINOP_ERROR_SELECTOR,\\n            errorCode,\\n            a,\\n            b\\n        );\\n    }\\n\\n    function Uint256DowncastError(\\n        DowncastErrorCodes errorCode,\\n        uint256 a\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            UINT256_DOWNCAST_ERROR_SELECTOR,\\n            errorCode,\\n            a\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x533bc8b3f1b707178043073dd42dacc71ed49bd327964371f344e68536a1c3a6\",\"license\":\"Apache-2.0\"},\"@0x/contracts-utils/contracts/src/v06/interfaces/IOwnableV06.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\n\\ninterface IOwnableV06 {\\n\\n    /// @dev Emitted by Ownable when ownership is transferred.\\n    /// @param previousOwner The previous owner of the contract.\\n    /// @param newOwner The new owner of the contract.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @dev Transfers ownership of the contract to a new address.\\n    /// @param newOwner The address that will become the owner.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @dev The owner of this contract.\\n    /// @return ownerAddress The owner address.\\n    function owner() external view returns (address ownerAddress);\\n}\\n\",\"keccak256\":\"0x4e4a258b24f58914f41d9d3747e5c7dec08a49bac8f921db4e76e178a76f609e\",\"license\":\"Apache-2.0\"},\"contracts/zero-ex/contracts/src/errors/LibCommonRichErrors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\n\\nlibrary LibCommonRichErrors {\\n\\n    // solhint-disable func-name-mixedcase\\n\\n    function OnlyCallableBySelfError(address sender)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"OnlyCallableBySelfError(address)\\\")),\\n            sender\\n        );\\n    }\\n\\n    function IllegalReentrancyError(bytes4 selector, uint256 reentrancyFlags)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"IllegalReentrancyError(bytes4,uint256)\\\")),\\n            selector,\\n            reentrancyFlags\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x73c4cc0dc27c71e96f5c5262ba349e39cda3051698c772f01f23b7c089762ebe\",\"license\":\"Apache-2.0\"},\"contracts/zero-ex/contracts/src/errors/LibNativeOrdersRichErrors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\n\\nlibrary LibNativeOrdersRichErrors {\\n\\n    // solhint-disable func-name-mixedcase\\n\\n    function ProtocolFeeRefundFailed(\\n        address receiver,\\n        uint256 refundAmount\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"ProtocolFeeRefundFailed(address,uint256)\\\")),\\n            receiver,\\n            refundAmount\\n        );\\n    }\\n\\n    function OrderNotFillableByOriginError(\\n        bytes32 orderHash,\\n        address txOrigin,\\n        address orderTxOrigin\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"OrderNotFillableByOriginError(bytes32,address,address)\\\")),\\n            orderHash,\\n            txOrigin,\\n            orderTxOrigin\\n        );\\n    }\\n\\n    function OrderNotFillableError(\\n        bytes32 orderHash,\\n        uint8 orderStatus\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"OrderNotFillableError(bytes32,uint8)\\\")),\\n            orderHash,\\n            orderStatus\\n        );\\n    }\\n\\n    function OrderNotSignedByMakerError(\\n        bytes32 orderHash,\\n        address signer,\\n        address maker\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"OrderNotSignedByMakerError(bytes32,address,address)\\\")),\\n            orderHash,\\n            signer,\\n            maker\\n        );\\n    }\\n\\n    function InvalidSignerError(\\n        address maker,\\n        address signer\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"InvalidSignerError(address,address)\\\")),\\n            maker,\\n            signer\\n        );\\n    }\\n\\n    function OrderNotFillableBySenderError(\\n        bytes32 orderHash,\\n        address sender,\\n        address orderSender\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"OrderNotFillableBySenderError(bytes32,address,address)\\\")),\\n            orderHash,\\n            sender,\\n            orderSender\\n        );\\n    }\\n\\n    function OrderNotFillableByTakerError(\\n        bytes32 orderHash,\\n        address taker,\\n        address orderTaker\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"OrderNotFillableByTakerError(bytes32,address,address)\\\")),\\n            orderHash,\\n            taker,\\n            orderTaker\\n        );\\n    }\\n\\n    function CancelSaltTooLowError(\\n        uint256 minValidSalt,\\n        uint256 oldMinValidSalt\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"CancelSaltTooLowError(uint256,uint256)\\\")),\\n            minValidSalt,\\n            oldMinValidSalt\\n        );\\n    }\\n\\n    function FillOrKillFailedError(\\n        bytes32 orderHash,\\n        uint256 takerTokenFilledAmount,\\n        uint256 takerTokenFillAmount\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"FillOrKillFailedError(bytes32,uint256,uint256)\\\")),\\n            orderHash,\\n            takerTokenFilledAmount,\\n            takerTokenFillAmount\\n        );\\n    }\\n\\n    function OnlyOrderMakerAllowed(\\n        bytes32 orderHash,\\n        address sender,\\n        address maker\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"OnlyOrderMakerAllowed(bytes32,address,address)\\\")),\\n            orderHash,\\n            sender,\\n            maker\\n        );\\n    }\\n\\n    function BatchFillIncompleteError(\\n        bytes32 orderHash,\\n        uint256 takerTokenFilledAmount,\\n        uint256 takerTokenFillAmount\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"BatchFillIncompleteError(bytes32,uint256,uint256)\\\")),\\n            orderHash,\\n            takerTokenFilledAmount,\\n            takerTokenFillAmount\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xac30e78055912f30d30bffcb75fd26a9801230f3fdeb22514d6fefec3e4487be\",\"license\":\"Apache-2.0\"},\"contracts/zero-ex/contracts/src/errors/LibOwnableRichErrors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\n\\nlibrary LibOwnableRichErrors {\\n\\n    // solhint-disable func-name-mixedcase\\n\\n    function OnlyOwnerError(\\n        address sender,\\n        address owner\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"OnlyOwnerError(address,address)\\\")),\\n            sender,\\n            owner\\n        );\\n    }\\n\\n    function TransferOwnerToZeroError()\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"TransferOwnerToZeroError()\\\"))\\n        );\\n    }\\n\\n    function MigrateCallFailedError(address target, bytes memory resultData)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"MigrateCallFailedError(address,bytes)\\\")),\\n            target,\\n            resultData\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xddddbadb4349323acf3e8570c21d117ead3113a1b3869b3fa7ad123a22e9bad9\",\"license\":\"Apache-2.0\"},\"contracts/zero-ex/contracts/src/errors/LibSignatureRichErrors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\n\\nlibrary LibSignatureRichErrors {\\n\\n    enum SignatureValidationErrorCodes {\\n        ALWAYS_INVALID,\\n        INVALID_LENGTH,\\n        UNSUPPORTED,\\n        ILLEGAL,\\n        WRONG_SIGNER,\\n        BAD_SIGNATURE_DATA\\n    }\\n\\n    // solhint-disable func-name-mixedcase\\n\\n    function SignatureValidationError(\\n        SignatureValidationErrorCodes code,\\n        bytes32 hash,\\n        address signerAddress,\\n        bytes memory signature\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"SignatureValidationError(uint8,bytes32,address,bytes)\\\")),\\n            code,\\n            hash,\\n            signerAddress,\\n            signature\\n        );\\n    }\\n\\n    function SignatureValidationError(\\n        SignatureValidationErrorCodes code,\\n        bytes32 hash\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"SignatureValidationError(uint8,bytes32)\\\")),\\n            code,\\n            hash\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xed5ce173a4def5baf4c7b1ca44e9a7060b80fc1de95203410cc4a0ccbc12eda4\",\"license\":\"Apache-2.0\"},\"contracts/zero-ex/contracts/src/features/MatchOrdersFeature.sol\":{\"content\":\"/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./libs/LibRichErrors.sol\\\";\\nimport \\\"./libs/LibExchangeRichErrors.sol\\\";\\nimport \\\"./libs/LibNativeOrder.sol\\\";\\nimport \\\"./libs/LibSignature.sol\\\";\\nimport \\\"./native_orders/NativeOrdersInfo.sol\\\";\\nimport \\\"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\\\";\\nimport \\\"../fixins/FixinTokenSpender.sol\\\";\\nimport \\\"../fixins/FixinCommon.sol\\\";\\nimport \\\"../migrations/LibMigrate.sol\\\";\\nimport \\\"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\\\";\\nimport \\\"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\\\";\\nimport \\\"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\\\";\\nimport \\\"./interfaces/IMatchOrdersFeature.sol\\\";\\nimport \\\"./interfaces/IFeature.sol\\\";\\n\\ncontract MatchOrdersFeature is\\n    IFeature,\\n    IMatchOrdersFeature,\\n    FixinCommon,\\n    FixinTokenSpender,\\n    NativeOrdersInfo\\n{\\n    using LibBytesV06 for bytes;\\n    using LibSafeMathV06 for uint256;\\n    using LibSafeMathV06 for uint128;\\n\\n    string public constant override FEATURE_NAME = \\\"MatchOrders\\\";\\n    /// @dev Version of this feature.\\n    uint256 public immutable override FEATURE_VERSION = _encodeVersion(1, 1, 1);\\n\\n    constructor(address zeroExAddress)\\n        public\\n        FixinCommon()\\n        NativeOrdersInfo(zeroExAddress)\\n    {\\n        // solhint-disable-next-line no-empty-blocks\\n    }\\n\\n    function matchOrders(\\n        LibNativeOrder.LimitOrder calldata sellOrder,\\n        LibNativeOrder.LimitOrder calldata buyOrder,\\n        LibSignature.Signature calldata sellSignature,\\n        LibSignature.Signature calldata buySignature,\\n        uint256 price,\\n        uint8 sellType,\\n        uint8 buyType\\n    )\\n        external\\n        onlyOwner\\n        override\\n        payable\\n        // refundFinalBalanceNoReentry\\n        returns (LibNativeOrder.MatchedFillResults memory matchedFillResults)\\n    {\\n        return _matchOrders(\\n            sellOrder,\\n            buyOrder,\\n            sellSignature,\\n            buySignature,\\n            price,\\n            sellType,\\n            buyType\\n        );\\n    }\\n    /// @dev Validates context for matchOrders. Succeeds or throws.\\n    /// @param sellOrder First order to match.\\n    /// @param buyOrder Second order to match.\\n    /// @param sellOrderHash First matched order hash.\\n    /// @param buyOrderHash Second matched order hash.\\n    function _assertValidMatch(\\n        LibNativeOrder.LimitOrder memory sellOrder,\\n        LibNativeOrder.LimitOrder memory buyOrder,\\n        bytes32 sellOrderHash,\\n        bytes32 buyOrderHash\\n    )\\n        internal\\n        pure\\n    {\\n        // Make sure there is a profitable spread.\\n        // There is a profitable spread iff the cost per unit bought (OrderA.MakerAmount/OrderA.TakerAmount) for each order is greater\\n        // than the profit per unit sold of the matched order (OrderB.TakerAmount/OrderB.MakerAmount).\\n        // This is satisfied by the equations below:\\n        // <sellOrder.makerAssetAmount> / <sellOrder.takerAssetAmount> >= <buyOrder.takerAssetAmount> / <buyOrder.makerAssetAmount>\\n        // AND\\n        // <buyOrder.makerAssetAmount> / <buyOrder.takerAssetAmount> >= <sellOrder.takerAssetAmount> / <sellOrder.makerAssetAmount>\\n        // These equations can be combined to get the following:\\n        if (sellOrder.makerAmount.safeMul(buyOrder.makerAmount) <\\n            sellOrder.takerAmount.safeMul(buyOrder.takerAmount)) {\\n            LibRichErrors.rrevert(LibExchangeRichErrors.NegativeSpreadError(\\n                sellOrderHash,\\n                buyOrderHash\\n            ));\\n        }\\n    }\\n\\n    /// @dev Match two complementary orders that have a profitable spread.\\n    ///      Each order is filled at their respective price point. However, the calculations are\\n    ///      carried out as though the orders are both being filled at the buy order's price point.\\n    ///      The profit made by the sell order goes to the taker (who matched the two orders). This\\n    ///      function is needed to allow for reentrant order matching (used by `batchMatchOrders` and\\n    ///      `batchMatchOrdersWithMaximalFill`).\\n    /// @param sellOrder First order to match.\\n    /// @param buyOrder Second order to match.\\n    /// @param sellSignature Proof that order was created by the sell maker.\\n    /// @param buySignature Proof that order was created by the buy maker.\\n    /// @return matchedFillResults Amounts filled and fees paid by maker and taker of matched orders.\\n    function _matchOrders(\\n        LibNativeOrder.LimitOrder memory sellOrder,\\n        LibNativeOrder.LimitOrder memory buyOrder,\\n        LibSignature.Signature memory sellSignature,\\n        LibSignature.Signature memory buySignature,\\n        uint256 price,\\n        uint8 sellType,\\n        uint8 buyType\\n    )\\n        private\\n        returns (LibNativeOrder.MatchedFillResults memory matchedFillResults)\\n    {\\n        // We assume that buyOrder.takerAssetData == sellOrder.makerAssetData and buyOrder.makerAssetData == sellOrder.takerAssetData\\n        // by pointing these values to the same location in memory. This is cheaper than checking equality.\\n        // If this assumption isn't true, the match will fail at signature validation.\\n        buyOrder.makerToken = sellOrder.takerToken;\\n        buyOrder.takerToken = sellOrder.makerToken;\\n\\n        // Get sell & buy order info\\n        uint128 amountSellByType = sellType == LibNativeOrder.MATCH_AMOUNT ? sellOrder.makerAmount : sellOrder.takerAmount;\\n        uint128 amountBuyByType = buyType == LibNativeOrder.MATCH_AMOUNT ? buyOrder.takerAmount : buyOrder.makerAmount;\\n        LibNativeOrder.OrderInfo memory sellOrderInfo = getOrderInfo(sellOrder, amountSellByType);\\n        LibNativeOrder.OrderInfo memory buyOrderInfo = getOrderInfo(buyOrder, amountBuyByType);\\n\\n        // Either our context is valid or we revert\\n        _assertFillableOrder(\\n            sellOrder,\\n            sellOrderInfo,\\n            msg.sender,\\n            sellSignature\\n        );\\n        _assertFillableOrder(\\n            buyOrder,\\n            buyOrderInfo,\\n            msg.sender,\\n            buySignature\\n        );\\n\\n        LibNativeOrder.MatchOrderInfoPlus memory matchInfo;\\n\\n        matchInfo.sellOrderFilledAmount = sellOrderInfo.makerTokenFilledAmount;\\n        matchInfo.buyOrderFilledAmount = buyOrderInfo.makerTokenFilledAmount;\\n        matchInfo.price = price;\\n        matchInfo.sellOrderHash = sellOrderInfo.orderHash;\\n        matchInfo.buyOrderHash = buyOrderInfo.orderHash;\\n        matchInfo.sellType = sellType;\\n        matchInfo.buyType = buyType;\\n        // Compute proportional fill amounts\\n        matchedFillResults = calculateMatchedFillResults(\\n            sellOrder,\\n            buyOrder,\\n            matchInfo\\n        );\\n\\n        // Settle matched orders. Succeeds or throws.\\n        {\\n            _settleMatchedOrders(\\n                sellOrderInfo.orderHash,\\n                buyOrderInfo.orderHash,\\n                sellOrder,\\n                buyOrder,\\n                msg.sender,\\n                matchedFillResults\\n            );\\n        }\\n\\n\\n        {\\n            uint256 recentAmountSell = sellType == LibNativeOrder.MATCH_AMOUNT ? matchedFillResults.makerAmountFinal : matchedFillResults.takerAmountFinal;\\n            uint256 recentAmountBuy = buyType == LibNativeOrder.MATCH_AMOUNT ? matchedFillResults.makerAmountFinal : matchedFillResults.takerAmountFinal;\\n\\n            // Update exchange state\\n            _updateFilledState(\\n                sellOrderInfo.orderHash,\\n                matchedFillResults.makerAmountFinal,\\n                matchedFillResults.takerAmountFinal,\\n                matchedFillResults.makerAmountFinal,\\n                matchedFillResults.sellFeePaid,\\n                matchedFillResults.returnSellAmount,\\n                recentAmountSell\\n            );\\n\\n            _updateFilledState(\\n                buyOrderInfo.orderHash,\\n                matchedFillResults.makerAmountFinal,\\n                matchedFillResults.takerAmountFinal,\\n                matchedFillResults.takerAmountFinal,\\n                matchedFillResults.buyFeePaid,\\n                matchedFillResults.returnBuyAmount,\\n                recentAmountBuy\\n            );\\n        }\\n\\n        return matchedFillResults;\\n    }\\n\\n    function getMatchOrderResult(\\n        LibNativeOrder.LimitOrder calldata sellOrder,\\n        LibNativeOrder.LimitOrder calldata buyOrder,\\n        uint256 price,\\n        uint8 sellType,\\n        uint8 buyType\\n    )\\n        public\\n        override\\n        view\\n        returns (LibNativeOrder.MatchedFillResults memory matchedFillResults)\\n    {\\n        // Get sell & buy order info\\n        uint128 amountSellByType = sellType == LibNativeOrder.MATCH_AMOUNT ? sellOrder.makerAmount : sellOrder.takerAmount;\\n        uint128 amountBuyByType = buyType == LibNativeOrder.MATCH_AMOUNT ? buyOrder.takerAmount : buyOrder.makerAmount;\\n        LibNativeOrder.OrderInfo memory sellOrderInfo = getOrderInfo(sellOrder, amountSellByType);\\n        LibNativeOrder.OrderInfo memory buyOrderInfo = getOrderInfo(buyOrder, amountBuyByType);\\n\\n        LibNativeOrder.MatchOrderInfoPlus memory matchInfo;\\n        matchInfo.sellOrderFilledAmount = sellOrderInfo.makerTokenFilledAmount;\\n        matchInfo.buyOrderFilledAmount = buyOrderInfo.makerTokenFilledAmount;\\n        matchInfo.price = price;\\n        matchInfo.sellOrderHash = sellOrderInfo.orderHash;\\n        matchInfo.buyOrderHash = buyOrderInfo.orderHash;\\n        matchInfo.sellType = sellType;\\n        matchInfo.buyType = buyType;\\n\\n        // Compute proportional fill amounts\\n        matchedFillResults = calculateMatchedFillResults(\\n            sellOrder,\\n            buyOrder,\\n            matchInfo\\n        );\\n    }\\n\\n    function getOrderHashInfo(bytes32 orderHash) public override view returns (uint256 filled, uint256 feeLock, uint256 locked) {\\n        filled = LibNativeOrdersStorage\\n        .getStorage()\\n        .orderHashToFilledAmount[orderHash];\\n\\n        feeLock = LibNativeOrdersStorage\\n        .getStorage()\\n        .orderHashToFeeAmountRemaining[orderHash];\\n\\n        locked = LibNativeOrdersStorage\\n        .getStorage()\\n        .orderLocked[orderHash];\\n    }\\n\\n    function getOrderInfo(LibNativeOrder.LimitOrder memory order, uint128 amount)\\n    public\\n    override\\n    view\\n    returns (LibNativeOrder.OrderInfo memory orderInfo)\\n    {\\n        // Compute the order hash and fetch the amount of takerAsset that has already been filled\\n        LibNativeOrder.OrderInfo memory orderInfo = getLimitOrderInfoV2(order, amount);\\n\\n        // If order.makerAssetAmount is zero, we also reject the order.\\n        // While the Exchange contract handles them correctly, they create\\n        // edge cases in the supporting infrastructure because they have\\n        // an 'infinite' price when computed by a simple division.\\n        if (order.makerAmount == 0) {\\n            orderInfo.status = LibNativeOrder.OrderStatus.INVALID;\\n            return orderInfo;\\n        }\\n\\n        // If order.takerAssetAmount is zero, then the order will always\\n        // be considered filled because 0 == takerAssetAmount == orderTakerAssetFilledAmount\\n        // Instead of distinguishing between unfilled and filled zero taker\\n        // amount orders, we choose not to support them.\\n        if (order.takerAmount == 0) {\\n            orderInfo.status = LibNativeOrder.OrderStatus.INVALID;\\n            return orderInfo;\\n        }\\n\\n        return orderInfo;\\n    }\\n\\n\\n    function _assertFillableOrder(\\n        LibNativeOrder.LimitOrder memory order,\\n        LibNativeOrder.OrderInfo memory orderInfo,\\n        address takerAddress,\\n        LibSignature.Signature memory signature\\n    )\\n    internal\\n    view\\n    {\\n\\n        uint256 hasLocked = LibNativeOrdersStorage.getStorage().orderLocked[orderInfo.orderHash];\\n        if (hasLocked == 0) {\\n            LibRichErrors.rrevert(LibExchangeRichErrors.OrderStatusError(\\n                orderInfo.orderHash,\\n                LibNativeOrder.OrderStatus(LibNativeOrder.OrderStatus.INVALID)\\n            ));\\n        }\\n\\n        // An order can only be filled if its status is FILLABLE.\\n        if (orderInfo.status != LibNativeOrder.OrderStatus.FILLABLE) {\\n            LibRichErrors.rrevert(LibExchangeRichErrors.OrderStatusError(\\n                    orderInfo.orderHash,\\n                    LibNativeOrder.OrderStatus(orderInfo.status)\\n                ));\\n        }\\n        // Validate sender is allowed to fill this order\\n        if (order.sender != address(0)) {\\n            if (order.sender != msg.sender) {\\n                LibRichErrors.rrevert(LibExchangeRichErrors.ExchangeInvalidContextError(\\n                    LibExchangeRichErrors.ExchangeContextErrorCodes.INVALID_SENDER,\\n                    orderInfo.orderHash,\\n                    msg.sender\\n                ));\\n            }\\n        }\\n\\n        // Validate taker is allowed to fill this order\\n        if (order.taker != address(0)) {\\n            if (order.taker != takerAddress) {\\n                LibRichErrors.rrevert(LibExchangeRichErrors.ExchangeInvalidContextError(\\n                    LibExchangeRichErrors.ExchangeContextErrorCodes.INVALID_TAKER,\\n                    orderInfo.orderHash,\\n                    takerAddress\\n                ));\\n            }\\n        }\\n\\n        // Signature must be valid for the order.\\n        {\\n            address signer = LibSignature.getSignerOfHash(\\n                orderInfo.orderHash,\\n                signature\\n            );\\n            if (signer != order.maker) {\\n                LibRichErrors.rrevert(LibExchangeRichErrors.SignatureError(\\n                    LibExchangeRichErrors.SignatureErrorCodes.BAD_ORDER_SIGNATURE,\\n                    orderInfo.orderHash\\n                ));\\n            }\\n        }\\n    }\\n\\n    function calculateMatchedFillResults(\\n        LibNativeOrder.LimitOrder memory sellOrder,\\n        LibNativeOrder.LimitOrder memory buyOrder,\\n        LibNativeOrder.MatchOrderInfoPlus memory matchInfo\\n    )\\n    internal\\n    view\\n    returns (LibNativeOrder.MatchedFillResults memory matchedFillResults)\\n    {\\n        uint256 decimal = LibNativeOrdersStorage.getStorage().decimalPrice;\\n        // Derive maker asset amounts for sell & buy orders, given store taker assert amounts\\n        uint256 sellRemaining = matchInfo.sellType == LibNativeOrder.MATCH_AMOUNT \\n            ? sellOrder.makerAmount.safeSub(matchInfo.sellOrderFilledAmount)\\n            : sellOrder.takerAmount.safeSub(matchInfo.sellOrderFilledAmount);\\n        uint256 buyRemaining = matchInfo.buyType == LibNativeOrder.MATCH_AMOUNT\\n            ? buyOrder.takerAmount.safeSub(matchInfo.buyOrderFilledAmount)\\n            : buyOrder.makerAmount.safeSub(matchInfo.buyOrderFilledAmount);\\n\\n        uint256 sellAmountRemaining = matchInfo.sellType == LibNativeOrder.MATCH_AMOUNT ? sellRemaining : \\n            sellRemaining.safeMul(decimal).safeDiv(matchInfo.price);\\n\\n        uint256 buyAmountRemaining = matchInfo.buyType == LibNativeOrder.MATCH_AMOUNT ? buyRemaining : \\n            buyRemaining.safeMul(decimal).safeDiv(matchInfo.price);\\n\\n        if (sellAmountRemaining == buyAmountRemaining) {\\n            matchedFillResults.makerAmountFinal = sellAmountRemaining;\\n            matchedFillResults.takerAmountFinal = sellAmountRemaining.safeMul(matchInfo.price).safeDiv(decimal);\\n            //fee\\n            matchedFillResults.sellFeePaid = LibNativeOrdersStorage.getStorage().orderHashToFeeAmountRemaining[matchInfo.sellOrderHash];\\n            matchedFillResults.buyFeePaid = LibNativeOrdersStorage.getStorage().orderHashToFeeAmountRemaining[matchInfo.buyOrderHash];\\n\\n        } else if (sellAmountRemaining > buyAmountRemaining) {\\n            matchedFillResults.makerAmountFinal = buyAmountRemaining;\\n            matchedFillResults.takerAmountFinal = buyAmountRemaining.safeMul(matchInfo.price).safeDiv(decimal);\\n            // fee\\n            matchedFillResults.sellFeePaid = getFeeMatch(\\n                sellOrder,\\n                matchInfo.sellType,\\n                matchedFillResults\\n            );\\n            matchedFillResults.buyFeePaid = LibNativeOrdersStorage.getStorage().orderHashToFeeAmountRemaining[matchInfo.buyOrderHash];\\n\\n        } else {\\n            // sell order will full filled.\\n            matchedFillResults.makerAmountFinal = sellAmountRemaining;\\n            matchedFillResults.takerAmountFinal = sellAmountRemaining.safeMul(matchInfo.price).safeDiv(decimal);\\n            //fee\\n            matchedFillResults.sellFeePaid = LibNativeOrdersStorage.getStorage().orderHashToFeeAmountRemaining[matchInfo.sellOrderHash];\\n            matchedFillResults.buyFeePaid = getFeeMatch(\\n                buyOrder,\\n                matchInfo.buyType,\\n                matchedFillResults\\n            );\\n        }\\n\\n        if (matchInfo.sellType == LibNativeOrder.MATCH_TOTAL) {\\n            uint256 makerAmountRemainingSell = sellRemaining\\n                .safeSub(matchedFillResults.takerAmountFinal)\\n                .safeMul(sellOrder.makerAmount)\\n                .safeDiv(sellOrder.takerAmount);\\n            matchedFillResults.returnSellAmount = sellRemaining.safeMul(sellOrder.makerAmount).safeDiv(sellOrder.takerAmount);\\n            matchedFillResults.returnSellAmount = matchedFillResults.returnSellAmount.safeSub(matchedFillResults.makerAmountFinal).safeSub(makerAmountRemainingSell);\\n        }\\n\\n        if (matchInfo.buyType == LibNativeOrder.MATCH_AMOUNT) {\\n            uint256 takerAmountRemainingBuy = buyRemaining\\n                .safeSub(matchedFillResults.makerAmountFinal)\\n                .safeMul(buyOrder.makerAmount)\\n                .safeDiv(buyOrder.takerAmount);\\n            matchedFillResults.returnBuyAmount =\\n                buyRemaining\\n                .safeMul(buyOrder.makerAmount)\\n                .safeDiv(buyOrder.takerAmount)\\n                .safeSub(matchedFillResults.takerAmountFinal)\\n                .safeSub(takerAmountRemainingBuy);\\n        }\\n\\n        return matchedFillResults;\\n    }\\n\\n    function getFeeMatch(\\n        LibNativeOrder.LimitOrder memory order,\\n        uint256 typeOrder,\\n        LibNativeOrder.MatchedFillResults memory matchedFillResults\\n    )\\n    internal\\n    view\\n    returns (uint256 fee) {\\n        if (typeOrder == LibNativeOrder.MATCH_AMOUNT) {\\n            fee = LibMathV06.safeGetPartialAmountFloor(\\n                matchedFillResults.makerAmountFinal,\\n                order.makerAmount,\\n                order.takerTokenFeeAmount\\n            );\\n        } else {\\n            fee = LibMathV06.safeGetPartialAmountFloor(\\n                matchedFillResults.takerAmountFinal,\\n                order.takerAmount,\\n                order.takerTokenFeeAmount\\n            );\\n        }\\n    }\\n\\n    /// @dev Settles matched order by transferring appropriate funds between order makers, taker, and fee recipient.\\n    /// @param sellOrderHash First matched order hash.\\n    /// @param buyOrderHash Second matched order hash.\\n    /// @param sellOrder First matched order.\\n    /// @param buyOrder Second matched order.\\n    /// @param senderAddress Address that matched the orders. The taker receives the spread between orders as profit.\\n    /// @param matchedFillResults Struct holding amounts to transfer between makers, taker, and fee recipients.\\n    function _settleMatchedOrders(\\n        bytes32 sellOrderHash,\\n        bytes32 buyOrderHash,\\n        LibNativeOrder.LimitOrder memory sellOrder,\\n        LibNativeOrder.LimitOrder memory buyOrder,\\n        address senderAddress,\\n        LibNativeOrder.MatchedFillResults memory matchedFillResults\\n    )\\n        private\\n    {\\n        {\\n            sendBalanceTo(\\n                buyOrder.makerToken,\\n                sellOrder.maker,\\n                matchedFillResults.takerAmountFinal\\n            );\\n        }\\n\\n        {\\n            sendBalanceTo(\\n                sellOrder.makerToken,\\n                buyOrder.maker,\\n                matchedFillResults.makerAmountFinal\\n            );\\n        }\\n\\n        {\\n            //fee for each order\\n            sendBalanceTo(\\n                buyOrder.makerToken,\\n                senderAddress,\\n                matchedFillResults.buyFeePaid\\n            );\\n        }\\n\\n        {\\n            sendBalanceTo(\\n                sellOrder.makerToken,\\n                senderAddress,\\n                matchedFillResults.sellFeePaid\\n            );\\n        }\\n\\n\\n        if (matchedFillResults.returnSellAmount > 0) {\\n            sendBalanceTo(\\n                sellOrder.makerToken,\\n                sellOrder.maker,\\n                matchedFillResults.returnSellAmount\\n            );\\n        }\\n\\n        if (matchedFillResults.returnBuyAmount > 0) {\\n            sendBalanceTo(\\n                buyOrder.makerToken,\\n                buyOrder.maker,\\n                matchedFillResults.returnBuyAmount\\n            );\\n        }\\n\\n    }\\n\\n    function _updateFilledState(\\n        bytes32 orderHash,\\n        uint256 makerAmountFinal,\\n        uint256 takerAmountFinal,\\n        uint256 makerRecentFilledAmount,\\n        uint256 feePaid,\\n        uint256 returnAmount,\\n        uint256 recentAmount\\n        \\n    )\\n    private\\n    {\\n        LibNativeOrdersStorage.getStorage().orderHashToFilledAmount[orderHash] = \\n            LibNativeOrdersStorage.getStorage()\\n            .orderHashToFilledAmount[orderHash]\\n            .safeAdd(recentAmount);\\n\\n        LibNativeOrdersStorage\\n        .getStorage()\\n        .orderHashToFeeAmountRemaining[orderHash] = LibNativeOrdersStorage.getStorage().orderHashToFeeAmountRemaining[orderHash].safeSub(feePaid);\\n\\n        LibNativeOrdersStorage\\n        .getStorage()\\n        .orderLocked[orderHash] = LibNativeOrdersStorage.getStorage().orderLocked[orderHash]\\n                                                        .safeSub(makerRecentFilledAmount)\\n                                                        .safeSub(feePaid)\\n                                                        .safeSub(returnAmount);\\n\\n        // Update state\\n\\n        emit Fill(\\n            orderHash,\\n            makerAmountFinal,\\n            takerAmountFinal,\\n            feePaid\\n        );\\n    }\\n\\n    function setDecimalPrice(uint256 _decimal) override public onlyOwner {\\n        LibNativeOrdersStorage\\n        .getStorage()\\n        .decimalPrice = _decimal;\\n    }\\n\\n    function getDecimalPrice() view override public returns (uint256) {\\n        uint256 decimal = LibNativeOrdersStorage.getStorage().decimalPrice;\\n        if (decimal == 0) {\\n            decimal = 10 ** 10;\\n        }\\n        // return LibNativeOrdersStorage.getStorage().decimalPrice;\\n        return decimal;\\n    }\\n\\n\\n    function compare(uint8 typeOrder) view override public returns (uint256 sellRemaining) {\\n        sellRemaining = typeOrder == LibNativeOrder.MATCH_AMOUNT \\n            ? 100\\n            : 200;\\n    }\\n\\n    function migrate()\\n    external\\n    returns (bytes4 success)\\n    {\\n        _registerFeatureFunction(this.matchOrders.selector);\\n        _registerFeatureFunction(this.getOrderHashInfo.selector);\\n        _registerFeatureFunction(this.getMatchOrderResult.selector);\\n        _registerFeatureFunction(this.setDecimalPrice.selector);\\n        _registerFeatureFunction(this.getDecimalPrice.selector);\\n        _registerFeatureFunction(this.getOrderInfo.selector);\\n        _registerFeatureFunction(this.compare.selector);\\n        return LibMigrate.MIGRATE_SUCCESS;\\n    }\\n}\\n\\n\",\"keccak256\":\"0x81f301ebec4c38d2937034c9f2eed3fcafb9940bd8a71298fcaa0e2ccc0df9fb\"},\"contracts/zero-ex/contracts/src/features/interfaces/IFeature.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\n\\n/// @dev Basic interface for a feature contract.\\ninterface IFeature {\\n\\n    // solhint-disable func-name-mixedcase\\n\\n    /// @dev The name of this feature set.\\n    function FEATURE_NAME() external view returns (string memory name);\\n\\n    /// @dev The version of this feature set.\\n    function FEATURE_VERSION() external view returns (uint256 version);\\n}\\n\",\"keccak256\":\"0x95e4108668c121a4d7072c8cf579ce349fb1287e2259aed613e45d716ceb3905\",\"license\":\"Apache-2.0\"},\"contracts/zero-ex/contracts/src/features/interfaces/IMatchOrdersFeature.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\\\";\\nimport \\\"../libs/LibSignature.sol\\\";\\nimport \\\"../libs/LibNativeOrder.sol\\\";\\n\\n\\n/// @dev Feature for interacting with limit orders.\\ninterface IMatchOrdersFeature\\n{\\n  event Fill(\\n      bytes32 indexed orderHash,\\n      uint256 makerAmountFinal,       \\n      uint256 takerAmountFinal,       \\n      uint256 feePaid\\n  );\\n\\n  event TransferMatchDone(\\n    uint256 stt,\\n    address from,\\n    address to,\\n    uint256 amount\\n  );\\n\\n  function matchOrders(\\n      LibNativeOrder.LimitOrder calldata leftOrder,\\n      LibNativeOrder.LimitOrder calldata rightOrder,\\n      LibSignature.Signature calldata leftSignature,\\n      LibSignature.Signature calldata rightSignature,\\n      uint256 price,\\n      uint8 sellType,\\n      uint8 buyType\\n  )\\n      external\\n      payable\\n      returns (LibNativeOrder.MatchedFillResults memory matchedFillResults);\\n\\n\\n  function getOrderHashInfo(\\n        bytes32 orderHash\\n    )\\n        external\\n        view\\n        returns (uint256 filled, uint256 feeLock, uint256 locked);\\n\\n  function getMatchOrderResult(\\n        LibNativeOrder.LimitOrder calldata sellOrder,\\n        LibNativeOrder.LimitOrder calldata buyOrder,\\n        uint256 price,\\n        uint8 sellType,\\n        uint8 buyType\\n    )\\n        external\\n        view\\n      returns (LibNativeOrder.MatchedFillResults memory matchedFillResults);\\n\\n  function setDecimalPrice(uint256 _decimal) external;\\n  function getDecimalPrice() view external returns (uint256);\\n  function compare(uint8 typeOrder) view external returns (uint256 sellRemaining);\\n\\n  function getOrderInfo(LibNativeOrder.LimitOrder memory order, uint128 amount)\\n    external\\n    view\\n    returns (LibNativeOrder.OrderInfo memory orderInfo);\\n}\\n\",\"keccak256\":\"0xfc6199311e782ad81c38ed32b86a7a6c735473751543a10c2933172bd562d10e\",\"license\":\"Apache-2.0\"},\"contracts/zero-ex/contracts/src/features/interfaces/IOwnableFeature.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-utils/contracts/src/v06/interfaces/IOwnableV06.sol\\\";\\n\\n\\n// solhint-disable no-empty-blocks\\n/// @dev Owner management and migration features.\\ninterface IOwnableFeature is\\n    IOwnableV06\\n{\\n    /// @dev Emitted when `migrate()` is called.\\n    /// @param caller The caller of `migrate()`.\\n    /// @param migrator The migration contract.\\n    /// @param newOwner The address of the new owner.\\n    event Migrated(address caller, address migrator, address newOwner);\\n\\n    /// @dev Execute a migration function in the context of the ZeroEx contract.\\n    ///      The result of the function being called should be the magic bytes\\n    ///      0x2c64c5ef (`keccack('MIGRATE_SUCCESS')`). Only callable by the owner.\\n    ///      The owner will be temporarily set to `address(this)` inside the call.\\n    ///      Before returning, the owner will be set to `newOwner`.\\n    /// @param target The migrator contract address.\\n    /// @param newOwner The address of the new owner.\\n    /// @param data The call data.\\n    function migrate(address target, bytes calldata data, address newOwner) external;\\n}\\n\",\"keccak256\":\"0xb45664696035dbe3cb1f1efaedfcebbf8afec4628d06cab7dca9e8d854a041dd\",\"license\":\"Apache-2.0\"},\"contracts/zero-ex/contracts/src/features/interfaces/ISimpleFunctionRegistryFeature.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\n\\n/// @dev Basic registry management features.\\ninterface ISimpleFunctionRegistryFeature {\\n\\n    /// @dev A function implementation was updated via `extend()` or `rollback()`.\\n    /// @param selector The function selector.\\n    /// @param oldImpl The implementation contract address being replaced.\\n    /// @param newImpl The replacement implementation contract address.\\n    event ProxyFunctionUpdated(bytes4 indexed selector, address oldImpl, address newImpl);\\n\\n    /// @dev Roll back to a prior implementation of a function.\\n    /// @param selector The function selector.\\n    /// @param targetImpl The address of an older implementation of the function.\\n    function rollback(bytes4 selector, address targetImpl) external;\\n\\n    /// @dev Register or replace a function.\\n    /// @param selector The function selector.\\n    /// @param impl The implementation contract for the function.\\n    function extend(bytes4 selector, address impl) external;\\n\\n    /// @dev Retrieve the length of the rollback history for a function.\\n    /// @param selector The function selector.\\n    /// @return rollbackLength The number of items in the rollback history for\\n    ///         the function.\\n    function getRollbackLength(bytes4 selector)\\n        external\\n        view\\n        returns (uint256 rollbackLength);\\n\\n    /// @dev Retrieve an entry in the rollback history for a function.\\n    /// @param selector The function selector.\\n    /// @param idx The index in the rollback history.\\n    /// @return impl An implementation address for the function at\\n    ///         index `idx`.\\n    function getRollbackEntryAtIndex(bytes4 selector, uint256 idx)\\n        external\\n        view\\n        returns (address impl);\\n}\\n\",\"keccak256\":\"0x07507897f6b0f0e62895b7a0124ecc27f202b25cb682c9d8dc5eaf79a64a9233\",\"license\":\"Apache-2.0\"},\"contracts/zero-ex/contracts/src/features/libs/LibExchangeRichErrors.sol\":{\"content\":\"/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\nimport \\\"./LibRichErrors.sol\\\";\\nimport \\\"./LibNativeOrder.sol\\\";\\n\\n\\nlibrary LibExchangeRichErrors {\\n\\n    enum AssetProxyDispatchErrorCodes {\\n        INVALID_ASSET_DATA_LENGTH,\\n        UNKNOWN_ASSET_PROXY\\n    }\\n\\n    enum BatchMatchOrdersErrorCodes {\\n        ZERO_LEFT_ORDERS,\\n        ZERO_RIGHT_ORDERS,\\n        INVALID_LENGTH_LEFT_SIGNATURES,\\n        INVALID_LENGTH_RIGHT_SIGNATURES\\n    }\\n\\n    enum ExchangeContextErrorCodes {\\n        INVALID_MAKER,\\n        INVALID_TAKER,\\n        INVALID_SENDER\\n    }\\n\\n    enum FillErrorCodes {\\n        INVALID_TAKER_AMOUNT,\\n        TAKER_OVERPAY,\\n        OVERFILL,\\n        INVALID_FILL_PRICE\\n    }\\n\\n    enum SignatureErrorCodes {\\n        BAD_ORDER_SIGNATURE,\\n        BAD_TRANSACTION_SIGNATURE,\\n        INVALID_LENGTH,\\n        UNSUPPORTED,\\n        ILLEGAL,\\n        INAPPROPRIATE_SIGNATURE_TYPE,\\n        INVALID_SIGNER\\n    }\\n\\n    enum TransactionErrorCodes {\\n        ALREADY_EXECUTED,\\n        EXPIRED\\n    }\\n\\n    enum IncompleteFillErrorCode {\\n        INCOMPLETE_MARKET_BUY_ORDERS,\\n        INCOMPLETE_MARKET_SELL_ORDERS,\\n        INCOMPLETE_FILL_ORDER\\n    }\\n\\n    // bytes4(keccak256(\\\"SignatureError(uint8,bytes32,address,bytes)\\\"))\\n    bytes4 internal constant SIGNATURE_ERROR_SELECTOR =\\n        0x7e5a2318;\\n\\n    // bytes4(keccak256(\\\"SignatureValidatorNotApprovedError(address,address)\\\"))\\n    bytes4 internal constant SIGNATURE_VALIDATOR_NOT_APPROVED_ERROR_SELECTOR =\\n        0xa15c0d06;\\n\\n    // bytes4(keccak256(\\\"EIP1271SignatureError(address,bytes,bytes,bytes)\\\"))\\n    bytes4 internal constant EIP1271_SIGNATURE_ERROR_SELECTOR =\\n        0x5bd0428d;\\n\\n    // bytes4(keccak256(\\\"SignatureWalletError(bytes32,address,bytes,bytes)\\\"))\\n    bytes4 internal constant SIGNATURE_WALLET_ERROR_SELECTOR =\\n        0x1b8388f7;\\n\\n    // bytes4(keccak256(\\\"OrderStatusError(bytes32,uint8)\\\"))\\n    bytes4 internal constant ORDER_STATUS_ERROR_SELECTOR =\\n        0xfdb6ca8d;\\n\\n    // bytes4(keccak256(\\\"ExchangeInvalidContextError(uint8,bytes32,address)\\\"))\\n    bytes4 internal constant EXCHANGE_INVALID_CONTEXT_ERROR_SELECTOR =\\n        0xe53c76c8;\\n\\n    // bytes4(keccak256(\\\"FillError(uint8,bytes32)\\\"))\\n    bytes4 internal constant FILL_ERROR_SELECTOR =\\n        0xe94a7ed0;\\n\\n    // bytes4(keccak256(\\\"OrderEpochError(address,address,uint256)\\\"))\\n    bytes4 internal constant ORDER_EPOCH_ERROR_SELECTOR =\\n        0x4ad31275;\\n\\n    // bytes4(keccak256(\\\"AssetProxyExistsError(bytes4,address)\\\"))\\n    bytes4 internal constant ASSET_PROXY_EXISTS_ERROR_SELECTOR =\\n        0x11c7b720;\\n\\n    // bytes4(keccak256(\\\"AssetProxyDispatchError(uint8,bytes32,bytes)\\\"))\\n    bytes4 internal constant ASSET_PROXY_DISPATCH_ERROR_SELECTOR =\\n        0x488219a6;\\n\\n    // bytes4(keccak256(\\\"AssetProxyTransferError(bytes32,bytes,bytes)\\\"))\\n    bytes4 internal constant ASSET_PROXY_TRANSFER_ERROR_SELECTOR =\\n        0x4678472b;\\n\\n    // bytes4(keccak256(\\\"NegativeSpreadError(bytes32,bytes32)\\\"))\\n    bytes4 internal constant NEGATIVE_SPREAD_ERROR_SELECTOR =\\n        0xb6555d6f;\\n\\n    // bytes4(keccak256(\\\"TransactionError(uint8,bytes32)\\\"))\\n    bytes4 internal constant TRANSACTION_ERROR_SELECTOR =\\n        0xf5985184;\\n\\n    // bytes4(keccak256(\\\"TransactionExecutionError(bytes32,bytes)\\\"))\\n    bytes4 internal constant TRANSACTION_EXECUTION_ERROR_SELECTOR =\\n        0x20d11f61;\\n    \\n    // bytes4(keccak256(\\\"TransactionGasPriceError(bytes32,uint256,uint256)\\\"))\\n    bytes4 internal constant TRANSACTION_GAS_PRICE_ERROR_SELECTOR =\\n        0xa26dac09;\\n\\n    // bytes4(keccak256(\\\"TransactionInvalidContextError(bytes32,address)\\\"))\\n    bytes4 internal constant TRANSACTION_INVALID_CONTEXT_ERROR_SELECTOR =\\n        0xdec4aedf;\\n\\n    // bytes4(keccak256(\\\"IncompleteFillError(uint8,uint256,uint256)\\\"))\\n    bytes4 internal constant INCOMPLETE_FILL_ERROR_SELECTOR =\\n        0x18e4b141;\\n\\n    // bytes4(keccak256(\\\"BatchMatchOrdersError(uint8)\\\"))\\n    bytes4 internal constant BATCH_MATCH_ORDERS_ERROR_SELECTOR =\\n        0xd4092f4f;\\n\\n    // bytes4(keccak256(\\\"PayProtocolFeeError(bytes32,uint256,address,address,bytes)\\\"))\\n    bytes4 internal constant PAY_PROTOCOL_FEE_ERROR_SELECTOR =\\n        0x87cb1e75;\\n\\n    // solhint-disable func-name-mixedcase\\n    function SignatureErrorSelector()\\n        internal\\n        pure\\n        returns (bytes4)\\n    {\\n        return SIGNATURE_ERROR_SELECTOR;\\n    }\\n\\n    function SignatureValidatorNotApprovedErrorSelector()\\n        internal\\n        pure\\n        returns (bytes4)\\n    {\\n        return SIGNATURE_VALIDATOR_NOT_APPROVED_ERROR_SELECTOR;\\n    }\\n\\n    function EIP1271SignatureErrorSelector()\\n        internal\\n        pure\\n        returns (bytes4)\\n    {\\n        return EIP1271_SIGNATURE_ERROR_SELECTOR;\\n    }\\n\\n    function SignatureWalletErrorSelector()\\n        internal\\n        pure\\n        returns (bytes4)\\n    {\\n        return SIGNATURE_WALLET_ERROR_SELECTOR;\\n    }\\n\\n    function OrderStatusErrorSelector()\\n        internal\\n        pure\\n        returns (bytes4)\\n    {\\n        return ORDER_STATUS_ERROR_SELECTOR;\\n    }\\n\\n    function ExchangeInvalidContextErrorSelector()\\n        internal\\n        pure\\n        returns (bytes4)\\n    {\\n        return EXCHANGE_INVALID_CONTEXT_ERROR_SELECTOR;\\n    }\\n\\n    function FillErrorSelector()\\n        internal\\n        pure\\n        returns (bytes4)\\n    {\\n        return FILL_ERROR_SELECTOR;\\n    }\\n\\n    function OrderEpochErrorSelector()\\n        internal\\n        pure\\n        returns (bytes4)\\n    {\\n        return ORDER_EPOCH_ERROR_SELECTOR;\\n    }\\n\\n    function AssetProxyExistsErrorSelector()\\n        internal\\n        pure\\n        returns (bytes4)\\n    {\\n        return ASSET_PROXY_EXISTS_ERROR_SELECTOR;\\n    }\\n\\n    function AssetProxyDispatchErrorSelector()\\n        internal\\n        pure\\n        returns (bytes4)\\n    {\\n        return ASSET_PROXY_DISPATCH_ERROR_SELECTOR;\\n    }\\n\\n    function AssetProxyTransferErrorSelector()\\n        internal\\n        pure\\n        returns (bytes4)\\n    {\\n        return ASSET_PROXY_TRANSFER_ERROR_SELECTOR;\\n    }\\n\\n    function NegativeSpreadErrorSelector()\\n        internal\\n        pure\\n        returns (bytes4)\\n    {\\n        return NEGATIVE_SPREAD_ERROR_SELECTOR;\\n    }\\n\\n    function TransactionErrorSelector()\\n        internal\\n        pure\\n        returns (bytes4)\\n    {\\n        return TRANSACTION_ERROR_SELECTOR;\\n    }\\n\\n    function TransactionExecutionErrorSelector()\\n        internal\\n        pure\\n        returns (bytes4)\\n    {\\n        return TRANSACTION_EXECUTION_ERROR_SELECTOR;\\n    }\\n\\n    function IncompleteFillErrorSelector()\\n        internal\\n        pure\\n        returns (bytes4)\\n    {\\n        return INCOMPLETE_FILL_ERROR_SELECTOR;\\n    }\\n\\n    function BatchMatchOrdersErrorSelector()\\n        internal\\n        pure\\n        returns (bytes4)\\n    {\\n        return BATCH_MATCH_ORDERS_ERROR_SELECTOR;\\n    }\\n\\n    function TransactionGasPriceErrorSelector()\\n        internal\\n        pure\\n        returns (bytes4)\\n    {\\n        return TRANSACTION_GAS_PRICE_ERROR_SELECTOR;\\n    }\\n\\n    function TransactionInvalidContextErrorSelector()\\n        internal\\n        pure\\n        returns (bytes4)\\n    {\\n        return TRANSACTION_INVALID_CONTEXT_ERROR_SELECTOR;\\n    }\\n\\n    function PayProtocolFeeErrorSelector()\\n        internal\\n        pure\\n        returns (bytes4)\\n    {\\n        return PAY_PROTOCOL_FEE_ERROR_SELECTOR;\\n    }\\n    \\n    function BatchMatchOrdersError(\\n        BatchMatchOrdersErrorCodes errorCode\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            BATCH_MATCH_ORDERS_ERROR_SELECTOR,\\n            errorCode\\n        );\\n    }\\n\\n    function SignatureError(\\n        SignatureErrorCodes errorCode,\\n        bytes32 hash\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            SIGNATURE_ERROR_SELECTOR,\\n            errorCode,\\n            hash\\n        );\\n    }\\n\\n    function SignatureValidatorNotApprovedError(\\n        address signerAddress,\\n        address validatorAddress\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            SIGNATURE_VALIDATOR_NOT_APPROVED_ERROR_SELECTOR,\\n            signerAddress,\\n            validatorAddress\\n        );\\n    }\\n\\n    function EIP1271SignatureError(\\n        address verifyingContractAddress,\\n        bytes memory data,\\n        bytes memory signature,\\n        bytes memory errorData\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            EIP1271_SIGNATURE_ERROR_SELECTOR,\\n            verifyingContractAddress,\\n            data,\\n            signature,\\n            errorData\\n        );\\n    }\\n\\n    function SignatureWalletError(\\n        bytes32 hash,\\n        address walletAddress,\\n        bytes memory signature,\\n        bytes memory errorData\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            SIGNATURE_WALLET_ERROR_SELECTOR,\\n            hash,\\n            walletAddress,\\n            signature,\\n            errorData\\n        );\\n    }\\n\\n    function OrderStatusError(\\n        bytes32 orderHash,\\n        LibNativeOrder.OrderStatus orderStatus\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            ORDER_STATUS_ERROR_SELECTOR,\\n            orderHash,\\n            orderStatus\\n        );\\n    }\\n\\n    function ExchangeInvalidContextError(\\n        ExchangeContextErrorCodes errorCode,\\n        bytes32 orderHash,\\n        address contextAddress\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            EXCHANGE_INVALID_CONTEXT_ERROR_SELECTOR,\\n            errorCode,\\n            orderHash,\\n            contextAddress\\n        );\\n    }\\n\\n    function FillError(\\n        FillErrorCodes errorCode,\\n        bytes32 orderHash\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            FILL_ERROR_SELECTOR,\\n            errorCode,\\n            orderHash\\n        );\\n    }\\n\\n    function OrderEpochError(\\n        address makerAddress,\\n        address orderSenderAddress,\\n        uint256 currentEpoch\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            ORDER_EPOCH_ERROR_SELECTOR,\\n            makerAddress,\\n            orderSenderAddress,\\n            currentEpoch\\n        );\\n    }\\n\\n    function AssetProxyExistsError(\\n        bytes4 assetProxyId,\\n        address assetProxyAddress\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            ASSET_PROXY_EXISTS_ERROR_SELECTOR,\\n            assetProxyId,\\n            assetProxyAddress\\n        );\\n    }\\n\\n    function AssetProxyDispatchError(\\n        AssetProxyDispatchErrorCodes errorCode,\\n        bytes32 orderHash,\\n        bytes memory assetData\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            ASSET_PROXY_DISPATCH_ERROR_SELECTOR,\\n            errorCode,\\n            orderHash,\\n            assetData\\n        );\\n    }\\n\\n    function AssetProxyTransferError(\\n        bytes32 orderHash,\\n        bytes memory assetData,\\n        bytes memory errorData\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            ASSET_PROXY_TRANSFER_ERROR_SELECTOR,\\n            orderHash,\\n            assetData,\\n            errorData\\n        );\\n    }\\n\\n    function NegativeSpreadError(\\n        bytes32 leftOrderHash,\\n        bytes32 rightOrderHash\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            NEGATIVE_SPREAD_ERROR_SELECTOR,\\n            leftOrderHash,\\n            rightOrderHash\\n        );\\n    }\\n\\n    function TransactionError(\\n        TransactionErrorCodes errorCode,\\n        bytes32 transactionHash\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            TRANSACTION_ERROR_SELECTOR,\\n            errorCode,\\n            transactionHash\\n        );\\n    }\\n\\n    function TransactionExecutionError(\\n        bytes32 transactionHash,\\n        bytes memory errorData\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            TRANSACTION_EXECUTION_ERROR_SELECTOR,\\n            transactionHash,\\n            errorData\\n        );\\n    }\\n\\n    function TransactionGasPriceError(\\n        bytes32 transactionHash,\\n        uint256 actualGasPrice,\\n        uint256 requiredGasPrice\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            TRANSACTION_GAS_PRICE_ERROR_SELECTOR,\\n            transactionHash,\\n            actualGasPrice,\\n            requiredGasPrice\\n        );\\n    }\\n\\n    function TransactionInvalidContextError(\\n        bytes32 transactionHash,\\n        address currentContextAddress\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            TRANSACTION_INVALID_CONTEXT_ERROR_SELECTOR,\\n            transactionHash,\\n            currentContextAddress\\n        );\\n    }\\n\\n    function IncompleteFillError(\\n        IncompleteFillErrorCode errorCode,\\n        uint256 expectedAssetFillAmount,\\n        uint256 actualAssetFillAmount\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            INCOMPLETE_FILL_ERROR_SELECTOR,\\n            errorCode,\\n            expectedAssetFillAmount,\\n            actualAssetFillAmount\\n        );\\n    }\\n\\n    function PayProtocolFeeError(\\n        bytes32 orderHash,\\n        uint256 protocolFee,\\n        address makerAddress,\\n        address takerAddress,\\n        bytes memory errorData\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            PAY_PROTOCOL_FEE_ERROR_SELECTOR,\\n            orderHash,\\n            protocolFee,\\n            makerAddress,\\n            takerAddress,\\n            errorData\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x33d80bc14e9266ff733e871bb8a49e2b838af8a6a562e6994726ddd30e4a0417\"},\"contracts/zero-ex/contracts/src/features/libs/LibNativeOrder.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\\\";\\nimport \\\"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\\\";\\nimport \\\"../../errors/LibNativeOrdersRichErrors.sol\\\";\\n\\n\\n/// @dev A library for common native order operations.\\nlibrary LibNativeOrder {\\n    using LibSafeMathV06 for uint256;\\n    using LibRichErrorsV06 for bytes;\\n\\n    enum OrderStatus {\\n        INVALID,\\n        FILLABLE,\\n        FILLED,\\n        CANCELLED,\\n        EXPIRED\\n    }\\n\\n    /// @dev A standard OTC or OO limit order.\\n    struct LimitOrder {\\n        IERC20TokenV06 makerToken;\\n        IERC20TokenV06 takerToken;\\n        uint128 makerAmount;\\n        uint128 takerAmount;\\n        uint128 takerTokenFeeAmount;\\n        address maker;\\n        address taker;\\n        address sender;\\n        address feeRecipient;\\n        bytes32 pool;\\n        uint64 expiry;\\n        uint256 salt;\\n    }\\n\\n    /// @dev An RFQ limit order.\\n    struct RfqOrder {\\n        IERC20TokenV06 makerToken;\\n        IERC20TokenV06 takerToken;\\n        uint128 makerAmount;\\n        uint128 takerAmount;\\n        address maker;\\n        address taker;\\n        address txOrigin;\\n        bytes32 pool;\\n        uint64 expiry;\\n        uint256 salt;\\n    }\\n\\n    /// @dev Info on a limit or RFQ order.\\n    struct OrderInfo {\\n        bytes32 orderHash;\\n        OrderStatus status;\\n        uint128 makerTokenFilledAmount;\\n        uint128 takerTokenFilledAmount;\\n    }\\n\\n    struct FillResults {\\n        uint256 makerAssetFilledAmount;  // Total amount of makerAsset(s) filled.\\n        uint256 takerAssetFilledAmount;  // Total amount of takerAsset(s) filled.\\n        uint256 makerFeePaid;            // Total amount of fees paid by maker(s) to feeRecipient(s).\\n        uint256 takerFeePaid;            // Total amount of fees paid by taker to feeRecipients(s).\\n        uint256 protocolFeePaid;         // Total amount of fees paid by taker to the staking contract.\\n    }\\n\\n    struct MatchedFillResults {\\n        uint256 makerAmountFinal;\\n        uint256 takerAmountFinal;\\n        uint256 sellFeePaid;\\n        uint256 buyFeePaid;\\n        uint256 returnSellAmount;\\n        uint256 returnBuyAmount;\\n    }\\n\\n    struct MatchOrderInfoPlus {\\n        uint256 sellOrderFilledAmount;\\n        uint256 buyOrderFilledAmount;\\n        uint256 price;\\n        bytes32 sellOrderHash;\\n        bytes32 buyOrderHash;\\n        uint8 sellType;\\n        uint8 buyType;\\n    }\\n\\n    uint256 private constant UINT_128_MASK = (1 << 128) - 1;\\n    uint256 private constant UINT_64_MASK = (1 << 64) - 1;\\n    uint256 private constant ADDRESS_MASK = (1 << 160) - 1;\\n    uint8 public constant MATCH_AMOUNT = 1;\\n    uint8 public constant MATCH_TOTAL = 2;\\n\\n    // The type hash for limit orders, which is:\\n    // keccak256(abi.encodePacked(\\n    //     \\\"LimitOrder(\\\",\\n    //       \\\"address makerToken,\\\",\\n    //       \\\"address takerToken,\\\",\\n    //       \\\"uint128 makerAmount,\\\",\\n    //       \\\"uint128 takerAmount,\\\",\\n    //       \\\"uint128 takerTokenFeeAmount,\\\",\\n    //       \\\"address maker,\\\",\\n    //       \\\"address taker,\\\",\\n    //       \\\"address sender,\\\",\\n    //       \\\"address feeRecipient,\\\",\\n    //       \\\"bytes32 pool,\\\",\\n    //       \\\"uint64 expiry,\\\",\\n    //       \\\"uint256 salt\\\"\\n    //     \\\")\\\"\\n    // ))\\n    uint256 private constant _LIMIT_ORDER_TYPEHASH =\\n        0xce918627cb55462ddbb85e73de69a8b322f2bc88f4507c52fcad6d4c33c29d49;\\n\\n    // The type hash for RFQ orders, which is:\\n    // keccak256(abi.encodePacked(\\n    //     \\\"RfqOrder(\\\",\\n    //       \\\"address makerToken,\\\",\\n    //       \\\"address takerToken,\\\",\\n    //       \\\"uint128 makerAmount,\\\",\\n    //       \\\"uint128 takerAmount,\\\",\\n    //       \\\"address maker,\\\",\\n    //       \\\"address taker,\\\",\\n    //       \\\"address txOrigin,\\\",\\n    //       \\\"bytes32 pool,\\\",\\n    //       \\\"uint64 expiry,\\\",\\n    //       \\\"uint256 salt\\\"\\n    //     \\\")\\\"\\n    // ))\\n    uint256 private constant _RFQ_ORDER_TYPEHASH =\\n        0xe593d3fdfa8b60e5e17a1b2204662ecbe15c23f2084b9ad5bae40359540a7da9;\\n\\n    /// @dev Get the struct hash of a limit order.\\n    /// @param order The limit order.\\n    /// @return structHash The struct hash of the order.\\n    function getLimitOrderStructHash(LimitOrder memory order)\\n        internal\\n        pure\\n        returns (bytes32 structHash)\\n    {\\n        // The struct hash is:\\n        // keccak256(abi.encode(\\n        //   TYPE_HASH,\\n        //   order.makerToken,\\n        //   order.takerToken,\\n        //   order.makerAmount,\\n        //   order.takerAmount,\\n        //   order.takerTokenFeeAmount,\\n        //   order.maker,\\n        //   order.taker,\\n        //   order.sender,\\n        //   order.feeRecipient,\\n        //   order.pool,\\n        //   order.expiry,\\n        //   order.salt,\\n        // ))\\n        assembly {\\n            let mem := mload(0x40)\\n            mstore(mem, _LIMIT_ORDER_TYPEHASH)\\n            // order.makerToken;\\n            mstore(add(mem, 0x20), and(ADDRESS_MASK, mload(order)))\\n            // order.takerToken;\\n            mstore(add(mem, 0x40), and(ADDRESS_MASK, mload(add(order, 0x20))))\\n            // order.makerAmount;\\n            mstore(add(mem, 0x60), and(UINT_128_MASK, mload(add(order, 0x40))))\\n            // order.takerAmount;\\n            mstore(add(mem, 0x80), and(UINT_128_MASK, mload(add(order, 0x60))))\\n            // order.takerTokenFeeAmount;\\n            mstore(add(mem, 0xA0), and(UINT_128_MASK, mload(add(order, 0x80))))\\n            // order.maker;\\n            mstore(add(mem, 0xC0), and(ADDRESS_MASK, mload(add(order, 0xA0))))\\n            // order.taker;\\n            mstore(add(mem, 0xE0), and(ADDRESS_MASK, mload(add(order, 0xC0))))\\n            // order.sender;\\n            mstore(add(mem, 0x100), and(ADDRESS_MASK, mload(add(order, 0xE0))))\\n            // order.feeRecipient;\\n            mstore(add(mem, 0x120), and(ADDRESS_MASK, mload(add(order, 0x100))))\\n            // order.pool;\\n            mstore(add(mem, 0x140), mload(add(order, 0x120)))\\n            // order.expiry;\\n            mstore(add(mem, 0x160), and(UINT_64_MASK, mload(add(order, 0x140))))\\n            // order.salt;\\n            mstore(add(mem, 0x180), mload(add(order, 0x160)))\\n            structHash := keccak256(mem, 0x1A0)\\n        }\\n    }\\n\\n    /// @dev Get the struct hash of a RFQ order.\\n    /// @param order The RFQ order.\\n    /// @return structHash The struct hash of the order.\\n    function getRfqOrderStructHash(RfqOrder memory order)\\n        internal\\n        pure\\n        returns (bytes32 structHash)\\n    {\\n        // The struct hash is:\\n        // keccak256(abi.encode(\\n        //   TYPE_HASH,\\n        //   order.makerToken,\\n        //   order.takerToken,\\n        //   order.makerAmount,\\n        //   order.takerAmount,\\n        //   order.maker,\\n        //   order.taker,\\n        //   order.txOrigin,\\n        //   order.pool,\\n        //   order.expiry,\\n        //   order.salt,\\n        // ))\\n        assembly {\\n            let mem := mload(0x40)\\n            mstore(mem, _RFQ_ORDER_TYPEHASH)\\n            // order.makerToken;\\n            mstore(add(mem, 0x20), and(ADDRESS_MASK, mload(order)))\\n            // order.takerToken;\\n            mstore(add(mem, 0x40), and(ADDRESS_MASK, mload(add(order, 0x20))))\\n            // order.makerAmount;\\n            mstore(add(mem, 0x60), and(UINT_128_MASK, mload(add(order, 0x40))))\\n            // order.takerAmount;\\n            mstore(add(mem, 0x80), and(UINT_128_MASK, mload(add(order, 0x60))))\\n            // order.maker;\\n            mstore(add(mem, 0xA0), and(ADDRESS_MASK, mload(add(order, 0x80))))\\n            // order.taker;\\n            mstore(add(mem, 0xC0), and(ADDRESS_MASK, mload(add(order, 0xA0))))\\n            // order.txOrigin;\\n            mstore(add(mem, 0xE0), and(ADDRESS_MASK, mload(add(order, 0xC0))))\\n            // order.pool;\\n            mstore(add(mem, 0x100), mload(add(order, 0xE0)))\\n            // order.expiry;\\n            mstore(add(mem, 0x120), and(UINT_64_MASK, mload(add(order, 0x100))))\\n            // order.salt;\\n            mstore(add(mem, 0x140), mload(add(order, 0x120)))\\n            structHash := keccak256(mem, 0x160)\\n        }\\n    }\\n\\n    /// @dev Refund any leftover protocol fees in `msg.value` to `msg.sender`.\\n    /// @param ethProtocolFeePaid How much ETH was paid in protocol fees.\\n    function refundExcessProtocolFeeToSender(uint256 ethProtocolFeePaid)\\n        internal\\n    {\\n        if (msg.value > ethProtocolFeePaid && msg.sender != address(this)) {\\n            uint256 refundAmount = msg.value.safeSub(ethProtocolFeePaid);\\n            (bool success,) = msg\\n                .sender\\n                .call{value: refundAmount}(\\\"\\\");\\n            if (!success) {\\n                LibNativeOrdersRichErrors.ProtocolFeeRefundFailed(\\n                    msg.sender,\\n                    refundAmount\\n                ).rrevert();\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc65c7ae6f7735e56aaec3f0089ac34179c3e285c7342bf60a64c281a50d817e2\",\"license\":\"Apache-2.0\"},\"contracts/zero-ex/contracts/src/features/libs/LibRichErrors.sol\":{\"content\":\"/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\n\\nlibrary LibRichErrors {\\n\\n    // bytes4(keccak256(\\\"Error(string)\\\"))\\n    bytes4 internal constant STANDARD_ERROR_SELECTOR =\\n        0x08c379a0;\\n\\n    // solhint-disable func-name-mixedcase\\n    /// @dev ABI encode a standard, string revert error payload.\\n    ///      This is the same payload that would be included by a `revert(string)`\\n    ///      solidity statement. It has the function signature `Error(string)`.\\n    /// @param message The error string.\\n    /// @return The ABI encoded error.\\n    function StandardError(\\n        string memory message\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            STANDARD_ERROR_SELECTOR,\\n            bytes(message)\\n        );\\n    }\\n    // solhint-enable func-name-mixedcase\\n\\n    /// @dev Reverts an encoded rich revert reason `errorData`.\\n    /// @param errorData ABI encoded error data.\\n    function rrevert(bytes memory errorData)\\n        internal\\n        pure\\n    {\\n        assembly {\\n            revert(add(errorData, 0x20), mload(errorData))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdc496c70a564458f9f1a8604f568ceaeba387aecdd518926c725e94b2b2b9b2d\"},\"contracts/zero-ex/contracts/src/features/libs/LibSignature.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"../../errors/LibSignatureRichErrors.sol\\\";\\n\\n\\n/// @dev A library for validating signatures.\\nlibrary LibSignature {\\n    using LibRichErrorsV06 for bytes;\\n\\n    // '\\\\x19Ethereum Signed Message:\\\\n32\\\\x00\\\\x00\\\\x00\\\\x00' in a word.\\n    uint256 private constant ETH_SIGN_HASH_PREFIX =\\n        0x19457468657265756d205369676e6564204d6573736167653a0a333200000000;\\n    /// @dev Exclusive upper limit on ECDSA signatures 'R' values.\\n    ///      The valid range is given by fig (282) of the yellow paper.\\n    uint256 private constant ECDSA_SIGNATURE_R_LIMIT =\\n        uint256(0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141);\\n    /// @dev Exclusive upper limit on ECDSA signatures 'S' values.\\n    ///      The valid range is given by fig (283) of the yellow paper.\\n    uint256 private constant ECDSA_SIGNATURE_S_LIMIT = ECDSA_SIGNATURE_R_LIMIT / 2 + 1;\\n\\n    /// @dev Allowed signature types.\\n    enum SignatureType {\\n        ILLEGAL,\\n        INVALID,\\n        EIP712,\\n        ETHSIGN\\n    }\\n\\n    /// @dev Encoded EC signature.\\n    struct Signature {\\n        // How to validate the signature.\\n        SignatureType signatureType;\\n        // EC Signature data.\\n        uint8 v;\\n        // EC Signature data.\\n        bytes32 r;\\n        // EC Signature data.\\n        bytes32 s;\\n    }\\n\\n    /// @dev Retrieve the signer of a signature.\\n    ///      Throws if the signature can't be validated.\\n    /// @param hash The hash that was signed.\\n    /// @param signature The signature.\\n    /// @return recovered The recovered signer address.\\n    function getSignerOfHash(\\n        bytes32 hash,\\n        Signature memory signature\\n    )\\n        internal\\n        pure\\n        returns (address recovered)\\n    {\\n        // Ensure this is a signature type that can be validated against a hash.\\n        _validateHashCompatibleSignature(hash, signature);\\n\\n        if (signature.signatureType == SignatureType.EIP712) {\\n            // Signed using EIP712\\n            recovered = ecrecover(\\n                hash,\\n                signature.v,\\n                signature.r,\\n                signature.s\\n            );\\n        } else if (signature.signatureType == SignatureType.ETHSIGN) {\\n            // Signed using `eth_sign`\\n            // Need to hash `hash` with \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\" prefix\\n            // in packed encoding.\\n            bytes32 ethSignHash;\\n            assembly {\\n                // Use scratch space\\n                mstore(0, ETH_SIGN_HASH_PREFIX) // length of 28 bytes\\n                mstore(28, hash) // length of 32 bytes\\n                ethSignHash := keccak256(0, 60)\\n            }\\n            recovered = ecrecover(\\n                ethSignHash,\\n                signature.v,\\n                signature.r,\\n                signature.s\\n            );\\n        }\\n        // `recovered` can be null if the signature values are out of range.\\n        if (recovered == address(0)) {\\n            LibSignatureRichErrors.SignatureValidationError(\\n                LibSignatureRichErrors.SignatureValidationErrorCodes.BAD_SIGNATURE_DATA,\\n                hash\\n            ).rrevert();\\n        }\\n    }\\n\\n    /// @dev Validates that a signature is compatible with a hash signee.\\n    /// @param hash The hash that was signed.\\n    /// @param signature The signature.\\n    function _validateHashCompatibleSignature(\\n        bytes32 hash,\\n        Signature memory signature\\n    )\\n        private\\n        pure\\n    {\\n        // Ensure the r and s are within malleability limits.\\n        if (uint256(signature.r) >= ECDSA_SIGNATURE_R_LIMIT ||\\n            uint256(signature.s) >= ECDSA_SIGNATURE_S_LIMIT)\\n        {\\n            LibSignatureRichErrors.SignatureValidationError(\\n                LibSignatureRichErrors.SignatureValidationErrorCodes.BAD_SIGNATURE_DATA,\\n                hash\\n            ).rrevert();\\n        }\\n\\n        // Always illegal signature.\\n        if (signature.signatureType == SignatureType.ILLEGAL) {\\n            LibSignatureRichErrors.SignatureValidationError(\\n                LibSignatureRichErrors.SignatureValidationErrorCodes.ILLEGAL,\\n                hash\\n            ).rrevert();\\n        }\\n\\n        // Always invalid.\\n        if (signature.signatureType == SignatureType.INVALID) {\\n            LibSignatureRichErrors.SignatureValidationError(\\n                LibSignatureRichErrors.SignatureValidationErrorCodes.ALWAYS_INVALID,\\n                hash\\n            ).rrevert();\\n        }\\n\\n        // Solidity should check that the signature type is within enum range for us\\n        // when abi-decoding.\\n    }\\n}\\n\",\"keccak256\":\"0x4ed611da3e8fabeb40a7213a3f7d67fab880c7a8191a21e5f5cd3f1effb410a8\",\"license\":\"Apache-2.0\"},\"contracts/zero-ex/contracts/src/features/native_orders/NativeOrdersInfo.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2021 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\\\";\\nimport \\\"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\\\";\\nimport \\\"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\\\";\\nimport \\\"../../fixins/FixinEIP712.sol\\\";\\nimport \\\"../../fixins/FixinTokenSpender.sol\\\";\\nimport \\\"../../storage/LibNativeOrdersStorage.sol\\\";\\nimport \\\"../libs/LibSignature.sol\\\";\\nimport \\\"../libs/LibNativeOrder.sol\\\";\\n\\n\\n/// @dev Feature for getting info about limit and RFQ orders.\\nabstract contract NativeOrdersInfo is\\n    FixinEIP712,\\n    FixinTokenSpender\\n{\\n    using LibSafeMathV06 for uint256;\\n    using LibRichErrorsV06 for bytes;\\n\\n    // @dev Params for `_getActualFillableTakerTokenAmount()`.\\n    struct GetActualFillableTakerTokenAmountParams {\\n        address maker;\\n        IERC20TokenV06 makerToken;\\n        uint128 orderMakerAmount;\\n        uint128 orderTakerAmount;\\n        LibNativeOrder.OrderInfo orderInfo;\\n    }\\n\\n    /// @dev Highest bit of a uint256, used to flag cancelled orders.\\n    uint256 private constant HIGH_BIT = 1 << 255;\\n\\n    constructor(\\n        address zeroExAddress\\n    )\\n        internal\\n        FixinEIP712(zeroExAddress)\\n    {\\n        // solhint-disable no-empty-blocks\\n    }\\n\\n    /// @dev Get the order info for a limit order.\\n    /// @param order The limit order.\\n    /// @return orderInfo Info about the order.\\n    function getLimitOrderInfo(LibNativeOrder.LimitOrder memory order)\\n        public\\n        view\\n        returns (LibNativeOrder.OrderInfo memory orderInfo)\\n    {\\n        // Recover maker and compute order hash.\\n        orderInfo.orderHash = getLimitOrderHash(order);\\n        uint256 minValidSalt = LibNativeOrdersStorage.getStorage()\\n            .limitOrdersMakerToMakerTokenToTakerTokenToMinValidOrderSalt\\n                [order.maker]\\n                [address(order.makerToken)]\\n                [address(order.takerToken)];\\n        _populateCommonOrderInfoFields(\\n            orderInfo,\\n            order.makerAmount,\\n            order.expiry,\\n            order.salt,\\n            minValidSalt\\n        );\\n    }\\n\\n    function getLimitOrderInfoV2(LibNativeOrder.LimitOrder memory order, uint128 amount)\\n        public\\n        view\\n        returns (LibNativeOrder.OrderInfo memory orderInfo)\\n    {\\n        // Recover maker and compute order hash.\\n        orderInfo.orderHash = getLimitOrderHash(order);\\n        uint256 minValidSalt = LibNativeOrdersStorage.getStorage()\\n            .limitOrdersMakerToMakerTokenToTakerTokenToMinValidOrderSalt\\n                [order.maker]\\n                [address(order.makerToken)]\\n                [address(order.takerToken)];\\n\\n        _populateCommonOrderInfoFields(\\n            orderInfo,\\n            amount,\\n            order.expiry,\\n            order.salt,\\n            minValidSalt\\n        );\\n    }\\n\\n    /// @dev Get the order info for an RFQ order.\\n    /// @param order The RFQ order.\\n    /// @return orderInfo Info about the order.\\n    function getRfqOrderInfo(LibNativeOrder.RfqOrder memory order)\\n        public\\n        view\\n        returns (LibNativeOrder.OrderInfo memory orderInfo)\\n    {\\n        // Recover maker and compute order hash.\\n        orderInfo.orderHash = getRfqOrderHash(order);\\n        uint256 minValidSalt = LibNativeOrdersStorage.getStorage()\\n            .rfqOrdersMakerToMakerTokenToTakerTokenToMinValidOrderSalt\\n                [order.maker]\\n                [address(order.makerToken)]\\n                [address(order.takerToken)];\\n        _populateCommonOrderInfoFields(\\n            orderInfo,\\n            order.makerAmount,\\n            order.expiry,\\n            order.salt,\\n            minValidSalt\\n        );\\n\\n        // Check for missing txOrigin.\\n        if (order.txOrigin == address(0)) {\\n            orderInfo.status = LibNativeOrder.OrderStatus.INVALID;\\n        }\\n    }\\n\\n    /// @dev Get the canonical hash of a limit order.\\n    /// @param order The limit order.\\n    /// @return orderHash The order hash.\\n    function getLimitOrderHash(LibNativeOrder.LimitOrder memory order)\\n        public\\n        view\\n        returns (bytes32 orderHash)\\n    {\\n        return _getEIP712Hash(\\n            LibNativeOrder.getLimitOrderStructHash(order)\\n        );\\n    }\\n\\n    /// @dev Get the canonical hash of an RFQ order.\\n    /// @param order The RFQ order.\\n    /// @return orderHash The order hash.\\n    function getRfqOrderHash(LibNativeOrder.RfqOrder memory order)\\n        public\\n        view\\n        returns (bytes32 orderHash)\\n    {\\n        return _getEIP712Hash(\\n            LibNativeOrder.getRfqOrderStructHash(order)\\n        );\\n    }\\n\\n    /// @dev Get order info, fillable amount, and signature validity for a limit order.\\n    ///      Fillable amount is determined using balances and allowances of the maker.\\n    /// @param order The limit order.\\n    /// @param signature The order signature.\\n    /// @return orderInfo Info about the order.\\n    /// @return actualFillableTakerTokenAmount How much of the order is fillable\\n    ///         based on maker funds, in taker tokens.\\n    /// @return isSignatureValid Whether the signature is valid.\\n    function getLimitOrderRelevantState(\\n        LibNativeOrder.LimitOrder memory order,\\n        LibSignature.Signature calldata signature\\n    )\\n        public\\n        view\\n        returns (\\n            LibNativeOrder.OrderInfo memory orderInfo,\\n            uint128 actualFillableTakerTokenAmount,\\n            bool isSignatureValid\\n        )\\n    {\\n        orderInfo = getLimitOrderInfo(order);\\n        actualFillableTakerTokenAmount = _getActualFillableTakerTokenAmount(\\n            GetActualFillableTakerTokenAmountParams({\\n                maker: order.maker,\\n                makerToken: order.makerToken,\\n                orderMakerAmount: order.makerAmount,\\n                orderTakerAmount: order.takerAmount,\\n                orderInfo: orderInfo\\n            })\\n        );\\n        address signerOfHash = LibSignature.getSignerOfHash(orderInfo.orderHash, signature);\\n        isSignatureValid =\\n            (order.maker == signerOfHash) ||\\n            isValidOrderSigner(order.maker, signerOfHash);\\n    }\\n\\n    /// @dev Get order info, fillable amount, and signature validity for an RFQ order.\\n    ///      Fillable amount is determined using balances and allowances of the maker.\\n    /// @param order The RFQ order.\\n    /// @param signature The order signature.\\n    /// @return orderInfo Info about the order.\\n    /// @return actualFillableTakerTokenAmount How much of the order is fillable\\n    ///         based on maker funds, in taker tokens.\\n    /// @return isSignatureValid Whether the signature is valid.\\n    function getRfqOrderRelevantState(\\n        LibNativeOrder.RfqOrder memory order,\\n        LibSignature.Signature memory signature\\n    )\\n        public\\n        view\\n        returns (\\n            LibNativeOrder.OrderInfo memory orderInfo,\\n            uint128 actualFillableTakerTokenAmount,\\n            bool isSignatureValid\\n        )\\n    {\\n        orderInfo = getRfqOrderInfo(order);\\n        actualFillableTakerTokenAmount = _getActualFillableTakerTokenAmount(\\n            GetActualFillableTakerTokenAmountParams({\\n                maker: order.maker,\\n                makerToken: order.makerToken,\\n                orderMakerAmount: order.makerAmount,\\n                orderTakerAmount: order.takerAmount,\\n                orderInfo: orderInfo\\n            })\\n        );\\n        address signerOfHash = LibSignature.getSignerOfHash(orderInfo.orderHash, signature);\\n        isSignatureValid =\\n            (order.maker == signerOfHash) ||\\n            isValidOrderSigner(order.maker, signerOfHash);\\n    }\\n\\n    /// @dev Batch version of `getLimitOrderRelevantState()`, without reverting.\\n    ///      Orders that would normally cause `getLimitOrderRelevantState()`\\n    ///      to revert will have empty results.\\n    /// @param orders The limit orders.\\n    /// @param signatures The order signatures.\\n    /// @return orderInfos Info about the orders.\\n    /// @return actualFillableTakerTokenAmounts How much of each order is fillable\\n    ///         based on maker funds, in taker tokens.\\n    /// @return isSignatureValids Whether each signature is valid for the order.\\n    function batchGetLimitOrderRelevantStates(\\n        LibNativeOrder.LimitOrder[] calldata orders,\\n        LibSignature.Signature[] calldata signatures\\n    )\\n        external\\n        view\\n        returns (\\n            LibNativeOrder.OrderInfo[] memory orderInfos,\\n            uint128[] memory actualFillableTakerTokenAmounts,\\n            bool[] memory isSignatureValids\\n        )\\n    {\\n        require(\\n            orders.length == signatures.length,\\n            \\\"NativeOrdersFeature/MISMATCHED_ARRAY_LENGTHS\\\"\\n        );\\n        orderInfos = new LibNativeOrder.OrderInfo[](orders.length);\\n        actualFillableTakerTokenAmounts = new uint128[](orders.length);\\n        isSignatureValids = new bool[](orders.length);\\n        for (uint256 i = 0; i < orders.length; ++i) {\\n            try\\n                this.getLimitOrderRelevantState(orders[i], signatures[i])\\n                    returns (\\n                        LibNativeOrder.OrderInfo memory orderInfo,\\n                        uint128 actualFillableTakerTokenAmount,\\n                        bool isSignatureValid\\n                    )\\n            {\\n                orderInfos[i] = orderInfo;\\n                actualFillableTakerTokenAmounts[i] = actualFillableTakerTokenAmount;\\n                isSignatureValids[i] = isSignatureValid;\\n            }\\n            catch {}\\n        }\\n    }\\n\\n    /// @dev Batch version of `getRfqOrderRelevantState()`, without reverting.\\n    ///      Orders that would normally cause `getRfqOrderRelevantState()`\\n    ///      to revert will have empty results.\\n    /// @param orders The RFQ orders.\\n    /// @param signatures The order signatures.\\n    /// @return orderInfos Info about the orders.\\n    /// @return actualFillableTakerTokenAmounts How much of each order is fillable\\n    ///         based on maker funds, in taker tokens.\\n    /// @return isSignatureValids Whether each signature is valid for the order.\\n    function batchGetRfqOrderRelevantStates(\\n        LibNativeOrder.RfqOrder[] calldata orders,\\n        LibSignature.Signature[] calldata signatures\\n    )\\n        external\\n        view\\n        returns (\\n            LibNativeOrder.OrderInfo[] memory orderInfos,\\n            uint128[] memory actualFillableTakerTokenAmounts,\\n            bool[] memory isSignatureValids\\n        )\\n    {\\n        require(\\n            orders.length == signatures.length,\\n            \\\"NativeOrdersFeature/MISMATCHED_ARRAY_LENGTHS\\\"\\n        );\\n        orderInfos = new LibNativeOrder.OrderInfo[](orders.length);\\n        actualFillableTakerTokenAmounts = new uint128[](orders.length);\\n        isSignatureValids = new bool[](orders.length);\\n        for (uint256 i = 0; i < orders.length; ++i) {\\n            try\\n                this.getRfqOrderRelevantState(orders[i], signatures[i])\\n                    returns (\\n                        LibNativeOrder.OrderInfo memory orderInfo,\\n                        uint128 actualFillableTakerTokenAmount,\\n                        bool isSignatureValid\\n                    )\\n            {\\n                orderInfos[i] = orderInfo;\\n                actualFillableTakerTokenAmounts[i] = actualFillableTakerTokenAmount;\\n                isSignatureValids[i] = isSignatureValid;\\n            }\\n            catch {}\\n        }\\n    }\\n\\n    /// @dev Populate `status` and `takerTokenFilledAmount` fields in\\n    ///      `orderInfo`, which use the same code path for both limit and\\n    ///      RFQ orders.\\n    /// @param orderInfo `OrderInfo` with `orderHash` and `maker` filled.\\n    /// @param amount The order's taker token amount..\\n    /// @param expiry The order's expiry.\\n    /// @param salt The order's salt.\\n    /// @param salt The minimum valid salt for the maker and pair combination.\\n    function _populateCommonOrderInfoFields(\\n        LibNativeOrder.OrderInfo memory orderInfo,\\n        uint128 amount,\\n        uint64 expiry,\\n        uint256 salt,\\n        uint256 minValidSalt\\n    )\\n        private\\n        view\\n    {\\n        LibNativeOrdersStorage.Storage storage stor =\\n            LibNativeOrdersStorage.getStorage();\\n        // Get the filled and direct cancel state.\\n        {\\n            // The high bit of the raw taker token filled amount will be set\\n            // if the order was cancelled.\\n            uint256 rawMakerTokenFilledAmount =\\n                stor.orderHashToFilledAmount[orderInfo.orderHash];\\n            orderInfo.makerTokenFilledAmount = uint128(rawMakerTokenFilledAmount);\\n            if (orderInfo.makerTokenFilledAmount >= amount) {\\n                orderInfo.status = LibNativeOrder.OrderStatus.FILLED;\\n                return;\\n            }\\n            if (rawMakerTokenFilledAmount & HIGH_BIT != 0) {\\n                orderInfo.status = LibNativeOrder.OrderStatus.CANCELLED;\\n                return;\\n            }\\n        }\\n\\n        // Check for expiration.\\n        if (expiry <= uint64(block.timestamp)) {\\n            orderInfo.status = LibNativeOrder.OrderStatus.EXPIRED;\\n            return;\\n        }\\n\\n        // Check if the order was cancelled by salt.\\n        if (minValidSalt > salt) {\\n            orderInfo.status = LibNativeOrder.OrderStatus.CANCELLED;\\n            return;\\n        }\\n        orderInfo.status = LibNativeOrder.OrderStatus.FILLABLE;\\n    }\\n\\n    /// @dev Calculate the actual fillable taker token amount of an order\\n    ///      based on maker allowance and balances.\\n    function _getActualFillableTakerTokenAmount(\\n        GetActualFillableTakerTokenAmountParams memory params\\n    )\\n        private\\n        view\\n        returns (uint128 actualFillableTakerTokenAmount)\\n    {\\n        if (params.orderMakerAmount == 0 || params.orderTakerAmount == 0) {\\n            // Empty order.\\n            return 0;\\n        }\\n        if (params.orderInfo.status != LibNativeOrder.OrderStatus.FILLABLE) {\\n            // Not fillable.\\n            return 0;\\n        }\\n\\n        // Get the fillable maker amount based on the order quantities and\\n        // previously filled amount\\n        uint256 fillableMakerTokenAmount = LibMathV06.getPartialAmountFloor(\\n            uint256(\\n                params.orderTakerAmount\\n                - params.orderInfo.makerTokenFilledAmount\\n            ),\\n            uint256(params.orderTakerAmount),\\n            uint256(params.orderMakerAmount)\\n        );\\n        // Clamp it to the amount of maker tokens we can spend on behalf of the\\n        // maker.\\n        fillableMakerTokenAmount = LibSafeMathV06.min256(\\n            fillableMakerTokenAmount,\\n            _getSpendableERC20BalanceOf(params.makerToken, params.maker)\\n        );\\n        // Convert to taker token amount.\\n        return LibMathV06.getPartialAmountCeil(\\n            fillableMakerTokenAmount,\\n            uint256(params.orderMakerAmount),\\n            uint256(params.orderTakerAmount)\\n        ).safeDowncastToUint128();\\n    }\\n\\n    /// @dev checks if a given address is registered to sign on behalf of a maker address\\n    /// @param maker The maker address encoded in an order (can be a contract)\\n    /// @param signer The address that is providing a signature\\n    function isValidOrderSigner(\\n        address maker,\\n        address signer\\n    )\\n        public\\n        view\\n        returns (bool isValid)\\n    {\\n        // returns false if it the mapping doesn't exist\\n        return LibNativeOrdersStorage.getStorage()\\n            .orderSignerRegistry\\n                [maker]\\n                [signer];\\n    }\\n}\\n\",\"keccak256\":\"0x28a7c45cb3c3a2ea8cb1e6c1ea3d99df5556f8e6bc4342a9c95ca3ad665a8c14\",\"license\":\"Apache-2.0\"},\"contracts/zero-ex/contracts/src/fixins/FixinCommon.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"../errors/LibCommonRichErrors.sol\\\";\\nimport \\\"../errors/LibOwnableRichErrors.sol\\\";\\nimport \\\"../features/interfaces/IOwnableFeature.sol\\\";\\nimport \\\"../features/interfaces/ISimpleFunctionRegistryFeature.sol\\\";\\n\\n\\n/// @dev Common feature utilities.\\nabstract contract FixinCommon {\\n\\n    using LibRichErrorsV06 for bytes;\\n\\n    /// @dev The implementation address of this feature.\\n    address internal immutable _implementation;\\n\\n    /// @dev The caller must be this contract.\\n    modifier onlySelf() virtual {\\n        if (msg.sender != address(this)) {\\n            LibCommonRichErrors.OnlyCallableBySelfError(msg.sender).rrevert();\\n        }\\n        _;\\n    }\\n\\n    /// @dev The caller of this function must be the owner.\\n    modifier onlyOwner() virtual {\\n        {\\n            address owner = IOwnableFeature(address(this)).owner();\\n            if (msg.sender != owner) {\\n                LibOwnableRichErrors.OnlyOwnerError(\\n                    msg.sender,\\n                    owner\\n                ).rrevert();\\n            }\\n        }\\n        _;\\n    }\\n\\n    constructor() internal {\\n        // Remember this feature's original address.\\n        _implementation = address(this);\\n    }\\n\\n    /// @dev Registers a function implemented by this feature at `_implementation`.\\n    ///      Can and should only be called within a `migrate()`.\\n    /// @param selector The selector of the function whose implementation\\n    ///        is at `_implementation`.\\n    function _registerFeatureFunction(bytes4 selector)\\n        internal\\n    {\\n        ISimpleFunctionRegistryFeature(address(this)).extend(selector, _implementation);\\n    }\\n\\n    /// @dev Encode a feature version as a `uint256`.\\n    /// @param major The major version number of the feature.\\n    /// @param minor The minor version number of the feature.\\n    /// @param revision The revision number of the feature.\\n    /// @return encodedVersion The encoded version number.\\n    function _encodeVersion(uint32 major, uint32 minor, uint32 revision)\\n        internal\\n        pure\\n        returns (uint256 encodedVersion)\\n    {\\n        return (uint256(major) << 64) | (uint256(minor) << 32) | uint256(revision);\\n    }\\n}\\n\",\"keccak256\":\"0x0762e8974dabc9297b147802a8d40a2ef22c61f8114cdc96b5fe7dc884c98c42\",\"license\":\"Apache-2.0\"},\"contracts/zero-ex/contracts/src/fixins/FixinEIP712.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"../errors/LibCommonRichErrors.sol\\\";\\nimport \\\"../errors/LibOwnableRichErrors.sol\\\";\\n\\n\\n/// @dev EIP712 helpers for features.\\nabstract contract FixinEIP712 {\\n\\n    /// @dev The domain hash separator for the entire exchange proxy.\\n    bytes32 public immutable EIP712_DOMAIN_SEPARATOR;\\n\\n    constructor(address zeroExAddress) internal {\\n        // Compute `EIP712_DOMAIN_SEPARATOR`\\n        {\\n            uint256 chainId;\\n            assembly { chainId := chainid() }\\n            EIP712_DOMAIN_SEPARATOR = keccak256(\\n                abi.encode(\\n                    keccak256(\\n                        \\\"EIP712Domain(\\\"\\n                            \\\"string name,\\\"\\n                            \\\"string version,\\\"\\n                            \\\"uint256 chainId,\\\"\\n                            \\\"address verifyingContract\\\"\\n                        \\\")\\\"\\n                    ),\\n                    keccak256(\\\"ZeroEx\\\"),\\n                    keccak256(\\\"1.0.0\\\"),\\n                    chainId,\\n                    zeroExAddress\\n                )\\n            );\\n        }\\n    }\\n\\n    function _getEIP712Hash(bytes32 structHash)\\n        internal\\n        view\\n        returns (bytes32 eip712Hash)\\n    {\\n        return keccak256(abi.encodePacked(\\n            hex\\\"1901\\\",\\n            EIP712_DOMAIN_SEPARATOR,\\n            structHash\\n        ));\\n    }\\n}\\n\",\"keccak256\":\"0xdacbe9d0b2fa77e0fa86dc433ebd8ab68272872fca8df7d3f47953216942cb75\",\"license\":\"Apache-2.0\"},\"contracts/zero-ex/contracts/src/fixins/FixinTokenSpender.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\\\";\\nimport \\\"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\\\";\\n\\n/// @dev Helpers for moving tokens around.\\nabstract contract FixinTokenSpender {\\n\\n    // Mask of the lower 20 bytes of a bytes32.\\n    uint256 constant private ADDRESS_MASK = 0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff;\\n\\n    /// @dev Transfers ERC20 tokens from `owner` to `to`.\\n    /// @param token The token to spend.\\n    /// @param owner The owner of the tokens.\\n    /// @param to The recipient of the tokens.\\n    /// @param amount The amount of `token` to transfer.\\n    function _transferERC20Tokens(\\n        IERC20TokenV06 token,\\n        address owner,\\n        address to,\\n        uint256 amount\\n    )\\n        internal\\n    {\\n        require(address(token) != address(this), \\\"FixinTokenSpender/CANNOT_INVOKE_SELF\\\");\\n\\n        assembly {\\n            let ptr := mload(0x40) // free memory pointer\\n\\n            // selector for transferFrom(address,address,uint256)\\n            mstore(ptr, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(ptr, 0x04), and(owner, ADDRESS_MASK))\\n            mstore(add(ptr, 0x24), and(to, ADDRESS_MASK))\\n            mstore(add(ptr, 0x44), amount)\\n\\n            let success := call(\\n                gas(),\\n                and(token, ADDRESS_MASK),\\n                0,\\n                ptr,\\n                0x64,\\n                ptr,\\n                32\\n            )\\n\\n            let rdsize := returndatasize()\\n\\n            // Check for ERC20 success. ERC20 tokens should return a boolean,\\n            // but some don't. We accept 0-length return data as success, or at\\n            // least 32 bytes that starts with a 32-byte boolean true.\\n            success := and(\\n                success,                             // call itself succeeded\\n                or(\\n                    iszero(rdsize),                  // no return data, or\\n                    and(\\n                        iszero(lt(rdsize, 32)),      // at least 32 bytes\\n                        eq(mload(ptr), 1)            // starts with uint256(1)\\n                    )\\n                )\\n            )\\n\\n            if iszero(success) {\\n                returndatacopy(ptr, 0, rdsize)\\n                revert(ptr, rdsize)\\n            }\\n        }\\n    }\\n\\n    /// @dev Gets the maximum amount of an ERC20 token `token` that can be\\n    ///      pulled from `owner` by this address.\\n    /// @param token The token to spend.\\n    /// @param owner The owner of the tokens.\\n    /// @return amount The amount of tokens that can be pulled.\\n    function _getSpendableERC20BalanceOf(\\n        IERC20TokenV06 token,\\n        address owner\\n    )\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return LibSafeMathV06.min256(\\n            token.allowance(owner, address(this)),\\n            token.balanceOf(owner)\\n        );\\n    }\\n\\n    function sendBalanceTo(\\n        IERC20TokenV06 token,\\n        address to,\\n        uint256 amount\\n    )\\n    public {\\n        require(address(token) != address(this), \\\"FixinTokenSpender/CANNOT_INVOKE_SELF\\\");\\n        token.transfer(to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x7c4ad9b870f329cfe9583a4dab496667c0b0f97ca353a4952cb87a7d92ef2b5c\",\"license\":\"Apache-2.0\"},\"contracts/zero-ex/contracts/src/migrations/LibMigrate.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"../errors/LibOwnableRichErrors.sol\\\";\\n\\n\\nlibrary LibMigrate {\\n\\n    /// @dev Magic bytes returned by a migrator to indicate success.\\n    ///      This is `keccack('MIGRATE_SUCCESS')`.\\n    bytes4 internal constant MIGRATE_SUCCESS = 0x2c64c5ef;\\n\\n    using LibRichErrorsV06 for bytes;\\n\\n    /// @dev Perform a delegatecall and ensure it returns the magic bytes.\\n    /// @param target The call target.\\n    /// @param data The call data.\\n    function delegatecallMigrateFunction(\\n        address target,\\n        bytes memory data\\n    )\\n        internal\\n    {\\n        (bool success, bytes memory resultData) = target.delegatecall(data);\\n        if (!success ||\\n            resultData.length != 32 ||\\n            abi.decode(resultData, (bytes4)) != MIGRATE_SUCCESS)\\n        {\\n            LibOwnableRichErrors.MigrateCallFailedError(target, resultData).rrevert();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc537fbedd7ebea8e54bda27a55941c0bc7d2018c47269ce8af52c57e8b1929db\",\"license\":\"Apache-2.0\"},\"contracts/zero-ex/contracts/src/storage/LibNativeOrdersStorage.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./LibStorage.sol\\\";\\n\\n\\n/// @dev Storage helpers for `NativeOrdersFeature`.\\nlibrary LibNativeOrdersStorage {\\n\\n    /// @dev Storage bucket for this feature.\\n    struct Storage {\\n        // How much taker token has been filled in order.\\n        // The lower `uint128` is the taker token fill amount.\\n        // The high bit will be `1` if the order was directly cancelled.\\n        mapping(bytes32 => uint256) orderHashToFilledAmount;\\n        mapping(bytes32 => uint256) orderHashToFeeAmountRemaining;\\n        // The minimum valid order salt for a given maker and order pair (maker, taker)\\n        // for limit orders.\\n        mapping(address => mapping(address => mapping(address => uint256)))\\n            limitOrdersMakerToMakerTokenToTakerTokenToMinValidOrderSalt;\\n        // The minimum valid order salt for a given maker and order pair (maker, taker)\\n        // for RFQ orders.\\n        mapping(address => mapping(address => mapping(address => uint256)))\\n            rfqOrdersMakerToMakerTokenToTakerTokenToMinValidOrderSalt;\\n        // For a given order origin, which tx.origin addresses are allowed to\\n        // fill the order.\\n        mapping(address => mapping(address => bool)) originRegistry;\\n        // For a given maker address, which addresses are allowed to\\n        // sign on its behalf.\\n        mapping(address => mapping(address => bool)) orderSignerRegistry;\\n\\n        //validate order was locked balance\\n        mapping(bytes32 => uint256) orderLocked;\\n\\n        uint256[] roles;\\n        \\n        address whitelist;\\n\\n        uint256 decimalPrice;\\n    }\\n\\n    /// @dev Get the storage bucket for this contract.\\n    function getStorage() internal pure returns (Storage storage stor) {\\n        uint256 storageSlot = LibStorage.getStorageSlot(\\n            LibStorage.StorageId.NativeOrders\\n        );\\n        // Dip into assembly to change the slot pointed to by the local\\n        // variable `stor`.\\n        // See https://solidity.readthedocs.io/en/v0.6.8/assembly.html?highlight=slot#access-to-external-variables-functions-and-libraries\\n        assembly { stor_slot := storageSlot }\\n    }\\n}\\n\",\"keccak256\":\"0x591828338af0fa5232208620e8162511294d08aec6e63204f28246ef89db2bb1\",\"license\":\"Apache-2.0\"},\"contracts/zero-ex/contracts/src/storage/LibStorage.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\n\\n/// @dev Common storage helpers\\nlibrary LibStorage {\\n\\n    /// @dev What to bit-shift a storage ID by to get its slot.\\n    ///      This gives us a maximum of 2**128 inline fields in each bucket.\\n    uint256 private constant STORAGE_SLOT_EXP = 128;\\n\\n    /// @dev Storage IDs for feature storage buckets.\\n    ///      WARNING: APPEND-ONLY.\\n    enum StorageId {\\n        Proxy,\\n        SimpleFunctionRegistry,\\n        Ownable,\\n        TokenSpender,\\n        TransformERC20,\\n        MetaTransactions,\\n        ReentrancyGuard,\\n        NativeOrders,\\n        Extend\\n    }\\n\\n    /// @dev Get the storage slot given a storage ID. We assign unique, well-spaced\\n    ///     slots to storage bucket variables to ensure they do not overlap.\\n    ///     See: https://solidity.readthedocs.io/en/v0.6.6/assembly.html#access-to-external-variables-functions-and-libraries\\n    /// @param storageId An entry in `StorageId`\\n    /// @return slot The storage slot.\\n    function getStorageSlot(StorageId storageId)\\n        internal\\n        pure\\n        returns (uint256 slot)\\n    {\\n        // This should never overflow with a reasonable `STORAGE_SLOT_EXP`\\n        // because Solidity will do a range check on `storageId` during the cast.\\n        return (uint256(storageId) + 1) << STORAGE_SLOT_EXP;\\n    }\\n}\\n\",\"keccak256\":\"0x2026bc5b5a067203c0636dbcd00471fb7d6663d2eb776fea8d89dc93a07c729d\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60e06040526200001260018080620000f3565b60c0523480156200002257600080fd5b5060405162003d1238038062003d12833981016040819052620000459162000125565b3060601b608052604051819081904690620000cd907f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f907f9e5dae0addaf20578aeb5d70341d092b53b4e14480ac5726438fd436df7ba427907f06c015bd22b4c69690933c1058878ebdfef31f9aaae40bbe86d8a09fe1b2972c908590879060200162000155565b60408051601f19818403018152919052805160209091012060a052506200018192505050565b6bffffffff0000000000000000604084901b1667ffffffff00000000602084901b161763ffffffff8216179392505050565b60006020828403121562000137578081fd5b81516001600160a01b03811681146200014e578182fd5b9392505050565b9485526020850193909352604084019190915260608301526001600160a01b0316608082015260a00190565b60805160601c60a05160c051613b5c620001b6600039806104995250806113d752806115c8525080611dc15250613b5c6000f3fe6080604052600436106101755760003560e01c806395480889116100cb578063b060c8801161007f578063dab400f311610059578063dab400f314610427578063dd11d2251461043c578063e87711991461045c57610175565b8063b060c880146103c5578063b4658bfb146103f4578063b8ead9531461041457610175565b8063a97ab0c8116100b0578063a97ab0c814610354578063a9ca290714610376578063ad354eeb1461039657610175565b806395480889146103145780639d68d9751461033457610175565b806337f381d81161012d5780636b52a4a8116101075780636b52a4a8146102b05780638af079ea146102dd5780638fd3ab80146102f257610175565b806337f381d81461024e57806364dd1ccf1461026e5780636ae4b4f71461028e57610175565b80631fb097951161015e5780631fb09795146101c557806322780cea146101f4578063346693c51461022157610175565b8063016a6d651461017a578063031b905c146101b0575b600080fd5b34801561018657600080fd5b5061019a610195366004613209565b61047c565b6040516101a79190613534565b60405180910390f35b3480156101bc57600080fd5b5061019a610497565b3480156101d157600080fd5b506101e56101e036600461310b565b6104bb565b6040516101a79392919061392d565b34801561020057600080fd5b5061021461020f366004613089565b6105d3565b6040516101a791906138db565b34801561022d57600080fd5b5061024161023c366004613209565b610709565b6040516101a7919061391f565b34801561025a57600080fd5b506101e5610269366004613225565b6107c2565b34801561027a57600080fd5b5061019a6102893660046132a1565b6108c2565b34801561029a57600080fd5b506102a36108e2565b6040516101a7919061367a565b3480156102bc57600080fd5b506102d06102cb366004612e5b565b61091b565b6040516101a79190613529565b3480156102e957600080fd5b5061019a610969565b3480156102fe57600080fd5b5061030761098c565b6040516101a79190613579565b34801561032057600080fd5b5061024161032f3660046130ef565b610ad2565b34801561034057600080fd5b5061024161034f366004613141565b610b5e565b34801561036057600080fd5b5061037461036f366004612fa6565b610beb565b005b34801561038257600080fd5b50610374610391366004612fbe565b610cad565b3480156103a257600080fd5b506103b66103b1366004612f28565b610db2565b6040516101a793929190613491565b3480156103d157600080fd5b506103e56103e0366004612fa6565b611018565b6040516101a793929190613a5b565b34801561040057600080fd5b506103b661040f366004612e93565b611072565b610214610422366004612ffe565b6112cd565b34801561043357600080fd5b5061019a6113d5565b34801561044857600080fd5b5061019a6104573660046130ef565b6113f9565b34801561046857600080fd5b50610241610477366004613141565b611407565b600061048f61048a8361148d565b6115c4565b90505b919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6104c3612aea565b6000806104cf85610ad2565b92506105606040518060a001604052808760a0015173ffffffffffffffffffffffffffffffffffffffff168152602001876000015173ffffffffffffffffffffffffffffffffffffffff16815260200187604001516fffffffffffffffffffffffffffffffff16815260200187606001516fffffffffffffffffffffffffffffffff16815260200185815250611616565b83519092506000906105809061057b36889003880188613252565b611738565b90508073ffffffffffffffffffffffffffffffffffffffff168660a0015173ffffffffffffffffffffffffffffffffffffffff1614806105c957506105c98660a001518261091b565b9150509250925092565b6105db612b13565b600060ff84166001146105fd576105f8608088016060890161326d565b61060d565b61060d606088016040890161326d565b9050600060ff84166001146106315761062c606088016040890161326d565b610641565b610641608088016060890161326d565b905061064b612aea565b61066361065d368b90038b018b6130ef565b84611407565b905061066d612aea565b61067f61065d368b90038b018b6130ef565b9050610689612b49565b6040808401516fffffffffffffffffffffffffffffffff9081168352838201511660208301528101899052825160608201528151608082015260ff80891660a0830152871660c08201526106fa6106e5368d90038d018d6130ef565b6106f4368d90038d018d6130ef565b83611889565b9b9a5050505050505050505050565b610711612aea565b61071a8261047c565b81526000610726611c8d565b608084015173ffffffffffffffffffffffffffffffffffffffff9081166000908152600392909201602090815260408084208751841685528252808420828801519093168452919052908190205490840151610100850151610120860151929350610795928592919085611c9a565b60c083015173ffffffffffffffffffffffffffffffffffffffff166107bc57600060208301525b50919050565b6107ca612aea565b6000806107d685610709565b92506108676040518060a00160405280876080015173ffffffffffffffffffffffffffffffffffffffff168152602001876000015173ffffffffffffffffffffffffffffffffffffffff16815260200187604001516fffffffffffffffffffffffffffffffff16815260200187606001516fffffffffffffffffffffffffffffffff16815260200185815250611616565b91506000610879846000015186611738565b90508073ffffffffffffffffffffffffffffffffffffffff16866080015173ffffffffffffffffffffffffffffffffffffffff1614806105c957506105c986608001518261091b565b600060ff82166001146108d65760c86108d9565b60645b60ff1692915050565b6040518060400160405280600b81526020017f4d617463684f726465727300000000000000000000000000000000000000000081525081565b6000610925611c8d565b73ffffffffffffffffffffffffffffffffffffffff808516600090815260059290920160209081526040808420928616845291905290205460ff1690505b92915050565b600080610974611c8d565b6009015490508061098757506402540be4005b905090565b60006109b77fb8ead95300000000000000000000000000000000000000000000000000000000611d8b565b6109e07fb060c88000000000000000000000000000000000000000000000000000000000611d8b565b610a097f22780cea00000000000000000000000000000000000000000000000000000000611d8b565b610a327fa97ab0c800000000000000000000000000000000000000000000000000000000611d8b565b610a5b7f8af079ea00000000000000000000000000000000000000000000000000000000611d8b565b610a847fe877119900000000000000000000000000000000000000000000000000000000611d8b565b610aad7f64dd1ccf00000000000000000000000000000000000000000000000000000000611d8b565b507f2c64c5ef0000000000000000000000000000000000000000000000000000000090565b610ada612aea565b610ae3826113f9565b81526000610aef611c8d565b60a084015173ffffffffffffffffffffffffffffffffffffffff90811660009081526002929092016020908152604080842087518416855282528084208288015190931684529190529081902054908401516101408501516101608601519293506107bc928592919085611c9a565b610b66612aea565b610b6f836113f9565b81526000610b7b611c8d565b60a085015173ffffffffffffffffffffffffffffffffffffffff9081166000908152600292909201602090815260408084208851841685528252808420828901519093168452919052902054610140850151610160860151919250610be4918491869185611c9a565b5092915050565b60003073ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c3357600080fd5b505afa158015610c47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6b9190612e3f565b90503373ffffffffffffffffffffffffffffffffffffffff821614610c9c57610c9c610c973383611e17565b611ed2565b5080610ca6611c8d565b6009015550565b73ffffffffffffffffffffffffffffffffffffffff8316301415610d06576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cfd90613748565b60405180910390fd5b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84169063a9059cbb90610d5a908590859060040161346b565b602060405180830381600087803b158015610d7457600080fd5b505af1158015610d88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dac9190612f8a565b50505050565b60608080858414610def576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cfd906136eb565b8567ffffffffffffffff81118015610e0657600080fd5b50604051908082528060200260200182016040528015610e4057816020015b610e2d612aea565b815260200190600190039081610e255790505b5092508567ffffffffffffffff81118015610e5a57600080fd5b50604051908082528060200260200182016040528015610e84578160200160208202803683370190505b5091508567ffffffffffffffff81118015610e9e57600080fd5b50604051908082528060200260200182016040528015610ec8578160200160208202803683370190505b50905060005b8681101561100d57306337f381d8898984818110610ee857fe5b90506101400201888885818110610efb57fe5b9050608002016040518363ffffffff1660e01b8152600401610f1e929190613963565b60c06040518083038186803b158015610f3657600080fd5b505afa925050508015610f84575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252610f819181019061316f565b60015b610f8d57611005565b82878581518110610f9a57fe5b602002602001018190525081868581518110610fb257fe5b60200260200101906fffffffffffffffffffffffffffffffff1690816fffffffffffffffffffffffffffffffff168152505080858581518110610ff157fe5b911515602092830291909101909101525050505b600101610ece565b509450945094915050565b6000806000611025611c8d565b60008581526020919091526040902054925061103f611c8d565b60008581526001919091016020526040902054915061105c611c8d565b6000948552600601602052506040909220549092565b606080808584146110af576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cfd906136eb565b8567ffffffffffffffff811180156110c657600080fd5b5060405190808252806020026020018201604052801561110057816020015b6110ed612aea565b8152602001906001900390816110e55790505b5092508567ffffffffffffffff8111801561111a57600080fd5b50604051908082528060200260200182016040528015611144578160200160208202803683370190505b5091508567ffffffffffffffff8111801561115e57600080fd5b50604051908082528060200260200182016040528015611188578160200160208202803683370190505b50905060005b8681101561100d5730631fb097958989848181106111a857fe5b905061018002018888858181106111bb57fe5b9050608002016040518363ffffffff1660e01b81526004016111de9291906137a5565b60c06040518083038186803b1580156111f657600080fd5b505afa925050508015611244575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526112419181019061316f565b60015b61124d576112c5565b8287858151811061125a57fe5b60200260200101819052508186858151811061127257fe5b60200260200101906fffffffffffffffffffffffffffffffff1690816fffffffffffffffffffffffffffffffff1681525050808585815181106112b157fe5b911515602092830291909101909101525050505b60010161118e565b6112d5612b13565b60003073ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561131d57600080fd5b505afa158015611331573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113559190612e3f565b90503373ffffffffffffffffffffffffffffffffffffffff82161461138157611381610c973383611e17565b506113c9611394368a90038a018a6130ef565b6113a3368a90038a018a6130ef565b6113b2368a90038a018a613252565b6113c1368a90038a018a613252565b888888611eda565b98975050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600061048f61048a83612085565b61140f612aea565b611417612aea565b6114218484610b5e565b905083604001516fffffffffffffffffffffffffffffffff1660001415611460576020810160005b9081600481111561145657fe5b9052509050610963565b60608401516fffffffffffffffffffffffffffffffff1661148657602081016000611449565b9392505050565b60006040517fe593d3fdfa8b60e5e17a1b2204662ecbe15c23f2084b9ad5bae40359540a7da98152825173ffffffffffffffffffffffffffffffffffffffff166020820152602083015173ffffffffffffffffffffffffffffffffffffffff16604082015260408301516fffffffffffffffffffffffffffffffff16606082015260608301516fffffffffffffffffffffffffffffffff166080820152608083015173ffffffffffffffffffffffffffffffffffffffff1660a082015260a083015173ffffffffffffffffffffffffffffffffffffffff1660c082015260c083015173ffffffffffffffffffffffffffffffffffffffff1660e082015260e083015161010082015261010083015167ffffffffffffffff166101208201526101208301516101408201526101608120915050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000826040516020016115f99291906133ed565b604051602081830303815290604052805190602001209050919050565b600081604001516fffffffffffffffffffffffffffffffff1660001480611651575060608201516fffffffffffffffffffffffffffffffff16155b1561165e57506000610492565b6001826080015160200151600481111561167457fe5b1461168157506000610492565b60006116da8360800151604001518460600151036fffffffffffffffffffffffffffffffff1684606001516fffffffffffffffffffffffffffffffff1685604001516fffffffffffffffffffffffffffffffff166121fc565b90506116f7816116f285602001518660000151612214565b612346565b90506114866117338285604001516fffffffffffffffffffffffffffffffff1686606001516fffffffffffffffffffffffffffffffff1661235c565b612380565b600061174483836123ac565b60028251600381111561175357fe5b14156117bb5760018383602001518460400151856060015160405160008152602001604052604051611788949392919061355b565b6020604051602081039080840390855afa1580156117aa573d6000803e3d6000fd5b505050602060405103519050611860565b6003825160038111156117ca57fe5b14156118605760007f19457468657265756d205369676e6564204d6573736167653a0a33320000000060005283601c52603c600020905060018184602001518560400151866060015160405160008152602001604052604051611830949392919061355b565b6020604051602081039080840390855afa158015611852573d6000803e3d6000fd5b505050602060405103519150505b73ffffffffffffffffffffffffffffffffffffffff811661096357610963610c97600585612460565b611891612b13565b600061189b611c8d565b6009015490506000600160ff168460a0015160ff16146118df57835160608701516118da916fffffffffffffffffffffffffffffffff90911690612496565b611904565b83516040870151611904916fffffffffffffffffffffffffffffffff90911690612496565b90506000600160ff168560c0015160ff161461194c57611947856020015187604001516fffffffffffffffffffffffffffffffff1661249690919063ffffffff16565b611979565b611979856020015187606001516fffffffffffffffffffffffffffffffff1661249690919063ffffffff16565b90506000600160ff168660a0015160ff16146119ad5760408601516119a8906119a285876124b5565b906124e6565b6119af565b825b90506000600160ff168760c0015160ff16146119dd5760408701516119d8906119a285886124b5565b6119df565b825b905080821415611a57578186526040870151611a029086906119a29085906124b5565b6020870152611a0f611c8d565b606088015160009081526001919091016020526040908190205490870152611a35611c8d565b6080880151600090815260019190910160205260409020546060870152611afe565b80821115611a9e578086526040870151611a789086906119a29084906124b5565b602087015260a0870151611a91908a9060ff1688612510565b6040870152611a35611c8d565b8186526040870151611ab79086906119a29085906124b5565b6020870152611ac4611c8d565b60010160008860600151815260200190815260200160002054866040018181525050611af8888860c0015160ff1688612510565b60608701525b60a087015160ff1660021415611bcc576000611b618a606001516fffffffffffffffffffffffffffffffff166119a28c604001516fffffffffffffffffffffffffffffffff16611b5b8b602001518a61249690919063ffffffff16565b906124b5565b9050611ba68a606001516fffffffffffffffffffffffffffffffff166119a28c604001516fffffffffffffffffffffffffffffffff16886124b590919063ffffffff16565b608088018190528751611bc5918391611bbf9190612496565b90612496565b6080880152505b60c087015160ff1660011415611c81576000611c2989606001516fffffffffffffffffffffffffffffffff166119a28b604001516fffffffffffffffffffffffffffffffff16611b5b8b600001518961249690919063ffffffff16565b9050611c7a81611bbf8960200151611bbf8d606001516fffffffffffffffffffffffffffffffff166119a28f604001516fffffffffffffffffffffffffffffffff168b6124b590919063ffffffff16565b60a0880152505b50505050509392505050565b6000806109636007612598565b6000611ca4611c8d565b865160009081526020829052604090819020546fffffffffffffffffffffffffffffffff808216928a0183905292935091871611611cfb576020870160025b90816004811115611cf057fe5b815250505050611d84565b7f8000000000000000000000000000000000000000000000000000000000000000811615611d2e57602087016003611ce3565b504267ffffffffffffffff168467ffffffffffffffff1611611d68576020860160045b90816004811115611d5e57fe5b8152505050611d84565b82821115611d7b57602086016003611d51565b50600160208601525b5050505050565b6040517f6eb224cb0000000000000000000000000000000000000000000000000000000081523090636eb224cb90611de99084907f0000000000000000000000000000000000000000000000000000000000000000906004016135a6565b600060405180830381600087803b158015611e0357600080fd5b505af1158015611d84573d6000803e3d6000fd5b60607f1de45ad18e8a4484220a3ca14f4d977641addbaba5a344b1384dc2aa78a2e34d8383604051602401611e4d929190613444565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152905092915050565b805160208201fd5b611ee2612b13565b60208089015173ffffffffffffffffffffffffffffffffffffffff908116895289511690880152600060ff8416600114611f20578860600151611f26565b88604001515b9050600060ff8416600114611f3f578860400151611f45565b88606001515b9050611f4f612aea565b611f598b84611407565b9050611f63612aea565b611f6d8b84611407565b9050611f7b8c83338d6125b3565b611f878b82338c6125b3565b611f8f612b49565b6040808401516fffffffffffffffffffffffffffffffff9081168352838201511660208301528101899052825160608201528151608082015260ff80891660a0830152871660c0820152611fe48d8d83611889565b83518351919750611ff8918f8f338b612738565b600060ff891660011461200f578660200151612012565b86515b9050600060ff891660011461202b57876020015161202e565b87515b8551895160208b015160408c015160808d015194955061205194839190886127cb565b8351885160208a015160608b015160a08c0151612073949392918291876127cb565b50505050505050979650505050505050565b60006040517fce918627cb55462ddbb85e73de69a8b322f2bc88f4507c52fcad6d4c33c29d498152825173ffffffffffffffffffffffffffffffffffffffff166020820152602083015173ffffffffffffffffffffffffffffffffffffffff16604082015260408301516fffffffffffffffffffffffffffffffff16606082015260608301516fffffffffffffffffffffffffffffffff16608082015260808301516fffffffffffffffffffffffffffffffff1660a082015260a083015173ffffffffffffffffffffffffffffffffffffffff1660c082015260c083015173ffffffffffffffffffffffffffffffffffffffff1660e082015260e083015173ffffffffffffffffffffffffffffffffffffffff1661010082015261010083015173ffffffffffffffffffffffffffffffffffffffff1661012082015261012083015161014082015261014083015167ffffffffffffffff166101608201526101608301516101808201526101a08120915050919050565b600061220c836119a286856124b5565b949350505050565b60006114868373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e84306040518363ffffffff1660e01b8152600401612254929190613444565b60206040518083038186803b15801561226c57600080fd5b505afa158015612280573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122a49190613289565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8616906370a08231906122f6908790600401613423565b60206040518083038186803b15801561230e57600080fd5b505afa158015612322573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116f29190613289565b60008183106123555781611486565b5090919050565b600061220c836119a2612370826001612496565b61237a88876124b5565b906128d5565b60006fffffffffffffffffffffffffffffffff8211156123a8576123a8610c976003846128f1565b5090565b60408101517ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141111580612403575060608101517f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a111155b1561241657612416610c97600584612460565b60008151600381111561242557fe5b141561243957612439610c97600384612460565b60018151600381111561244857fe5b141561245c5761245c610c97600084612460565b5050565b60607ff18f11f3027e735c758137924b262d4d3aff0037dcd785aca3c699fa05d960bd8383604051602401611e4d92919061366c565b6000828211156124af576124af610c976002858561290e565b50900390565b6000826124c457506000610963565b828202828482816124d157fe5b041461148657611486610c976001868661290e565b6000816124fc576124fc610c976003858561290e565b600082848161250757fe5b04949350505050565b6000600183141561255d57612556826000015185604001516fffffffffffffffffffffffffffffffff1686608001516fffffffffffffffffffffffffffffffff166129b3565b9050611486565b61220c826020015185606001516fffffffffffffffffffffffffffffffff1686608001516fffffffffffffffffffffffffffffffff166129b3565b600060808260088111156125a857fe5b600101901b92915050565b60006125bd611c8d565b8451600090815260069190910160205260409020549050806125eb576125eb610c97856000015160006129e1565b6001846020015160048111156125fd57fe5b1461261757612617610c97856000015186602001516129e1565b60e085015173ffffffffffffffffffffffffffffffffffffffff161561266b5760e085015173ffffffffffffffffffffffffffffffffffffffff16331461266b5761266b610c9760028660000151336129fe565b60c085015173ffffffffffffffffffffffffffffffffffffffff16156126d5578273ffffffffffffffffffffffffffffffffffffffff168560c0015173ffffffffffffffffffffffffffffffffffffffff16146126d5576126d5610c9760018660000151866129fe565b60006126e5856000015184611738565b90508560a0015173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461273057612730610c9760008760000151612a1d565b505050505050565b61274f83600001518560a001518360200151610cad565b835160a08401518251612763929190610cad565b6127768360000151838360600151610cad565b6127898460000151838360400151610cad565b6080810151156127aa576127aa84600001518560a001518360800151610cad565b60a0810151156127305761273083600001518460a001518360a00151610cad565b6127ed816127d7611c8d565b60008a81526020919091526040902054906128d5565b6127f5611c8d565b6000898152602091909152604090205561282a83612811611c8d565b60008a8152600191909101602052604090205490612496565b612832611c8d565b6000898152600191909101602052604090205561287082611bbf858188612857611c8d565b60008e8152600691909101602052604090205490612496565b612878611c8d565b600601600089815260200190815260200160002081905550867f748c85a5ac1c8590cda7df4a1afb0caba73e19b5b8069477f89d145b08d735738787866040516128c493929190613a5b565b60405180910390a250505050505050565b60008282018381101561148657611486610c976000868661290e565b606063c996af7b60e01b8383604051602401611e4d92919061360f565b606063e946c1bb60e01b84848460405160240161292d939291906135ee565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290509392505050565b60006129c0848484612a3a565b156129d3576129d3610c97858585612a94565b61220c836119a286856124b5565b606063fdb6ca8d60e01b8383604051602401611e4d92919061353d565b606063e53c76c860e01b84848460405160240161292d93929190613626565b6060637e5a231860e01b8383604051602401611e4d92919061365e565b600082612a4c57612a4c610c97612ab3565b811580612a57575083155b15612a6457506000611486565b60008380612a6e57fe5b8584099050612a7d85846124b5565b612a89826103e86124b5565b101595945050505050565b606063339f3de260e01b84848460405160240161292d93929190613a5b565b60408051808201909152600481527fa791837c00000000000000000000000000000000000000000000000000000000602082015290565b604080516080810190915260008082526020820190815260006020820181905260409091015290565b6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915290565b803561096381613ad8565b60008083601f840112612ba1578182fd5b50813567ffffffffffffffff811115612bb8578182fd5b602083019150836020608083028501011115612bd357600080fd5b9250929050565b600061018082840312156107bc578081fd5b6000610180808385031215612bff578182fd5b612c0881613a71565b915050612c158383612b85565b8152612c248360208401612b85565b6020820152612c368360408401612e0b565b6040820152612c488360608401612e0b565b6060820152612c5a8360808401612e0b565b6080820152612c6c8360a08401612b85565b60a0820152612c7e8360c08401612b85565b60c0820152612c908360e08401612b85565b60e0820152610100612ca484828501612b85565b908201526101208281013590820152610140612cc284828501612e16565b818301525061016080830135818301525092915050565b6000610140808385031215612cec578182fd5b612cf581613a71565b915050612d028383612b85565b8152612d118360208401612b85565b6020820152612d238360408401612e0b565b6040820152612d358360608401612e0b565b6060820152612d478360808401612b85565b6080820152612d598360a08401612b85565b60a0820152612d6b8360c08401612b85565b60c082015260e082013560e0820152610100612d8984828501612e16565b818301525061012080830135818301525092915050565b6000608082840312156107bc578081fd5b600060808284031215612dc2578081fd5b612dcc6080613a71565b9050813560048110612ddd57600080fd5b8152612dec8360208401612e2e565b6020820152604082013560408201526060820135606082015292915050565b803561096381613b08565b803567ffffffffffffffff8116811461096357600080fd5b803560ff8116811461096357600080fd5b600060208284031215612e50578081fd5b815161148681613ad8565b60008060408385031215612e6d578081fd5b8235612e7881613ad8565b91506020830135612e8881613ad8565b809150509250929050565b60008060008060408587031215612ea8578182fd5b843567ffffffffffffffff80821115612ebf578384fd5b818701915087601f830112612ed2578384fd5b813581811115612ee0578485fd5b88602061018083028501011115612ef5578485fd5b602092830196509450908601359080821115612f0f578384fd5b50612f1c87828801612b90565b95989497509550505050565b60008060008060408587031215612f3d578182fd5b843567ffffffffffffffff80821115612f54578384fd5b818701915087601f830112612f67578384fd5b813581811115612f75578485fd5b88602061014083028501011115612ef5578485fd5b600060208284031215612f9b578081fd5b815161148681613afa565b600060208284031215612fb7578081fd5b5035919050565b600080600060608486031215612fd2578081fd5b8335612fdd81613ad8565b92506020840135612fed81613ad8565b929592945050506040919091013590565b6000806000806000806000610460888a031215613019578485fd5b6130238989612bda565b9650613033896101808a01612bda565b9550613043896103008a01612da0565b9450613053896103808a01612da0565b9350610400880135925061306b896104208a01612e2e565b915061307b896104408a01612e2e565b905092959891949750929550565b600080600080600061036086880312156130a1578283fd5b6130ab8787612bda565b94506130bb876101808801612bda565b935061030086013592506130d3876103208801612e2e565b91506130e3876103408801612e2e565b90509295509295909350565b60006101808284031215613101578081fd5b6114868383612bec565b600080610200838503121561311e578182fd5b6131288484612bec565b9150613138846101808501612da0565b90509250929050565b6000806101a08385031215613154578182fd5b61315e8484612bec565b9150610180830135612e8881613b08565b600080600083850360c0811215613184578182fd5b6080811215613191578182fd5b5061319c6080613a71565b845181526020850151600581106131b1578283fd5b602082015260408501516131c481613b08565b604082015260608501516131d781613b08565b606082015260808501519093506131ed81613b08565b60a08501519092506131fe81613afa565b809150509250925092565b6000610140828403121561321b578081fd5b6114868383612cd9565b6000806101c08385031215613238578182fd5b6132428484612cd9565b9150613138846101408501612db1565b600060808284031215613263578081fd5b6114868383612db1565b60006020828403121561327e578081fd5b813561148681613b08565b60006020828403121561329a578081fd5b5051919050565b6000602082840312156132b2578081fd5b6114868383612e2e565b60006132c88383613340565b505060800190565b6fffffffffffffffffffffffffffffffff16815260200190565b73ffffffffffffffffffffffffffffffffffffffff169052565b6000815180845260208085019450808401835b83811015613335578151151587529582019590820190600101613317565b509495945050505050565b8051825260208101516005811061335357fe5b60208301526040818101516fffffffffffffffffffffffffffffffff9081169184019190915260609182015116910152565b80356004811061339457600080fd5b61339d81613acb565b82526040810160ff6133b28260208501612e2e565b166020840152356040830152606090810135910152565b6fffffffffffffffffffffffffffffffff169052565b67ffffffffffffffff169052565b7f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b600060608201606083528086516134a88184613534565b915060209250828801845b828110156134d4576134c68483516132bc565b9350908401906001016134b3565b505050838103828501528086516134eb8184613534565b91508388019250845b81811015613515576135078385516132d0565b9385019392506001016134f4565b505084810360408601526113c98187613304565b901515815260200190565b90815260200190565b828152604081016005831061354e57fe5b8260208301529392505050565b93845260ff9290921660208401526040830152606082015260800190565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b7fffffffff0000000000000000000000000000000000000000000000000000000092909216825273ffffffffffffffffffffffffffffffffffffffff16602082015260400190565b606081016135fb85613acb565b938152602081019290925260409091015290565b6040810161361c84613acb565b9281526020015290565b606081016003851061363457fe5b938152602081019290925273ffffffffffffffffffffffffffffffffffffffff1660409091015290565b604081016007841061361c57fe5b604081016006841061361c57fe5b6000602080835283518082850152825b818110156136a65785810183015185820160400152820161368a565b818111156136b75783604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b6020808252602c908201527f4e61746976654f7264657273466561747572652f4d49534d4154434845445f4160408201527f525241595f4c454e475448530000000000000000000000000000000000000000606082015260800190565b60208082526024908201527f466978696e546f6b656e5370656e6465722f43414e4e4f545f494e564f4b455f60408201527f53454c4600000000000000000000000000000000000000000000000000000000606082015260800190565b6102008101602084016137c1836137bc8388612b85565b6132ea565b6137cb8186613a98565b90506137da60208401826132ea565b506137e86040850185613aa5565b6137f560408401826133c9565b506138036060850185613aa5565b61381060608401826133c9565b5061381e6080850185613aa5565b61382b60808401826133c9565b5061383960a0850185613a98565b61384660a08401826132ea565b5061385460c0850185613a98565b61386160c08401826132ea565b5061386f60e0850185613a98565b61387c60e08401826132ea565b5061010061388c81860186613a98565b613898828501826132ea565b505061012084810135908301526101406138b481860186613ab2565b6138c0828501826133df565b50506101608481013590830152611486610180830184613385565b600060c082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015292915050565b608081016109638284613340565b60c0810161393b8286613340565b6fffffffffffffffffffffffffffffffff8416608083015282151560a0830152949350505050565b6101c081016020840161397a836137bc8388612b85565b6139848186613a98565b905061399360208401826132ea565b506139a16040850185613aa5565b6139ae60408401826133c9565b506139bc6060850185613aa5565b6139c960608401826133c9565b506139d76080850185613a98565b6139e460808401826132ea565b506139f260a0850185613a98565b6139ff60a08401826132ea565b50613a0d60c0850185613a98565b613a1a60c08401826132ea565b5060e084013560e0830152610100613a3481860186613ab2565b613a40828501826133df565b50506101208481013590830152611486610140830184613385565b9283526020830191909152604082015260600190565b60405181810167ffffffffffffffff81118282101715613a9057600080fd5b604052919050565b6000823561148681613ad8565b6000823561148681613b08565b6000823567ffffffffffffffff81168114611486578182fd5b60048110613ad557fe5b50565b73ffffffffffffffffffffffffffffffffffffffff81168114613ad557600080fd5b8015158114613ad557600080fd5b6fffffffffffffffffffffffffffffffff81168114613ad557600080fdfea2646970667358221220e679186b6b16c9d63563492b4d4752812c7ca82e622199d5a53113ac2e2115fb64736f6c634300060c0033",
  "deployedBytecode": "0x6080604052600436106101755760003560e01c806395480889116100cb578063b060c8801161007f578063dab400f311610059578063dab400f314610427578063dd11d2251461043c578063e87711991461045c57610175565b8063b060c880146103c5578063b4658bfb146103f4578063b8ead9531461041457610175565b8063a97ab0c8116100b0578063a97ab0c814610354578063a9ca290714610376578063ad354eeb1461039657610175565b806395480889146103145780639d68d9751461033457610175565b806337f381d81161012d5780636b52a4a8116101075780636b52a4a8146102b05780638af079ea146102dd5780638fd3ab80146102f257610175565b806337f381d81461024e57806364dd1ccf1461026e5780636ae4b4f71461028e57610175565b80631fb097951161015e5780631fb09795146101c557806322780cea146101f4578063346693c51461022157610175565b8063016a6d651461017a578063031b905c146101b0575b600080fd5b34801561018657600080fd5b5061019a610195366004613209565b61047c565b6040516101a79190613534565b60405180910390f35b3480156101bc57600080fd5b5061019a610497565b3480156101d157600080fd5b506101e56101e036600461310b565b6104bb565b6040516101a79392919061392d565b34801561020057600080fd5b5061021461020f366004613089565b6105d3565b6040516101a791906138db565b34801561022d57600080fd5b5061024161023c366004613209565b610709565b6040516101a7919061391f565b34801561025a57600080fd5b506101e5610269366004613225565b6107c2565b34801561027a57600080fd5b5061019a6102893660046132a1565b6108c2565b34801561029a57600080fd5b506102a36108e2565b6040516101a7919061367a565b3480156102bc57600080fd5b506102d06102cb366004612e5b565b61091b565b6040516101a79190613529565b3480156102e957600080fd5b5061019a610969565b3480156102fe57600080fd5b5061030761098c565b6040516101a79190613579565b34801561032057600080fd5b5061024161032f3660046130ef565b610ad2565b34801561034057600080fd5b5061024161034f366004613141565b610b5e565b34801561036057600080fd5b5061037461036f366004612fa6565b610beb565b005b34801561038257600080fd5b50610374610391366004612fbe565b610cad565b3480156103a257600080fd5b506103b66103b1366004612f28565b610db2565b6040516101a793929190613491565b3480156103d157600080fd5b506103e56103e0366004612fa6565b611018565b6040516101a793929190613a5b565b34801561040057600080fd5b506103b661040f366004612e93565b611072565b610214610422366004612ffe565b6112cd565b34801561043357600080fd5b5061019a6113d5565b34801561044857600080fd5b5061019a6104573660046130ef565b6113f9565b34801561046857600080fd5b50610241610477366004613141565b611407565b600061048f61048a8361148d565b6115c4565b90505b919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6104c3612aea565b6000806104cf85610ad2565b92506105606040518060a001604052808760a0015173ffffffffffffffffffffffffffffffffffffffff168152602001876000015173ffffffffffffffffffffffffffffffffffffffff16815260200187604001516fffffffffffffffffffffffffffffffff16815260200187606001516fffffffffffffffffffffffffffffffff16815260200185815250611616565b83519092506000906105809061057b36889003880188613252565b611738565b90508073ffffffffffffffffffffffffffffffffffffffff168660a0015173ffffffffffffffffffffffffffffffffffffffff1614806105c957506105c98660a001518261091b565b9150509250925092565b6105db612b13565b600060ff84166001146105fd576105f8608088016060890161326d565b61060d565b61060d606088016040890161326d565b9050600060ff84166001146106315761062c606088016040890161326d565b610641565b610641608088016060890161326d565b905061064b612aea565b61066361065d368b90038b018b6130ef565b84611407565b905061066d612aea565b61067f61065d368b90038b018b6130ef565b9050610689612b49565b6040808401516fffffffffffffffffffffffffffffffff9081168352838201511660208301528101899052825160608201528151608082015260ff80891660a0830152871660c08201526106fa6106e5368d90038d018d6130ef565b6106f4368d90038d018d6130ef565b83611889565b9b9a5050505050505050505050565b610711612aea565b61071a8261047c565b81526000610726611c8d565b608084015173ffffffffffffffffffffffffffffffffffffffff9081166000908152600392909201602090815260408084208751841685528252808420828801519093168452919052908190205490840151610100850151610120860151929350610795928592919085611c9a565b60c083015173ffffffffffffffffffffffffffffffffffffffff166107bc57600060208301525b50919050565b6107ca612aea565b6000806107d685610709565b92506108676040518060a00160405280876080015173ffffffffffffffffffffffffffffffffffffffff168152602001876000015173ffffffffffffffffffffffffffffffffffffffff16815260200187604001516fffffffffffffffffffffffffffffffff16815260200187606001516fffffffffffffffffffffffffffffffff16815260200185815250611616565b91506000610879846000015186611738565b90508073ffffffffffffffffffffffffffffffffffffffff16866080015173ffffffffffffffffffffffffffffffffffffffff1614806105c957506105c986608001518261091b565b600060ff82166001146108d65760c86108d9565b60645b60ff1692915050565b6040518060400160405280600b81526020017f4d617463684f726465727300000000000000000000000000000000000000000081525081565b6000610925611c8d565b73ffffffffffffffffffffffffffffffffffffffff808516600090815260059290920160209081526040808420928616845291905290205460ff1690505b92915050565b600080610974611c8d565b6009015490508061098757506402540be4005b905090565b60006109b77fb8ead95300000000000000000000000000000000000000000000000000000000611d8b565b6109e07fb060c88000000000000000000000000000000000000000000000000000000000611d8b565b610a097f22780cea00000000000000000000000000000000000000000000000000000000611d8b565b610a327fa97ab0c800000000000000000000000000000000000000000000000000000000611d8b565b610a5b7f8af079ea00000000000000000000000000000000000000000000000000000000611d8b565b610a847fe877119900000000000000000000000000000000000000000000000000000000611d8b565b610aad7f64dd1ccf00000000000000000000000000000000000000000000000000000000611d8b565b507f2c64c5ef0000000000000000000000000000000000000000000000000000000090565b610ada612aea565b610ae3826113f9565b81526000610aef611c8d565b60a084015173ffffffffffffffffffffffffffffffffffffffff90811660009081526002929092016020908152604080842087518416855282528084208288015190931684529190529081902054908401516101408501516101608601519293506107bc928592919085611c9a565b610b66612aea565b610b6f836113f9565b81526000610b7b611c8d565b60a085015173ffffffffffffffffffffffffffffffffffffffff9081166000908152600292909201602090815260408084208851841685528252808420828901519093168452919052902054610140850151610160860151919250610be4918491869185611c9a565b5092915050565b60003073ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c3357600080fd5b505afa158015610c47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6b9190612e3f565b90503373ffffffffffffffffffffffffffffffffffffffff821614610c9c57610c9c610c973383611e17565b611ed2565b5080610ca6611c8d565b6009015550565b73ffffffffffffffffffffffffffffffffffffffff8316301415610d06576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cfd90613748565b60405180910390fd5b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84169063a9059cbb90610d5a908590859060040161346b565b602060405180830381600087803b158015610d7457600080fd5b505af1158015610d88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dac9190612f8a565b50505050565b60608080858414610def576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cfd906136eb565b8567ffffffffffffffff81118015610e0657600080fd5b50604051908082528060200260200182016040528015610e4057816020015b610e2d612aea565b815260200190600190039081610e255790505b5092508567ffffffffffffffff81118015610e5a57600080fd5b50604051908082528060200260200182016040528015610e84578160200160208202803683370190505b5091508567ffffffffffffffff81118015610e9e57600080fd5b50604051908082528060200260200182016040528015610ec8578160200160208202803683370190505b50905060005b8681101561100d57306337f381d8898984818110610ee857fe5b90506101400201888885818110610efb57fe5b9050608002016040518363ffffffff1660e01b8152600401610f1e929190613963565b60c06040518083038186803b158015610f3657600080fd5b505afa925050508015610f84575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252610f819181019061316f565b60015b610f8d57611005565b82878581518110610f9a57fe5b602002602001018190525081868581518110610fb257fe5b60200260200101906fffffffffffffffffffffffffffffffff1690816fffffffffffffffffffffffffffffffff168152505080858581518110610ff157fe5b911515602092830291909101909101525050505b600101610ece565b509450945094915050565b6000806000611025611c8d565b60008581526020919091526040902054925061103f611c8d565b60008581526001919091016020526040902054915061105c611c8d565b6000948552600601602052506040909220549092565b606080808584146110af576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cfd906136eb565b8567ffffffffffffffff811180156110c657600080fd5b5060405190808252806020026020018201604052801561110057816020015b6110ed612aea565b8152602001906001900390816110e55790505b5092508567ffffffffffffffff8111801561111a57600080fd5b50604051908082528060200260200182016040528015611144578160200160208202803683370190505b5091508567ffffffffffffffff8111801561115e57600080fd5b50604051908082528060200260200182016040528015611188578160200160208202803683370190505b50905060005b8681101561100d5730631fb097958989848181106111a857fe5b905061018002018888858181106111bb57fe5b9050608002016040518363ffffffff1660e01b81526004016111de9291906137a5565b60c06040518083038186803b1580156111f657600080fd5b505afa925050508015611244575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526112419181019061316f565b60015b61124d576112c5565b8287858151811061125a57fe5b60200260200101819052508186858151811061127257fe5b60200260200101906fffffffffffffffffffffffffffffffff1690816fffffffffffffffffffffffffffffffff1681525050808585815181106112b157fe5b911515602092830291909101909101525050505b60010161118e565b6112d5612b13565b60003073ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561131d57600080fd5b505afa158015611331573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113559190612e3f565b90503373ffffffffffffffffffffffffffffffffffffffff82161461138157611381610c973383611e17565b506113c9611394368a90038a018a6130ef565b6113a3368a90038a018a6130ef565b6113b2368a90038a018a613252565b6113c1368a90038a018a613252565b888888611eda565b98975050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600061048f61048a83612085565b61140f612aea565b611417612aea565b6114218484610b5e565b905083604001516fffffffffffffffffffffffffffffffff1660001415611460576020810160005b9081600481111561145657fe5b9052509050610963565b60608401516fffffffffffffffffffffffffffffffff1661148657602081016000611449565b9392505050565b60006040517fe593d3fdfa8b60e5e17a1b2204662ecbe15c23f2084b9ad5bae40359540a7da98152825173ffffffffffffffffffffffffffffffffffffffff166020820152602083015173ffffffffffffffffffffffffffffffffffffffff16604082015260408301516fffffffffffffffffffffffffffffffff16606082015260608301516fffffffffffffffffffffffffffffffff166080820152608083015173ffffffffffffffffffffffffffffffffffffffff1660a082015260a083015173ffffffffffffffffffffffffffffffffffffffff1660c082015260c083015173ffffffffffffffffffffffffffffffffffffffff1660e082015260e083015161010082015261010083015167ffffffffffffffff166101208201526101208301516101408201526101608120915050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000826040516020016115f99291906133ed565b604051602081830303815290604052805190602001209050919050565b600081604001516fffffffffffffffffffffffffffffffff1660001480611651575060608201516fffffffffffffffffffffffffffffffff16155b1561165e57506000610492565b6001826080015160200151600481111561167457fe5b1461168157506000610492565b60006116da8360800151604001518460600151036fffffffffffffffffffffffffffffffff1684606001516fffffffffffffffffffffffffffffffff1685604001516fffffffffffffffffffffffffffffffff166121fc565b90506116f7816116f285602001518660000151612214565b612346565b90506114866117338285604001516fffffffffffffffffffffffffffffffff1686606001516fffffffffffffffffffffffffffffffff1661235c565b612380565b600061174483836123ac565b60028251600381111561175357fe5b14156117bb5760018383602001518460400151856060015160405160008152602001604052604051611788949392919061355b565b6020604051602081039080840390855afa1580156117aa573d6000803e3d6000fd5b505050602060405103519050611860565b6003825160038111156117ca57fe5b14156118605760007f19457468657265756d205369676e6564204d6573736167653a0a33320000000060005283601c52603c600020905060018184602001518560400151866060015160405160008152602001604052604051611830949392919061355b565b6020604051602081039080840390855afa158015611852573d6000803e3d6000fd5b505050602060405103519150505b73ffffffffffffffffffffffffffffffffffffffff811661096357610963610c97600585612460565b611891612b13565b600061189b611c8d565b6009015490506000600160ff168460a0015160ff16146118df57835160608701516118da916fffffffffffffffffffffffffffffffff90911690612496565b611904565b83516040870151611904916fffffffffffffffffffffffffffffffff90911690612496565b90506000600160ff168560c0015160ff161461194c57611947856020015187604001516fffffffffffffffffffffffffffffffff1661249690919063ffffffff16565b611979565b611979856020015187606001516fffffffffffffffffffffffffffffffff1661249690919063ffffffff16565b90506000600160ff168660a0015160ff16146119ad5760408601516119a8906119a285876124b5565b906124e6565b6119af565b825b90506000600160ff168760c0015160ff16146119dd5760408701516119d8906119a285886124b5565b6119df565b825b905080821415611a57578186526040870151611a029086906119a29085906124b5565b6020870152611a0f611c8d565b606088015160009081526001919091016020526040908190205490870152611a35611c8d565b6080880151600090815260019190910160205260409020546060870152611afe565b80821115611a9e578086526040870151611a789086906119a29084906124b5565b602087015260a0870151611a91908a9060ff1688612510565b6040870152611a35611c8d565b8186526040870151611ab79086906119a29085906124b5565b6020870152611ac4611c8d565b60010160008860600151815260200190815260200160002054866040018181525050611af8888860c0015160ff1688612510565b60608701525b60a087015160ff1660021415611bcc576000611b618a606001516fffffffffffffffffffffffffffffffff166119a28c604001516fffffffffffffffffffffffffffffffff16611b5b8b602001518a61249690919063ffffffff16565b906124b5565b9050611ba68a606001516fffffffffffffffffffffffffffffffff166119a28c604001516fffffffffffffffffffffffffffffffff16886124b590919063ffffffff16565b608088018190528751611bc5918391611bbf9190612496565b90612496565b6080880152505b60c087015160ff1660011415611c81576000611c2989606001516fffffffffffffffffffffffffffffffff166119a28b604001516fffffffffffffffffffffffffffffffff16611b5b8b600001518961249690919063ffffffff16565b9050611c7a81611bbf8960200151611bbf8d606001516fffffffffffffffffffffffffffffffff166119a28f604001516fffffffffffffffffffffffffffffffff168b6124b590919063ffffffff16565b60a0880152505b50505050509392505050565b6000806109636007612598565b6000611ca4611c8d565b865160009081526020829052604090819020546fffffffffffffffffffffffffffffffff808216928a0183905292935091871611611cfb576020870160025b90816004811115611cf057fe5b815250505050611d84565b7f8000000000000000000000000000000000000000000000000000000000000000811615611d2e57602087016003611ce3565b504267ffffffffffffffff168467ffffffffffffffff1611611d68576020860160045b90816004811115611d5e57fe5b8152505050611d84565b82821115611d7b57602086016003611d51565b50600160208601525b5050505050565b6040517f6eb224cb0000000000000000000000000000000000000000000000000000000081523090636eb224cb90611de99084907f0000000000000000000000000000000000000000000000000000000000000000906004016135a6565b600060405180830381600087803b158015611e0357600080fd5b505af1158015611d84573d6000803e3d6000fd5b60607f1de45ad18e8a4484220a3ca14f4d977641addbaba5a344b1384dc2aa78a2e34d8383604051602401611e4d929190613444565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152905092915050565b805160208201fd5b611ee2612b13565b60208089015173ffffffffffffffffffffffffffffffffffffffff908116895289511690880152600060ff8416600114611f20578860600151611f26565b88604001515b9050600060ff8416600114611f3f578860400151611f45565b88606001515b9050611f4f612aea565b611f598b84611407565b9050611f63612aea565b611f6d8b84611407565b9050611f7b8c83338d6125b3565b611f878b82338c6125b3565b611f8f612b49565b6040808401516fffffffffffffffffffffffffffffffff9081168352838201511660208301528101899052825160608201528151608082015260ff80891660a0830152871660c0820152611fe48d8d83611889565b83518351919750611ff8918f8f338b612738565b600060ff891660011461200f578660200151612012565b86515b9050600060ff891660011461202b57876020015161202e565b87515b8551895160208b015160408c015160808d015194955061205194839190886127cb565b8351885160208a015160608b015160a08c0151612073949392918291876127cb565b50505050505050979650505050505050565b60006040517fce918627cb55462ddbb85e73de69a8b322f2bc88f4507c52fcad6d4c33c29d498152825173ffffffffffffffffffffffffffffffffffffffff166020820152602083015173ffffffffffffffffffffffffffffffffffffffff16604082015260408301516fffffffffffffffffffffffffffffffff16606082015260608301516fffffffffffffffffffffffffffffffff16608082015260808301516fffffffffffffffffffffffffffffffff1660a082015260a083015173ffffffffffffffffffffffffffffffffffffffff1660c082015260c083015173ffffffffffffffffffffffffffffffffffffffff1660e082015260e083015173ffffffffffffffffffffffffffffffffffffffff1661010082015261010083015173ffffffffffffffffffffffffffffffffffffffff1661012082015261012083015161014082015261014083015167ffffffffffffffff166101608201526101608301516101808201526101a08120915050919050565b600061220c836119a286856124b5565b949350505050565b60006114868373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e84306040518363ffffffff1660e01b8152600401612254929190613444565b60206040518083038186803b15801561226c57600080fd5b505afa158015612280573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122a49190613289565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8616906370a08231906122f6908790600401613423565b60206040518083038186803b15801561230e57600080fd5b505afa158015612322573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116f29190613289565b60008183106123555781611486565b5090919050565b600061220c836119a2612370826001612496565b61237a88876124b5565b906128d5565b60006fffffffffffffffffffffffffffffffff8211156123a8576123a8610c976003846128f1565b5090565b60408101517ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141111580612403575060608101517f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a111155b1561241657612416610c97600584612460565b60008151600381111561242557fe5b141561243957612439610c97600384612460565b60018151600381111561244857fe5b141561245c5761245c610c97600084612460565b5050565b60607ff18f11f3027e735c758137924b262d4d3aff0037dcd785aca3c699fa05d960bd8383604051602401611e4d92919061366c565b6000828211156124af576124af610c976002858561290e565b50900390565b6000826124c457506000610963565b828202828482816124d157fe5b041461148657611486610c976001868661290e565b6000816124fc576124fc610c976003858561290e565b600082848161250757fe5b04949350505050565b6000600183141561255d57612556826000015185604001516fffffffffffffffffffffffffffffffff1686608001516fffffffffffffffffffffffffffffffff166129b3565b9050611486565b61220c826020015185606001516fffffffffffffffffffffffffffffffff1686608001516fffffffffffffffffffffffffffffffff166129b3565b600060808260088111156125a857fe5b600101901b92915050565b60006125bd611c8d565b8451600090815260069190910160205260409020549050806125eb576125eb610c97856000015160006129e1565b6001846020015160048111156125fd57fe5b1461261757612617610c97856000015186602001516129e1565b60e085015173ffffffffffffffffffffffffffffffffffffffff161561266b5760e085015173ffffffffffffffffffffffffffffffffffffffff16331461266b5761266b610c9760028660000151336129fe565b60c085015173ffffffffffffffffffffffffffffffffffffffff16156126d5578273ffffffffffffffffffffffffffffffffffffffff168560c0015173ffffffffffffffffffffffffffffffffffffffff16146126d5576126d5610c9760018660000151866129fe565b60006126e5856000015184611738565b90508560a0015173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461273057612730610c9760008760000151612a1d565b505050505050565b61274f83600001518560a001518360200151610cad565b835160a08401518251612763929190610cad565b6127768360000151838360600151610cad565b6127898460000151838360400151610cad565b6080810151156127aa576127aa84600001518560a001518360800151610cad565b60a0810151156127305761273083600001518460a001518360a00151610cad565b6127ed816127d7611c8d565b60008a81526020919091526040902054906128d5565b6127f5611c8d565b6000898152602091909152604090205561282a83612811611c8d565b60008a8152600191909101602052604090205490612496565b612832611c8d565b6000898152600191909101602052604090205561287082611bbf858188612857611c8d565b60008e8152600691909101602052604090205490612496565b612878611c8d565b600601600089815260200190815260200160002081905550867f748c85a5ac1c8590cda7df4a1afb0caba73e19b5b8069477f89d145b08d735738787866040516128c493929190613a5b565b60405180910390a250505050505050565b60008282018381101561148657611486610c976000868661290e565b606063c996af7b60e01b8383604051602401611e4d92919061360f565b606063e946c1bb60e01b84848460405160240161292d939291906135ee565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290509392505050565b60006129c0848484612a3a565b156129d3576129d3610c97858585612a94565b61220c836119a286856124b5565b606063fdb6ca8d60e01b8383604051602401611e4d92919061353d565b606063e53c76c860e01b84848460405160240161292d93929190613626565b6060637e5a231860e01b8383604051602401611e4d92919061365e565b600082612a4c57612a4c610c97612ab3565b811580612a57575083155b15612a6457506000611486565b60008380612a6e57fe5b8584099050612a7d85846124b5565b612a89826103e86124b5565b101595945050505050565b606063339f3de260e01b84848460405160240161292d93929190613a5b565b60408051808201909152600481527fa791837c00000000000000000000000000000000000000000000000000000000602082015290565b604080516080810190915260008082526020820190815260006020820181905260409091015290565b6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915290565b803561096381613ad8565b60008083601f840112612ba1578182fd5b50813567ffffffffffffffff811115612bb8578182fd5b602083019150836020608083028501011115612bd357600080fd5b9250929050565b600061018082840312156107bc578081fd5b6000610180808385031215612bff578182fd5b612c0881613a71565b915050612c158383612b85565b8152612c248360208401612b85565b6020820152612c368360408401612e0b565b6040820152612c488360608401612e0b565b6060820152612c5a8360808401612e0b565b6080820152612c6c8360a08401612b85565b60a0820152612c7e8360c08401612b85565b60c0820152612c908360e08401612b85565b60e0820152610100612ca484828501612b85565b908201526101208281013590820152610140612cc284828501612e16565b818301525061016080830135818301525092915050565b6000610140808385031215612cec578182fd5b612cf581613a71565b915050612d028383612b85565b8152612d118360208401612b85565b6020820152612d238360408401612e0b565b6040820152612d358360608401612e0b565b6060820152612d478360808401612b85565b6080820152612d598360a08401612b85565b60a0820152612d6b8360c08401612b85565b60c082015260e082013560e0820152610100612d8984828501612e16565b818301525061012080830135818301525092915050565b6000608082840312156107bc578081fd5b600060808284031215612dc2578081fd5b612dcc6080613a71565b9050813560048110612ddd57600080fd5b8152612dec8360208401612e2e565b6020820152604082013560408201526060820135606082015292915050565b803561096381613b08565b803567ffffffffffffffff8116811461096357600080fd5b803560ff8116811461096357600080fd5b600060208284031215612e50578081fd5b815161148681613ad8565b60008060408385031215612e6d578081fd5b8235612e7881613ad8565b91506020830135612e8881613ad8565b809150509250929050565b60008060008060408587031215612ea8578182fd5b843567ffffffffffffffff80821115612ebf578384fd5b818701915087601f830112612ed2578384fd5b813581811115612ee0578485fd5b88602061018083028501011115612ef5578485fd5b602092830196509450908601359080821115612f0f578384fd5b50612f1c87828801612b90565b95989497509550505050565b60008060008060408587031215612f3d578182fd5b843567ffffffffffffffff80821115612f54578384fd5b818701915087601f830112612f67578384fd5b813581811115612f75578485fd5b88602061014083028501011115612ef5578485fd5b600060208284031215612f9b578081fd5b815161148681613afa565b600060208284031215612fb7578081fd5b5035919050565b600080600060608486031215612fd2578081fd5b8335612fdd81613ad8565b92506020840135612fed81613ad8565b929592945050506040919091013590565b6000806000806000806000610460888a031215613019578485fd5b6130238989612bda565b9650613033896101808a01612bda565b9550613043896103008a01612da0565b9450613053896103808a01612da0565b9350610400880135925061306b896104208a01612e2e565b915061307b896104408a01612e2e565b905092959891949750929550565b600080600080600061036086880312156130a1578283fd5b6130ab8787612bda565b94506130bb876101808801612bda565b935061030086013592506130d3876103208801612e2e565b91506130e3876103408801612e2e565b90509295509295909350565b60006101808284031215613101578081fd5b6114868383612bec565b600080610200838503121561311e578182fd5b6131288484612bec565b9150613138846101808501612da0565b90509250929050565b6000806101a08385031215613154578182fd5b61315e8484612bec565b9150610180830135612e8881613b08565b600080600083850360c0811215613184578182fd5b6080811215613191578182fd5b5061319c6080613a71565b845181526020850151600581106131b1578283fd5b602082015260408501516131c481613b08565b604082015260608501516131d781613b08565b606082015260808501519093506131ed81613b08565b60a08501519092506131fe81613afa565b809150509250925092565b6000610140828403121561321b578081fd5b6114868383612cd9565b6000806101c08385031215613238578182fd5b6132428484612cd9565b9150613138846101408501612db1565b600060808284031215613263578081fd5b6114868383612db1565b60006020828403121561327e578081fd5b813561148681613b08565b60006020828403121561329a578081fd5b5051919050565b6000602082840312156132b2578081fd5b6114868383612e2e565b60006132c88383613340565b505060800190565b6fffffffffffffffffffffffffffffffff16815260200190565b73ffffffffffffffffffffffffffffffffffffffff169052565b6000815180845260208085019450808401835b83811015613335578151151587529582019590820190600101613317565b509495945050505050565b8051825260208101516005811061335357fe5b60208301526040818101516fffffffffffffffffffffffffffffffff9081169184019190915260609182015116910152565b80356004811061339457600080fd5b61339d81613acb565b82526040810160ff6133b28260208501612e2e565b166020840152356040830152606090810135910152565b6fffffffffffffffffffffffffffffffff169052565b67ffffffffffffffff169052565b7f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b600060608201606083528086516134a88184613534565b915060209250828801845b828110156134d4576134c68483516132bc565b9350908401906001016134b3565b505050838103828501528086516134eb8184613534565b91508388019250845b81811015613515576135078385516132d0565b9385019392506001016134f4565b505084810360408601526113c98187613304565b901515815260200190565b90815260200190565b828152604081016005831061354e57fe5b8260208301529392505050565b93845260ff9290921660208401526040830152606082015260800190565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b7fffffffff0000000000000000000000000000000000000000000000000000000092909216825273ffffffffffffffffffffffffffffffffffffffff16602082015260400190565b606081016135fb85613acb565b938152602081019290925260409091015290565b6040810161361c84613acb565b9281526020015290565b606081016003851061363457fe5b938152602081019290925273ffffffffffffffffffffffffffffffffffffffff1660409091015290565b604081016007841061361c57fe5b604081016006841061361c57fe5b6000602080835283518082850152825b818110156136a65785810183015185820160400152820161368a565b818111156136b75783604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b6020808252602c908201527f4e61746976654f7264657273466561747572652f4d49534d4154434845445f4160408201527f525241595f4c454e475448530000000000000000000000000000000000000000606082015260800190565b60208082526024908201527f466978696e546f6b656e5370656e6465722f43414e4e4f545f494e564f4b455f60408201527f53454c4600000000000000000000000000000000000000000000000000000000606082015260800190565b6102008101602084016137c1836137bc8388612b85565b6132ea565b6137cb8186613a98565b90506137da60208401826132ea565b506137e86040850185613aa5565b6137f560408401826133c9565b506138036060850185613aa5565b61381060608401826133c9565b5061381e6080850185613aa5565b61382b60808401826133c9565b5061383960a0850185613a98565b61384660a08401826132ea565b5061385460c0850185613a98565b61386160c08401826132ea565b5061386f60e0850185613a98565b61387c60e08401826132ea565b5061010061388c81860186613a98565b613898828501826132ea565b505061012084810135908301526101406138b481860186613ab2565b6138c0828501826133df565b50506101608481013590830152611486610180830184613385565b600060c082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015292915050565b608081016109638284613340565b60c0810161393b8286613340565b6fffffffffffffffffffffffffffffffff8416608083015282151560a0830152949350505050565b6101c081016020840161397a836137bc8388612b85565b6139848186613a98565b905061399360208401826132ea565b506139a16040850185613aa5565b6139ae60408401826133c9565b506139bc6060850185613aa5565b6139c960608401826133c9565b506139d76080850185613a98565b6139e460808401826132ea565b506139f260a0850185613a98565b6139ff60a08401826132ea565b50613a0d60c0850185613a98565b613a1a60c08401826132ea565b5060e084013560e0830152610100613a3481860186613ab2565b613a40828501826133df565b50506101208481013590830152611486610140830184613385565b9283526020830191909152604082015260600190565b60405181810167ffffffffffffffff81118282101715613a9057600080fd5b604052919050565b6000823561148681613ad8565b6000823561148681613b08565b6000823567ffffffffffffffff81168114611486578182fd5b60048110613ad557fe5b50565b73ffffffffffffffffffffffffffffffffffffffff81168114613ad557600080fd5b8015158114613ad557600080fd5b6fffffffffffffffffffffffffffffffff81168114613ad557600080fdfea2646970667358221220e679186b6b16c9d63563492b4d4752812c7ca82e622199d5a53113ac2e2115fb64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "batchGetLimitOrderRelevantStates((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256)[],(uint8,uint8,bytes32,bytes32)[])": {
        "details": "Batch version of `getLimitOrderRelevantState()`, without reverting.      Orders that would normally cause `getLimitOrderRelevantState()`      to revert will have empty results.",
        "params": {
          "orders": "The limit orders.",
          "signatures": "The order signatures."
        },
        "returns": {
          "actualFillableTakerTokenAmounts": "How much of each order is fillable         based on maker funds, in taker tokens.",
          "isSignatureValids": "Whether each signature is valid for the order.",
          "orderInfos": "Info about the orders."
        }
      },
      "batchGetRfqOrderRelevantStates((address,address,uint128,uint128,address,address,address,bytes32,uint64,uint256)[],(uint8,uint8,bytes32,bytes32)[])": {
        "details": "Batch version of `getRfqOrderRelevantState()`, without reverting.      Orders that would normally cause `getRfqOrderRelevantState()`      to revert will have empty results.",
        "params": {
          "orders": "The RFQ orders.",
          "signatures": "The order signatures."
        },
        "returns": {
          "actualFillableTakerTokenAmounts": "How much of each order is fillable         based on maker funds, in taker tokens.",
          "isSignatureValids": "Whether each signature is valid for the order.",
          "orderInfos": "Info about the orders."
        }
      },
      "getLimitOrderHash((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256))": {
        "details": "Get the canonical hash of a limit order.",
        "params": {
          "order": "The limit order."
        },
        "returns": {
          "orderHash": "The order hash."
        }
      },
      "getLimitOrderInfo((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256))": {
        "details": "Get the order info for a limit order.",
        "params": {
          "order": "The limit order."
        },
        "returns": {
          "orderInfo": "Info about the order."
        }
      },
      "getLimitOrderRelevantState((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256),(uint8,uint8,bytes32,bytes32))": {
        "details": "Get order info, fillable amount, and signature validity for a limit order.      Fillable amount is determined using balances and allowances of the maker.",
        "params": {
          "order": "The limit order.",
          "signature": "The order signature."
        },
        "returns": {
          "actualFillableTakerTokenAmount": "How much of the order is fillable         based on maker funds, in taker tokens.",
          "isSignatureValid": "Whether the signature is valid.",
          "orderInfo": "Info about the order."
        }
      },
      "getRfqOrderHash((address,address,uint128,uint128,address,address,address,bytes32,uint64,uint256))": {
        "details": "Get the canonical hash of an RFQ order.",
        "params": {
          "order": "The RFQ order."
        },
        "returns": {
          "orderHash": "The order hash."
        }
      },
      "getRfqOrderInfo((address,address,uint128,uint128,address,address,address,bytes32,uint64,uint256))": {
        "details": "Get the order info for an RFQ order.",
        "params": {
          "order": "The RFQ order."
        },
        "returns": {
          "orderInfo": "Info about the order."
        }
      },
      "getRfqOrderRelevantState((address,address,uint128,uint128,address,address,address,bytes32,uint64,uint256),(uint8,uint8,bytes32,bytes32))": {
        "details": "Get order info, fillable amount, and signature validity for an RFQ order.      Fillable amount is determined using balances and allowances of the maker.",
        "params": {
          "order": "The RFQ order.",
          "signature": "The order signature."
        },
        "returns": {
          "actualFillableTakerTokenAmount": "How much of the order is fillable         based on maker funds, in taker tokens.",
          "isSignatureValid": "Whether the signature is valid.",
          "orderInfo": "Info about the order."
        }
      },
      "isValidOrderSigner(address,address)": {
        "details": "checks if a given address is registered to sign on behalf of a maker address",
        "params": {
          "maker": "The maker address encoded in an order (can be a contract)",
          "signer": "The address that is providing a signature"
        }
      }
    },
    "stateVariables": {
      "FEATURE_NAME": {
        "details": "The name of this feature set."
      },
      "FEATURE_VERSION": {
        "details": "Version of this feature."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}